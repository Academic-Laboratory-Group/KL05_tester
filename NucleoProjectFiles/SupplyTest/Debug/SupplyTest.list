
SupplyTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007cd8  08007cd8  00017cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080fc  080080fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008104  08008104  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800810c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001dc  080082e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080082e8  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ad  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f56  00000000  00000000  0002e9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023205  00000000  00000000  000323a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc59  00000000  00000000  000555ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0f2  00000000  00000000  00065206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001422f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cfc  00000000  00000000  0014234c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00147048  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00147114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cbc 	.word	0x08007cbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007cbc 	.word	0x08007cbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fcc0 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f81e 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f966 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef0:	f000 f926 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef4:	f000 f8fa 	bl	80010ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ef8:	f000 f882 	bl	8001000 <MX_ADC1_Init>
  MX_TIM14_Init();
 8000efc:	f000 f8d2 	bl	80010a4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, &Received, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	4905      	ldr	r1, [pc, #20]	; (8000f18 <main+0x38>)
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <main+0x3c>)
 8000f06:	f003 f91b 	bl	8004140 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, &PomiarADC, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4904      	ldr	r1, [pc, #16]	; (8000f20 <main+0x40>)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <main+0x44>)
 8000f10:	f000 fd60 	bl	80019d4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <main+0x34>
 8000f16:	bf00      	nop
 8000f18:	20000230 	.word	0x20000230
 8000f1c:	200003a8 	.word	0x200003a8
 8000f20:	20000294 	.word	0x20000294
 8000f24:	200002a0 	.word	0x200002a0

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2234      	movs	r2, #52	; 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 ffa0 	bl	8004e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2310      	movs	r3, #16
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fa0:	2354      	movs	r3, #84	; 0x54
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fa97 	bl	80034e8 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fc0:	f000 fa38 	bl	8001434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 ffb5 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fec:	f000 fa22 	bl	8001434 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_ADC1_Init+0x98>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <MX_ADC1_Init+0x9c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ADC1_Init+0x98>)
 800101a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ADC1_Init+0x98>)
 800102e:	2201      	movs	r2, #1
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC1_Init+0x98>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xa0>)
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC1_Init+0x98>)
 800105c:	2201      	movs	r2, #1
 800105e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x98>)
 8001062:	f000 fc73 	bl	800194c <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800106c:	f000 f9e2 	bl	8001434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001078:	2307      	movs	r3, #7
 800107a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC1_Init+0x98>)
 8001082:	f000 fdd9 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800108c:	f000 f9d2 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200002a0 	.word	0x200002a0
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <MX_TIM14_Init+0x44>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010b0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010b4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010be:	f242 720f 	movw	r2, #9999	; 0x270f
 80010c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_TIM14_Init+0x40>)
 80010d2:	f002 fca7 	bl	8003a24 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80010dc:	f000 f9aa 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200003ec 	.word	0x200003ec
 80010e8:	40002000 	.word	0x40002000

080010ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f002 ff52 	bl	8003fcc <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f000 f981 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200003a8 	.word	0x200003a8
 800113c:	40004400 	.word	0x40004400

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_DMA_Init+0x78>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <MX_DMA_Init+0x78>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_DMA_Init+0x78>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_DMA_Init+0x78>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_DMA_Init+0x78>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_DMA_Init+0x78>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2010      	movs	r0, #16
 8001184:	f001 f8e3 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001188:	2010      	movs	r0, #16
 800118a:	f001 f8fc 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2011      	movs	r0, #17
 8001194:	f001 f8db 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001198:	2011      	movs	r0, #17
 800119a:	f001 f8f4 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2038      	movs	r0, #56	; 0x38
 80011a4:	f001 f8d3 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a8:	2038      	movs	r0, #56	; 0x38
 80011aa:	f001 f8ec 	bl	8002386 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_GPIO_Init+0xd0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_GPIO_Init+0xd0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001248:	f001 fe4e 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_GPIO_Init+0xdc>)
 8001262:	f001 fcad 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001266:	2320      	movs	r3, #32
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_GPIO_Init+0xd4>)
 800127e:	f001 fc9f 	bl	8002bc0 <HAL_GPIO_Init>

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	10210000 	.word	0x10210000
 8001298:	40020800 	.word	0x40020800

0800129c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

	static uint8_t Data[40]; // Tablica przechowujaca wysylana wiadomosc.

	sprintf(Data, "Odebrana wiadomosc: %s\n\r", &Received);
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_UART_RxCpltCallback+0x3c>)
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <HAL_UART_RxCpltCallback+0x40>)
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <HAL_UART_RxCpltCallback+0x44>)
 80012aa:	f004 fa8d 	bl	80057c8 <siprintf>
	HAL_UART_Transmit_DMA(&huart2, Data, 40); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <HAL_UART_RxCpltCallback+0x44>)
 80012b2:	480c      	ldr	r0, [pc, #48]	; (80012e4 <HAL_UART_RxCpltCallback+0x48>)
 80012b4:	f002 fed8 	bl	8004068 <HAL_UART_Transmit_DMA>


		HAL_TIM_Base_Start_IT(&htim14);
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_UART_RxCpltCallback+0x4c>)
 80012ba:	f002 fc03 	bl	8003ac4 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80012be:	2120      	movs	r1, #32
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <HAL_UART_RxCpltCallback+0x50>)
 80012c2:	f001 fe2a 	bl	8002f1a <HAL_GPIO_TogglePin>

	HAL_UART_Receive_DMA(&huart2, &Received, 1); // Ponowne włączenie nasłuchiwania
 80012c6:	2201      	movs	r2, #1
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <HAL_UART_RxCpltCallback+0x3c>)
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <HAL_UART_RxCpltCallback+0x48>)
 80012cc:	f002 ff38 	bl	8004140 <HAL_UART_Receive_DMA>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000230 	.word	0x20000230
 80012dc:	08007cd8 	.word	0x08007cd8
 80012e0:	200001fc 	.word	0x200001fc
 80012e4:	200003a8 	.word	0x200003a8
 80012e8:	200003ec 	.word	0x200003ec
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM14)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3b      	ldr	r2, [pc, #236]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d170      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0xf4>
	{
 8001302:	466b      	mov	r3, sp
 8001304:	461e      	mov	r6, r3
		counterMeasurement++;
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001310:	701a      	strb	r2, [r3, #0]
		Voltage = (SupplyVoltage*PomiarADC)/(ADCResolution-1); // Przeliczenie wartosci zmierzonej na napiecie
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001322:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001326:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80013f8 <HAL_TIM_PeriodElapsedCallback+0x108>
 800132a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800132e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001338:	edc3 7a00 	vstr	s15, [r3]

		int size = snprintf(0, 0, "%.2f", Voltage); // convertion float to string
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f921 	bl	8000588 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9cd 2300 	strd	r2, r3, [sp]
 800134e:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f004 fa04 	bl	8005760 <sniprintf>
 8001358:	6178      	str	r0, [r7, #20]
		char s[size + 1];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1c5c      	adds	r4, r3, #1
 800135e:	1e63      	subs	r3, r4, #1
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4623      	mov	r3, r4
 8001364:	4618      	mov	r0, r3
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	00cb      	lsls	r3, r1, #3
 8001374:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001378:	00c2      	lsls	r2, r0, #3
 800137a:	4623      	mov	r3, r4
 800137c:	4618      	mov	r0, r3
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	00cb      	lsls	r3, r1, #3
 800138c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001390:	00c2      	lsls	r2, r0, #3
 8001392:	4623      	mov	r3, r4
 8001394:	3307      	adds	r3, #7
 8001396:	08db      	lsrs	r3, r3, #3
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	ebad 0d03 	sub.w	sp, sp, r3
 800139e:	ab02      	add	r3, sp, #8
 80013a0:	3300      	adds	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
		snprintf(s, sizeof(s), "%.2f", Voltage);
 80013a4:	68fd      	ldr	r5, [r7, #12]
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8ec 	bl	8000588 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9cd 2300 	strd	r2, r3, [sp]
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80013ba:	4621      	mov	r1, r4
 80013bc:	4628      	mov	r0, r5
 80013be:	f004 f9cf 	bl	8005760 <sniprintf>

		HAL_UART_Transmit_DMA(&huart2, s , 4);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2204      	movs	r2, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80013ca:	f002 fe4d 	bl	8004068 <HAL_UART_Transmit_DMA>

		if (counterMeasurement == 10)
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	d105      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			counterMeasurement = 0;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim14);
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80013de:	f002 fbe1 	bl	8003ba4 <HAL_TIM_Base_Stop_IT>
 80013e2:	46b5      	mov	sp, r6
		}

	}
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ec:	40002000 	.word	0x40002000
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	20000294 	.word	0x20000294
 80013f8:	45800000 	.word	0x45800000
 80013fc:	20000298 	.word	0x20000298
 8001400:	08007cf4 	.word	0x08007cf4
 8001404:	200003a8 	.word	0x200003a8
 8001408:	200003ec 	.word	0x200003ec

0800140c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	PomiarADC = HAL_ADC_GetValue(&hadc1); // Pobranie zmierzonej wartosci
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <HAL_ADC_ConvCpltCallback+0x20>)
 8001416:	f000 fbed 	bl	8001bf4 <HAL_ADC_GetValue>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_ADC_ConvCpltCallback+0x24>)
 8001420:	801a      	strh	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002a0 	.word	0x200002a0
 8001430:	20000294 	.word	0x20000294

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_MspInit+0x4c>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_MspInit+0x4c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800147e:	2007      	movs	r0, #7
 8001480:	f000 ff5a 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2f      	ldr	r2, [pc, #188]	; (800156c <HAL_ADC_MspInit+0xdc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d157      	bne.n	8001562 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_ADC_MspInit+0xe0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_ADC_MspInit+0xe4>)
 80014fe:	f001 fb5f 	bl	8002bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_ADC_MspInit+0xec>)
 8001506:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001528:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800152c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001538:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 8001548:	f000 ff38 	bl	80023bc <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001552:	f7ff ff6f 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_ADC_MspInit+0xe8>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	20000348 	.word	0x20000348
 800157c:	40026410 	.word	0x40026410

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_TIM_Base_MspInit+0x48>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d115      	bne.n	80015be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_TIM_Base_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_TIM_Base_MspInit+0x4c>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_TIM_Base_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	202d      	movs	r0, #45	; 0x2d
 80015b4:	f000 fecb 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015b8:	202d      	movs	r0, #45	; 0x2d
 80015ba:	f000 fee4 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40002000 	.word	0x40002000
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_UART_MspInit+0x14c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 8090 	bne.w	8001714 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_UART_MspInit+0x150>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_UART_MspInit+0x150>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_UART_MspInit+0x150>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <HAL_UART_MspInit+0x150>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a41      	ldr	r2, [pc, #260]	; (8001720 <HAL_UART_MspInit+0x150>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <HAL_UART_MspInit+0x150>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162c:	230c      	movs	r3, #12
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163c:	2307      	movs	r3, #7
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4837      	ldr	r0, [pc, #220]	; (8001724 <HAL_UART_MspInit+0x154>)
 8001648:	f001 faba 	bl	8002bc0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_UART_MspInit+0x158>)
 800164e:	4a37      	ldr	r2, [pc, #220]	; (800172c <HAL_UART_MspInit+0x15c>)
 8001650:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001654:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001658:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_UART_MspInit+0x158>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_UART_MspInit+0x158>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_UART_MspInit+0x158>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800168c:	4826      	ldr	r0, [pc, #152]	; (8001728 <HAL_UART_MspInit+0x158>)
 800168e:	f000 fe95 	bl	80023bc <HAL_DMA_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001698:	f7ff fecc 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_UART_MspInit+0x158>)
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_UART_MspInit+0x158>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_UART_MspInit+0x164>)
 80016ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016b8:	2240      	movs	r2, #64	; 0x40
 80016ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016e8:	4811      	ldr	r0, [pc, #68]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016ea:	f000 fe67 	bl	80023bc <HAL_DMA_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80016f4:	f7ff fe9e 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_UART_MspInit+0x160>)
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_UART_MspInit+0x160>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2026      	movs	r0, #38	; 0x26
 800170a:	f000 fe20 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170e:	2026      	movs	r0, #38	; 0x26
 8001710:	f000 fe39 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004400 	.word	0x40004400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	20000234 	.word	0x20000234
 800172c:	40026088 	.word	0x40026088
 8001730:	200002e8 	.word	0x200002e8
 8001734:	400260a0 	.word	0x400260a0

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 f8c2 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA1_Stream5_IRQHandler+0x10>)
 8001792:	f000 ffab 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000234 	.word	0x20000234

080017a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream6_IRQHandler+0x10>)
 80017a6:	f000 ffa1 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200002e8 	.word	0x200002e8

080017b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <USART2_IRQHandler+0x10>)
 80017ba:	f002 fcf1 	bl	80041a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200003a8 	.word	0x200003a8

080017c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80017ce:	f002 fa18 	bl	8003c02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003ec 	.word	0x200003ec

080017dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA2_Stream0_IRQHandler+0x10>)
 80017e2:	f000 ff83 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000348 	.word	0x20000348

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001830:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800183e:	f7ff ffd7 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f003 faf7 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff fb4b 	bl	8000ee0 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001858:	0800810c 	.word	0x0800810c
  ldr r2, =_sbss
 800185c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001860:	20000448 	.word	0x20000448

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 fd51 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fdd0 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fd69 	bl	80023a2 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 fd31 	bl	800234e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	20000434 	.word	0x20000434

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000434 	.word	0x20000434

0800194c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e033      	b.n	80019ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fd90 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001992:	f023 0302 	bic.w	r3, r3, #2
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fa7c 	bl	8001e9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ba:	e001      	b.n	80019c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start_DMA+0x1e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0e9      	b.n	8001bc6 <HAL_ADC_Start_DMA+0x1f2>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d018      	beq.n	8001a3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a18:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <HAL_ADC_Start_DMA+0x1fc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6d      	ldr	r2, [pc, #436]	; (8001bd4 <HAL_ADC_Start_DMA+0x200>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9a      	lsrs	r2, r3, #18
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a2c:	e002      	b.n	8001a34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a48:	d107      	bne.n	8001a5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80a1 	bne.w	8001bac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f023 0206 	bic.w	r2, r3, #6
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab6:	e002      	b.n	8001abe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac6:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001ac8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_ADC_Start_DMA+0x208>)
 8001ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	4a42      	ldr	r2, [pc, #264]	; (8001be0 <HAL_ADC_Start_DMA+0x20c>)
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4a41      	ldr	r2, [pc, #260]	; (8001be4 <HAL_ADC_Start_DMA+0x210>)
 8001ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001afa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	334c      	adds	r3, #76	; 0x4c
 8001b16:	4619      	mov	r1, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f000 fcfc 	bl	8002518 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d12a      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_ADC_Start_DMA+0x214>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d015      	beq.n	8001b62 <HAL_ADC_Start_DMA+0x18e>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2c      	ldr	r2, [pc, #176]	; (8001bec <HAL_ADC_Start_DMA+0x218>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d105      	bne.n	8001b4c <HAL_ADC_Start_DMA+0x178>
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_ADC_Start_DMA+0x21c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d136      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_ADC_Start_DMA+0x204>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d130      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d129      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	e020      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <HAL_ADC_Start_DMA+0x214>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d114      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	e00b      	b.n	8001bc4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	40012300 	.word	0x40012300
 8001bdc:	08002095 	.word	0x08002095
 8001be0:	0800214f 	.word	0x0800214f
 8001be4:	0800216b 	.word	0x0800216b
 8001be8:	40012000 	.word	0x40012000
 8001bec:	40012100 	.word	0x40012100
 8001bf0:	40012200 	.word	0x40012200

08001bf4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e113      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x244>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d925      	bls.n	8001cb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68d9      	ldr	r1, [r3, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4403      	add	r3, r0
 8001ca2:	3b1e      	subs	r3, #30
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e022      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4403      	add	r3, r0
 8001cec:	409a      	lsls	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d824      	bhi.n	8001d48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b05      	subs	r3, #5
 8001d10:	221f      	movs	r2, #31
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b05      	subs	r3, #5
 8001d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
 8001d46:	e04c      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d824      	bhi.n	8001d9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b23      	subs	r3, #35	; 0x23
 8001d62:	221f      	movs	r2, #31
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b23      	subs	r3, #35	; 0x23
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
 8001d98:	e023      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b41      	subs	r3, #65	; 0x41
 8001dac:	221f      	movs	r2, #31
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b41      	subs	r3, #65	; 0x41
 8001dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_ADC_ConfigChannel+0x250>)
 8001de4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <HAL_ADC_ConfigChannel+0x254>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1d8>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d10b      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_ADC_ConfigChannel+0x254>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x23a>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_ADC_ConfigChannel+0x258>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d003      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0x1f4>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b11      	cmp	r3, #17
 8001e2a:	d122      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_ADC_ConfigChannel+0x258>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d111      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_ADC_ConfigChannel+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_ADC_ConfigChannel+0x260>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9a      	lsrs	r2, r3, #18
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	10000012 	.word	0x10000012
 8001e94:	20000000 	.word	0x20000000
 8001e98:	431bde83 	.word	0x431bde83

08001e9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea4:	4b79      	ldr	r3, [pc, #484]	; (800208c <ADC_Init+0x1f0>)
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	021a      	lsls	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4a58      	ldr	r2, [pc, #352]	; (8002090 <ADC_Init+0x1f4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d022      	beq.n	8001f7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e00f      	b.n	8001f9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0202 	bic.w	r2, r2, #2
 8001fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e1b      	ldrb	r3, [r3, #24]
 8001fb4:	005a      	lsls	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fe6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	035a      	lsls	r2, r3, #13
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e007      	b.n	8002010 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	3b01      	subs	r3, #1
 800202c:	051a      	lsls	r2, r3, #20
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002052:	025a      	lsls	r2, r3, #9
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	029a      	lsls	r2, r3, #10
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40012300 	.word	0x40012300
 8002090:	0f000001 	.word	0x0f000001

08002094 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d13c      	bne.n	8002128 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d12b      	bne.n	8002120 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d127      	bne.n	8002120 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d119      	bne.n	8002120 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0220 	bic.w	r2, r2, #32
 80020fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff f973 	bl	800140c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002126:	e00e      	b.n	8002146 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fd74 	bl	8001c22 <HAL_ADC_ErrorCallback>
}
 800213a:	e004      	b.n	8002146 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff fd56 	bl	8001c0e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f043 0204 	orr.w	r2, r3, #4
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fd49 	bl	8001c22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <__NVIC_GetPriorityGrouping+0x18>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	f003 0307 	and.w	r3, r3, #7
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	db0b      	blt.n	8002226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4907      	ldr	r1, [pc, #28]	; (8002234 <__NVIC_EnableIRQ+0x38>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2001      	movs	r0, #1
 800221e:	fa00 f202 	lsl.w	r2, r0, r2
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002304:	d301      	bcc.n	800230a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <SysTick_Config+0x40>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002312:	210f      	movs	r1, #15
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f7ff ff8e 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SysTick_Config+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SysTick_Config+0x40>)
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff29 	bl	8002198 <__NVIC_SetPriorityGrouping>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002360:	f7ff ff3e 	bl	80021e0 <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ff8e 	bl	800228c <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff5d 	bl	8002238 <__NVIC_SetPriority>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff31 	bl	80021fc <__NVIC_EnableIRQ>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffa2 	bl	80022f4 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fab4 	bl	8001934 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e099      	b.n	800250c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	e00f      	b.n	800241a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fa:	f7ff fa9b 	bl	8001934 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b05      	cmp	r3, #5
 8002406:	d908      	bls.n	800241a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e078      	b.n	800250c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e8      	bne.n	80023fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_DMA_Init+0x158>)
 8002434:	4013      	ands	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b04      	cmp	r3, #4
 8002472:	d107      	bne.n	8002484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4313      	orrs	r3, r2
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d117      	bne.n	80024de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fb01 	bl	8002ac8 <DMA_CheckFifoParam>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2240      	movs	r2, #64	; 0x40
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024da:	2301      	movs	r3, #1
 80024dc:	e016      	b.n	800250c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fab8 	bl	8002a5c <DMA_CalcBaseAndBitshift>
 80024ec:	4603      	mov	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	223f      	movs	r2, #63	; 0x3f
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f010803f 	.word	0xf010803f

08002518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_DMA_Start_IT+0x26>
 800253a:	2302      	movs	r3, #2
 800253c:	e040      	b.n	80025c0 <HAL_DMA_Start_IT+0xa8>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d12f      	bne.n	80025b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fa4a 	bl	8002a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	223f      	movs	r2, #63	; 0x3f
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0216 	orr.w	r2, r2, #22
 8002586:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e005      	b.n	80025be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d6:	f7ff f9ad 	bl	8001934 <HAL_GetTick>
 80025da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e052      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0216 	bic.w	r2, r2, #22
 8002608:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_DMA_Abort+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264a:	e013      	b.n	8002674 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264c:	f7ff f972 	bl	8001934 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b05      	cmp	r3, #5
 8002658:	d90c      	bls.n	8002674 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e015      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e4      	bne.n	800264c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	223f      	movs	r2, #63	; 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00c      	b.n	80026e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b92      	ldr	r3, [pc, #584]	; (8002944 <HAL_DMA_IRQHandler+0x258>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a92      	ldr	r2, [pc, #584]	; (8002948 <HAL_DMA_IRQHandler+0x25c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2208      	movs	r2, #8
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2204      	movs	r2, #4
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2204      	movs	r2, #4
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2210      	movs	r2, #16
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d043      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03c      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2210      	movs	r2, #16
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d024      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e01f      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e016      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	2220      	movs	r2, #32
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 808e 	beq.w	800298a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8086 	beq.w	800298a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2220      	movs	r2, #32
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d136      	bne.n	8002904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0216 	bic.w	r2, r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x1da>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	223f      	movs	r2, #63	; 0x3f
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
        }
        return;
 8002902:	e078      	b.n	80029f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01c      	beq.n	800294c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d108      	bne.n	8002932 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	2b00      	cmp	r3, #0
 8002926:	d030      	beq.n	800298a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e02b      	b.n	800298a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d027      	beq.n	800298a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e022      	b.n	800298a <HAL_DMA_IRQHandler+0x29e>
 8002944:	20000000 	.word	0x20000000
 8002948:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0210 	bic.w	r2, r2, #16
 8002968:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	2b00      	cmp	r3, #0
 8002990:	d032      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d022      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2205      	movs	r2, #5
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d307      	bcc.n	80029d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f2      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x2ca>
 80029d0:	e000      	b.n	80029d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029f6:	bf00      	nop
    }
  }
}
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop

08002a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d108      	bne.n	8002a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3e:	e007      	b.n	8002a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3b10      	subs	r3, #16
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d909      	bls.n	8002a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a9c:	e007      	b.n	8002aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	aaaaaaab 	.word	0xaaaaaaab
 8002ac4:	08007d14 	.word	0x08007d14

08002ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0x5a>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d856      	bhi.n	8002b96 <DMA_CheckFifoParam+0xce>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x28>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b13 	.word	0x08002b13
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b97 	.word	0x08002b97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d046      	beq.n	8002b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e043      	b.n	8002b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1a:	d140      	bne.n	8002b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e03d      	b.n	8002b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d121      	bne.n	8002b70 <DMA_CheckFifoParam+0xa8>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d837      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xda>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <DMA_CheckFifoParam+0x70>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b4f 	.word	0x08002b4f
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002b61 	.word	0x08002b61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e030      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d025      	beq.n	8002ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e022      	b.n	8002ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6e:	e01c      	b.n	8002baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d903      	bls.n	8002b7e <DMA_CheckFifoParam+0xb6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b7c:	e018      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      break;
 8002b82:	e015      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e00b      	b.n	8002bae <DMA_CheckFifoParam+0xe6>
      break;
 8002b96:	bf00      	nop
 8002b98:	e00a      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e008      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e006      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e165      	b.n	8002ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8154 	bne.w	8002ea2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80ae 	beq.w	8002ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_GPIO_Init+0x300>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a5c      	ldr	r2, [pc, #368]	; (8002ec0 <HAL_GPIO_Init+0x300>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <HAL_GPIO_Init+0x300>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_GPIO_Init+0x308>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d025      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01f      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_GPIO_Init+0x310>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d019      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_GPIO_Init+0x314>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d013      	beq.n	8002dce <HAL_GPIO_Init+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_GPIO_Init+0x318>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00d      	beq.n	8002dca <HAL_GPIO_Init+0x20a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_GPIO_Init+0x31c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a49      	ldr	r2, [pc, #292]	; (8002ee0 <HAL_GPIO_Init+0x320>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_GPIO_Init+0x202>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x21c>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dec:	4935      	ldr	r1, [pc, #212]	; (8002ec4 <HAL_GPIO_Init+0x304>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1e:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae96 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021800 	.word	0x40021800
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	041a      	lsls	r2, r3, #16
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cc      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d90c      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e067      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4934      	ldr	r1, [pc, #208]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7fe fc78 	bl	8001934 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fe fc74 	bl	8001934 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e04f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20c      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f855 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fbd8 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	08007cfc 	.word	0x08007cfc
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000000 	.word	0x20000000

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08007d0c 	.word	0x08007d0c

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	08007d0c 	.word	0x08007d0c

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a0:	4bce      	ldr	r3, [pc, #824]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	f200 818d 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x344>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_RCC_GetSysClockFreq+0x30>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080034c9 	.word	0x080034c9
 80031bc:	080034c9 	.word	0x080034c9
 80031c0:	080034c9 	.word	0x080034c9
 80031c4:	080031ef 	.word	0x080031ef
 80031c8:	080034c9 	.word	0x080034c9
 80031cc:	080034c9 	.word	0x080034c9
 80031d0:	080034c9 	.word	0x080034c9
 80031d4:	080031f5 	.word	0x080031f5
 80031d8:	080034c9 	.word	0x080034c9
 80031dc:	080034c9 	.word	0x080034c9
 80031e0:	080034c9 	.word	0x080034c9
 80031e4:	08003369 	.word	0x08003369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4bbd      	ldr	r3, [pc, #756]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031ea:	61bb      	str	r3, [r7, #24]
       break;
 80031ec:	e16f      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4bbd      	ldr	r3, [pc, #756]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x360>)
 80031f0:	61bb      	str	r3, [r7, #24]
      break;
 80031f2:	e16c      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4bb9      	ldr	r3, [pc, #740]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4bb7      	ldr	r3, [pc, #732]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d053      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4bb4      	ldr	r3, [pc, #720]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	461a      	mov	r2, r3
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	ea02 0400 	and.w	r4, r2, r0
 8003222:	603c      	str	r4, [r7, #0]
 8003224:	400b      	ands	r3, r1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	014b      	lsls	r3, r1, #5
 800323a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800323e:	0142      	lsls	r2, r0, #5
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	4623      	mov	r3, r4
 8003246:	1ac0      	subs	r0, r0, r3
 8003248:	462b      	mov	r3, r5
 800324a:	eb61 0103 	sbc.w	r1, r1, r3
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	018b      	lsls	r3, r1, #6
 8003258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800325c:	0182      	lsls	r2, r0, #6
 800325e:	1a12      	subs	r2, r2, r0
 8003260:	eb63 0301 	sbc.w	r3, r3, r1
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	00d9      	lsls	r1, r3, #3
 800326e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003272:	00d0      	lsls	r0, r2, #3
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4621      	mov	r1, r4
 800327a:	1852      	adds	r2, r2, r1
 800327c:	4629      	mov	r1, r5
 800327e:	eb43 0101 	adc.w	r1, r3, r1
 8003282:	460b      	mov	r3, r1
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	0259      	lsls	r1, r3, #9
 800328e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003292:	0250      	lsls	r0, r2, #9
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	461a      	mov	r2, r3
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	f7fd fca0 	bl	8000be8 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e04c      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b8a      	ldr	r3, [pc, #552]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	ea02 0a00 	and.w	sl, r2, r0
 80032ca:	ea03 0b01 	and.w	fp, r3, r1
 80032ce:	4650      	mov	r0, sl
 80032d0:	4659      	mov	r1, fp
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	014b      	lsls	r3, r1, #5
 80032dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e0:	0142      	lsls	r2, r0, #5
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	ebb0 000a 	subs.w	r0, r0, sl
 80032ea:	eb61 010b 	sbc.w	r1, r1, fp
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fc:	0182      	lsls	r2, r0, #6
 80032fe:	1a12      	subs	r2, r2, r0
 8003300:	eb63 0301 	sbc.w	r3, r3, r1
 8003304:	f04f 0000 	mov.w	r0, #0
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	00d9      	lsls	r1, r3, #3
 800330e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003312:	00d0      	lsls	r0, r2, #3
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	eb12 020a 	adds.w	r2, r2, sl
 800331c:	eb43 030b 	adc.w	r3, r3, fp
 8003320:	f04f 0000 	mov.w	r0, #0
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	0299      	lsls	r1, r3, #10
 800332a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800332e:	0290      	lsls	r0, r2, #10
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	461a      	mov	r2, r3
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f7fd fc52 	bl	8000be8 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	61bb      	str	r3, [r7, #24]
      break;
 8003366:	e0b2      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003368:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003370:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04d      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	ea02 0800 	and.w	r8, r2, r0
 8003396:	ea03 0901 	and.w	r9, r3, r1
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	014b      	lsls	r3, r1, #5
 80033a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ac:	0142      	lsls	r2, r0, #5
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	ebb0 0008 	subs.w	r0, r0, r8
 80033b6:	eb61 0109 	sbc.w	r1, r1, r9
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033c8:	0182      	lsls	r2, r0, #6
 80033ca:	1a12      	subs	r2, r2, r0
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	00d9      	lsls	r1, r3, #3
 80033da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033de:	00d0      	lsls	r0, r2, #3
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	eb12 0208 	adds.w	r2, r2, r8
 80033e8:	eb43 0309 	adc.w	r3, r3, r9
 80033ec:	f04f 0000 	mov.w	r0, #0
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	0259      	lsls	r1, r3, #9
 80033f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033fa:	0250      	lsls	r0, r2, #9
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	461a      	mov	r2, r3
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f7fd fbec 	bl	8000be8 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	e04a      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	461a      	mov	r2, r3
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	ea02 0400 	and.w	r4, r2, r0
 8003432:	ea03 0501 	and.w	r5, r3, r1
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	014b      	lsls	r3, r1, #5
 8003444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003448:	0142      	lsls	r2, r0, #5
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	1b00      	subs	r0, r0, r4
 8003450:	eb61 0105 	sbc.w	r1, r1, r5
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	018b      	lsls	r3, r1, #6
 800345e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003462:	0182      	lsls	r2, r0, #6
 8003464:	1a12      	subs	r2, r2, r0
 8003466:	eb63 0301 	sbc.w	r3, r3, r1
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	00d9      	lsls	r1, r3, #3
 8003474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003478:	00d0      	lsls	r0, r2, #3
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	1912      	adds	r2, r2, r4
 8003480:	eb45 0303 	adc.w	r3, r5, r3
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	0299      	lsls	r1, r3, #10
 800348e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003492:	0290      	lsls	r0, r2, #10
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	461a      	mov	r2, r3
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f7fd fba0 	bl	8000be8 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0f1b      	lsrs	r3, r3, #28
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	61bb      	str	r3, [r7, #24]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034ca:	61bb      	str	r3, [r7, #24]
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	69bb      	ldr	r3, [r7, #24]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	007a1200 	.word	0x007a1200

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e28d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8083 	beq.w	800360e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003508:	4b94      	ldr	r3, [pc, #592]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d019      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003514:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800351c:	2b08      	cmp	r3, #8
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003520:	4b8e      	ldr	r3, [pc, #568]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352c:	d00c      	beq.n	8003548 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d112      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05b      	beq.n	800360c <HAL_RCC_OscConfig+0x124>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d157      	bne.n	800360c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e25a      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x90>
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7b      	ldr	r2, [pc, #492]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0xb4>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a72      	ldr	r2, [pc, #456]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0xcc>
 800359c:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6b      	ldr	r2, [pc, #428]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d013      	beq.n	80035e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f9ba 	bl	8001934 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe f9b6 	bl	8001934 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e21f      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0xdc>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f9a6 	bl	8001934 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe f9a2 	bl	8001934 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e20b      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	4b57      	ldr	r3, [pc, #348]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x104>
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06f      	beq.n	80036fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800361a:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003626:	4b4d      	ldr	r3, [pc, #308]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1d3      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x274>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe f94f 	bl	8001934 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fe f94b 	bl	8001934 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1b4      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x278>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f92e 	bl	8001934 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fe f92a 	bl	8001934 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e193      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe f90e 	bl	8001934 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fe f90a 	bl	8001934 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e173      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x234>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fe f8f7 	bl	8001934 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fe f8f3 	bl	8001934 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e15c      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7f      	ldr	r3, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b7c      	ldr	r3, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fe f8b3 	bl	8001934 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fe f8af 	bl	8001934 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e118      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <HAL_RCC_OscConfig+0x4b0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x31e>
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x340>
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x358>
 8003828:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a59      	ldr	r2, [pc, #356]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a56      	ldr	r2, [pc, #344]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe f874 	bl	8001934 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe f870 	bl	8001934 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x368>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe f85e 	bl	8001934 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe f85a 	bl	8001934 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0c1      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80ad 	beq.w	8003a14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d145      	bne.n	800395a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f82e 	bl	8001934 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe f82a 	bl	8001934 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e093      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fd ffff 	bl	8001934 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fffb 	bl	8001934 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e064      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x452>
 8003958:	e05c      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4b4>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd ffe8 	bl	8001934 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd ffe4 	bl	8001934 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04d      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x480>
 8003986:	e045      	b.n	8003a14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_RCC_OscConfig+0x538>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d129      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d122      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d8:	4293      	cmp	r3, r2
 80039da:	d119      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d10f      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e041      	b.n	8003aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fd98 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4610      	mov	r0, r2
 8003a64:	f000 f9fe 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04e      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d01d      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x80>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d010      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800

08003ba4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <HAL_TIM_Base_Stop_IT+0x48>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	f240 4344 	movw	r3, #1092	; 0x444
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_Base_Stop_IT+0x48>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d122      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d11b      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0202 	mvn.w	r2, #2
 8003c2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f8ee 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003c4a:	e005      	b.n	8003c58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8e0 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8f1 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d122      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d11b      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0204 	mvn.w	r2, #4
 8003c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8c4 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003c9e:	e005      	b.n	8003cac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f8b6 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8c7 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d122      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11b      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0208 	mvn.w	r2, #8
 8003cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f89a 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003cf2:	e005      	b.n	8003d00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f88c 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f89d 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d122      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d11b      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f06f 0210 	mvn.w	r2, #16
 8003d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f870 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003d46:	e005      	b.n	8003d54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f862 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f873 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10e      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0201 	mvn.w	r2, #1
 8003d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fd fab5 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d10e      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f903 	bl	8003fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d10e      	bne.n	8003dde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d107      	bne.n	8003dde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f838 	bl	8003e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d10e      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0220 	mvn.w	r2, #32
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8cd 	bl	8003fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d027      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d023      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <TIM_Base_SetConfig+0x134>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <TIM_Base_SetConfig+0x138>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <TIM_Base_SetConfig+0x13c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800
 8003f98:	40001800 	.word	0x40001800
 8003f9c:	40001c00 	.word	0x40001c00
 8003fa0:	40002000 	.word	0x40002000

08003fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e03f      	b.n	800405e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd faec 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2224      	movs	r2, #36	; 0x24
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fd47 	bl	8004aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d153      	bne.n	800412a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_UART_Transmit_DMA+0x26>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e04c      	b.n	800412c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Transmit_DMA+0x38>
 800409c:	2302      	movs	r3, #2
 800409e:	e045      	b.n	800412c <HAL_UART_Transmit_DMA+0xc4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	; 0x21
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_UART_Transmit_DMA+0xcc>)
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_UART_Transmit_DMA+0xd0>)
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_UART_Transmit_DMA+0xd4>)
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	2200      	movs	r2, #0
 80040e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3304      	adds	r3, #4
 80040fc:	461a      	mov	r2, r3
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	f7fe fa0a 	bl	8002518 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800410c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004124:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	08004561 	.word	0x08004561
 8004138:	080045b3 	.word	0x080045b3
 800413c:	0800469b 	.word	0x0800469b

08004140 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d11d      	bne.n	8004196 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Receive_DMA+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e016      	b.n	8004198 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_DMA+0x38>
 8004174:	2302      	movs	r3, #2
 8004176:	e00f      	b.n	8004198 <HAL_UART_Receive_DMA+0x58>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 facf 	bl	8004730 <UART_Start_Receive_DMA>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fbc3 	bl	8004976 <UART_Receive_IT>
      return;
 80041f0:	e17c      	b.n	80044ec <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80b1 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_UART_IRQHandler+0x70>
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a6 	beq.w	800435c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00f      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_UART_IRQHandler+0xee>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 811f 	beq.w	80044e2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fb5c 	bl	8004976 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_UART_IRQHandler+0x146>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d031      	beq.n	800434a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa9c 	bl	8004824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d123      	bne.n	8004342 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004308:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004316:	4a77      	ldr	r2, [pc, #476]	; (80044f4 <HAL_UART_IRQHandler+0x354>)
 8004318:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe f9c2 	bl	80026a8 <HAL_DMA_Abort_IT>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004334:	4610      	mov	r0, r2
 8004336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00e      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8fa 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e00a      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8f6 	bl	8004534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	e006      	b.n	8004358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8f2 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004356:	e0c4      	b.n	80044e2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	bf00      	nop
    return;
 800435a:	e0c2      	b.n	80044e2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	f040 80a2 	bne.w	80044aa <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 809c 	beq.w	80044aa <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8096 	beq.w	80044aa <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d14f      	bne.n	8004442 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043ac:	8a3b      	ldrh	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8099 	beq.w	80044e6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b8:	8a3a      	ldrh	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	f080 8093 	bcs.w	80044e6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8a3a      	ldrh	r2, [r7, #16]
 80043c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d0:	d02b      	beq.n	800442a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	4618      	mov	r0, r3
 8004426:	f7fe f8cf 	bl	80025c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004432:	b29b      	uxth	r3, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	b29b      	uxth	r3, r3
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f884 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004440:	e051      	b.n	80044e6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444a:	b29b      	uxth	r3, r3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d047      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800445a:	8a7b      	ldrh	r3, [r7, #18]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d044      	beq.n	80044ea <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800446e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0210 	bic.w	r2, r2, #16
 800449c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449e:	8a7b      	ldrh	r3, [r7, #18]
 80044a0:	4619      	mov	r1, r3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f850 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044a8:	e01f      	b.n	80044ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x326>
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9f1 	bl	80048a6 <UART_Transmit_IT>
    return;
 80044c4:	e012      	b.n	80044ec <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <HAL_UART_IRQHandler+0x34c>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa33 	bl	8004946 <UART_EndTransmit_IT>
    return;
 80044e0:	e004      	b.n	80044ec <HAL_UART_IRQHandler+0x34c>
    return;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_UART_IRQHandler+0x34c>
      return;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_UART_IRQHandler+0x34c>
      return;
 80044ea:	bf00      	nop
  }
}
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	0800487f 	.word	0x0800487f

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d113      	bne.n	80045a4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004590:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a2:	e002      	b.n	80045aa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff ffa7 	bl	80044f8 <HAL_UART_TxCpltCallback>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff ffa3 	bl	800450c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d12a      	bne.n	8004640 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045fe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0210 	bic.w	r2, r2, #16
 800463e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d106      	bne.n	8004656 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800464c:	4619      	mov	r1, r3
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff7a 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004654:	e002      	b.n	800465c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7fc fe20 	bl	800129c <HAL_UART_RxCpltCallback>
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	2b01      	cmp	r3, #1
 8004678:	d108      	bne.n	800468c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	4619      	mov	r1, r3
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f7ff ff5f 	bl	8004548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800468a:	e002      	b.n	8004692 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff ff47 	bl	8004520 <HAL_UART_RxHalfCpltCallback>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d108      	bne.n	80046e0 <UART_DMAError+0x46>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f000 f88c 	bl	80047f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	d108      	bne.n	8004714 <UART_DMAError+0x7a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f000 f888 	bl	8004824 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004720:	68b8      	ldr	r0, [r7, #8]
 8004722:	f7ff ff07 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2222      	movs	r2, #34	; 0x22
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	4a23      	ldr	r2, [pc, #140]	; (80047ec <UART_Start_Receive_DMA+0xbc>)
 800475e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <UART_Start_Receive_DMA+0xc0>)
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <UART_Start_Receive_DMA+0xc4>)
 800476e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	2200      	movs	r2, #0
 8004776:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004778:	f107 0308 	add.w	r3, r7, #8
 800477c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	f7fd fec2 	bl	8002518 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	080045cf 	.word	0x080045cf
 80047f0:	08004665 	.word	0x08004665
 80047f4:	0800469b 	.word	0x0800469b

080047f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800480e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800483a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0210 	bic.w	r2, r2, #16
 8004862:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fe4b 	bl	8004534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b21      	cmp	r3, #33	; 0x21
 80048b8:	d13e      	bne.n	8004938 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d114      	bne.n	80048ee <UART_Transmit_IT+0x48>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d110      	bne.n	80048ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]
 80048ec:	e008      	b.n	8004900 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	1c59      	adds	r1, r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6211      	str	r1, [r2, #32]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29b      	uxth	r3, r3
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4619      	mov	r1, r3
 800490e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004922:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004932:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fdc6 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b22      	cmp	r3, #34	; 0x22
 8004988:	f040 8087 	bne.w	8004a9a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d117      	bne.n	80049c6 <UART_Receive_IT+0x50>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d113      	bne.n	80049c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	1c9a      	adds	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
 80049c4:	e026      	b.n	8004a14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d007      	beq.n	80049ea <UART_Receive_IT+0x74>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <UART_Receive_IT+0x82>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e008      	b.n	8004a0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4619      	mov	r1, r3
 8004a22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d136      	bne.n	8004a96 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0220 	bic.w	r2, r2, #32
 8004a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10e      	bne.n	8004a86 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0210 	bic.w	r2, r2, #16
 8004a76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fd62 	bl	8004548 <HAL_UARTEx_RxEventCallback>
 8004a84:	e002      	b.n	8004a8c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fc fc08 	bl	800129c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e002      	b.n	8004a9c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa8:	b09f      	sub	sp, #124	; 0x7c
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aba:	68d9      	ldr	r1, [r3, #12]
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	ea40 0301 	orr.w	r3, r0, r1
 8004ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ae8:	f021 010c 	bic.w	r1, r1, #12
 8004aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004af2:	430b      	orrs	r3, r1
 8004af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	6999      	ldr	r1, [r3, #24]
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	ea40 0301 	orr.w	r3, r0, r1
 8004b0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4bc5      	ldr	r3, [pc, #788]	; (8004e28 <UART_SetConfig+0x384>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d004      	beq.n	8004b22 <UART_SetConfig+0x7e>
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4bc3      	ldr	r3, [pc, #780]	; (8004e2c <UART_SetConfig+0x388>)
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d103      	bne.n	8004b2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b22:	f7fe fb1b 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004b26:	6778      	str	r0, [r7, #116]	; 0x74
 8004b28:	e002      	b.n	8004b30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2a:	f7fe fb03 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8004b2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	f040 80b6 	bne.w	8004ca8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3e:	461c      	mov	r4, r3
 8004b40:	f04f 0500 	mov.w	r5, #0
 8004b44:	4622      	mov	r2, r4
 8004b46:	462b      	mov	r3, r5
 8004b48:	1891      	adds	r1, r2, r2
 8004b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b4c:	415b      	adcs	r3, r3
 8004b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b54:	1912      	adds	r2, r2, r4
 8004b56:	eb45 0303 	adc.w	r3, r5, r3
 8004b5a:	f04f 0000 	mov.w	r0, #0
 8004b5e:	f04f 0100 	mov.w	r1, #0
 8004b62:	00d9      	lsls	r1, r3, #3
 8004b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b68:	00d0      	lsls	r0, r2, #3
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	1911      	adds	r1, r2, r4
 8004b70:	6639      	str	r1, [r7, #96]	; 0x60
 8004b72:	416b      	adcs	r3, r5
 8004b74:	667b      	str	r3, [r7, #100]	; 0x64
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b84:	415b      	adcs	r3, r3
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b90:	f7fc f82a 	bl	8000be8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4ba5      	ldr	r3, [pc, #660]	; (8004e30 <UART_SetConfig+0x38c>)
 8004b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	011e      	lsls	r6, r3, #4
 8004ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	f04f 0500 	mov.w	r5, #0
 8004baa:	4622      	mov	r2, r4
 8004bac:	462b      	mov	r3, r5
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bba:	1912      	adds	r2, r2, r4
 8004bbc:	eb45 0303 	adc.w	r3, r5, r3
 8004bc0:	f04f 0000 	mov.w	r0, #0
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	00d9      	lsls	r1, r3, #3
 8004bca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bce:	00d0      	lsls	r0, r2, #3
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	1911      	adds	r1, r2, r4
 8004bd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bd8:	416b      	adcs	r3, r5
 8004bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	461a      	mov	r2, r3
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	1891      	adds	r1, r2, r2
 8004be8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bea:	415b      	adcs	r3, r3
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bf6:	f7fb fff7 	bl	8000be8 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4b8c      	ldr	r3, [pc, #560]	; (8004e30 <UART_SetConfig+0x38c>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a87      	ldr	r2, [pc, #540]	; (8004e30 <UART_SetConfig+0x38c>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c20:	441e      	add	r6, r3
 8004c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c24:	4618      	mov	r0, r3
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	1894      	adds	r4, r2, r2
 8004c30:	623c      	str	r4, [r7, #32]
 8004c32:	415b      	adcs	r3, r3
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c3a:	1812      	adds	r2, r2, r0
 8004c3c:	eb41 0303 	adc.w	r3, r1, r3
 8004c40:	f04f 0400 	mov.w	r4, #0
 8004c44:	f04f 0500 	mov.w	r5, #0
 8004c48:	00dd      	lsls	r5, r3, #3
 8004c4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c4e:	00d4      	lsls	r4, r2, #3
 8004c50:	4622      	mov	r2, r4
 8004c52:	462b      	mov	r3, r5
 8004c54:	1814      	adds	r4, r2, r0
 8004c56:	653c      	str	r4, [r7, #80]	; 0x50
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	61b9      	str	r1, [r7, #24]
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c76:	f7fb ffb7 	bl	8000be8 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <UART_SetConfig+0x38c>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a67      	ldr	r2, [pc, #412]	; (8004e30 <UART_SetConfig+0x38c>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 0207 	and.w	r2, r3, #7
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4432      	add	r2, r6
 8004ca4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca6:	e0b9      	b.n	8004e1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004caa:	461c      	mov	r4, r3
 8004cac:	f04f 0500 	mov.w	r5, #0
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	6139      	str	r1, [r7, #16]
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cc0:	1912      	adds	r2, r2, r4
 8004cc2:	eb45 0303 	adc.w	r3, r5, r3
 8004cc6:	f04f 0000 	mov.w	r0, #0
 8004cca:	f04f 0100 	mov.w	r1, #0
 8004cce:	00d9      	lsls	r1, r3, #3
 8004cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd4:	00d0      	lsls	r0, r2, #3
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	eb12 0804 	adds.w	r8, r2, r4
 8004cde:	eb43 0905 	adc.w	r9, r3, r5
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	008b      	lsls	r3, r1, #2
 8004cf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cfa:	0082      	lsls	r2, r0, #2
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	4649      	mov	r1, r9
 8004d00:	f7fb ff72 	bl	8000be8 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4b49      	ldr	r3, [pc, #292]	; (8004e30 <UART_SetConfig+0x38c>)
 8004d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	011e      	lsls	r6, r3, #4
 8004d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d14:	4618      	mov	r0, r3
 8004d16:	f04f 0100 	mov.w	r1, #0
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	1894      	adds	r4, r2, r2
 8004d20:	60bc      	str	r4, [r7, #8]
 8004d22:	415b      	adcs	r3, r3
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d2a:	1812      	adds	r2, r2, r0
 8004d2c:	eb41 0303 	adc.w	r3, r1, r3
 8004d30:	f04f 0400 	mov.w	r4, #0
 8004d34:	f04f 0500 	mov.w	r5, #0
 8004d38:	00dd      	lsls	r5, r3, #3
 8004d3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d3e:	00d4      	lsls	r4, r2, #3
 8004d40:	4622      	mov	r2, r4
 8004d42:	462b      	mov	r3, r5
 8004d44:	1814      	adds	r4, r2, r0
 8004d46:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d48:	414b      	adcs	r3, r1
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	008b      	lsls	r3, r1, #2
 8004d60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d64:	0082      	lsls	r2, r0, #2
 8004d66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d6a:	f7fb ff3d 	bl	8000be8 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <UART_SetConfig+0x38c>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	; 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	3332      	adds	r3, #50	; 0x32
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <UART_SetConfig+0x38c>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d92:	441e      	add	r6, r3
 8004d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d96:	4618      	mov	r0, r3
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	1894      	adds	r4, r2, r2
 8004da2:	603c      	str	r4, [r7, #0]
 8004da4:	415b      	adcs	r3, r3
 8004da6:	607b      	str	r3, [r7, #4]
 8004da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dac:	1812      	adds	r2, r2, r0
 8004dae:	eb41 0303 	adc.w	r3, r1, r3
 8004db2:	f04f 0400 	mov.w	r4, #0
 8004db6:	f04f 0500 	mov.w	r5, #0
 8004dba:	00dd      	lsls	r5, r3, #3
 8004dbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dc0:	00d4      	lsls	r4, r2, #3
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	eb12 0a00 	adds.w	sl, r2, r0
 8004dca:	eb43 0b01 	adc.w	fp, r3, r1
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	008b      	lsls	r3, r1, #2
 8004de2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004de6:	0082      	lsls	r2, r0, #2
 8004de8:	4650      	mov	r0, sl
 8004dea:	4659      	mov	r1, fp
 8004dec:	f7fb fefc 	bl	8000be8 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <UART_SetConfig+0x38c>)
 8004df6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2164      	movs	r1, #100	; 0x64
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	3332      	adds	r3, #50	; 0x32
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <UART_SetConfig+0x38c>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4432      	add	r2, r6
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	377c      	adds	r7, #124	; 0x7c
 8004e20:	46bd      	mov	sp, r7
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	bf00      	nop
 8004e28:	40011000 	.word	0x40011000
 8004e2c:	40011400 	.word	0x40011400
 8004e30:	51eb851f 	.word	0x51eb851f

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	; (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	; (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	; (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	; (8004e78 <__libc_init_array+0x44>)
 8004e48:	f002 ff38 	bl	8007cbc <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08008104 	.word	0x08008104
 8004e70:	08008104 	.word	0x08008104
 8004e74:	08008104 	.word	0x08008104
 8004e78:	08008108 	.word	0x08008108

08004e7c <memset>:
 8004e7c:	4402      	add	r2, r0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d100      	bne.n	8004e86 <memset+0xa>
 8004e84:	4770      	bx	lr
 8004e86:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8a:	e7f9      	b.n	8004e80 <memset+0x4>

08004e8c <__cvt>:
 8004e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	ec55 4b10 	vmov	r4, r5, d0
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	460e      	mov	r6, r1
 8004e98:	4619      	mov	r1, r3
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	bfbb      	ittet	lt
 8004e9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ea2:	461d      	movlt	r5, r3
 8004ea4:	2300      	movge	r3, #0
 8004ea6:	232d      	movlt	r3, #45	; 0x2d
 8004ea8:	700b      	strb	r3, [r1, #0]
 8004eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004eb0:	4691      	mov	r9, r2
 8004eb2:	f023 0820 	bic.w	r8, r3, #32
 8004eb6:	bfbc      	itt	lt
 8004eb8:	4622      	movlt	r2, r4
 8004eba:	4614      	movlt	r4, r2
 8004ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ec0:	d005      	beq.n	8004ece <__cvt+0x42>
 8004ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ec6:	d100      	bne.n	8004eca <__cvt+0x3e>
 8004ec8:	3601      	adds	r6, #1
 8004eca:	2102      	movs	r1, #2
 8004ecc:	e000      	b.n	8004ed0 <__cvt+0x44>
 8004ece:	2103      	movs	r1, #3
 8004ed0:	ab03      	add	r3, sp, #12
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	ab02      	add	r3, sp, #8
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	ec45 4b10 	vmov	d0, r4, r5
 8004edc:	4653      	mov	r3, sl
 8004ede:	4632      	mov	r2, r6
 8004ee0:	f000 fd1e 	bl	8005920 <_dtoa_r>
 8004ee4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ee8:	4607      	mov	r7, r0
 8004eea:	d102      	bne.n	8004ef2 <__cvt+0x66>
 8004eec:	f019 0f01 	tst.w	r9, #1
 8004ef0:	d022      	beq.n	8004f38 <__cvt+0xac>
 8004ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ef6:	eb07 0906 	add.w	r9, r7, r6
 8004efa:	d110      	bne.n	8004f1e <__cvt+0x92>
 8004efc:	783b      	ldrb	r3, [r7, #0]
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	d10a      	bne.n	8004f18 <__cvt+0x8c>
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb fdfd 	bl	8000b08 <__aeabi_dcmpeq>
 8004f0e:	b918      	cbnz	r0, 8004f18 <__cvt+0x8c>
 8004f10:	f1c6 0601 	rsb	r6, r6, #1
 8004f14:	f8ca 6000 	str.w	r6, [sl]
 8004f18:	f8da 3000 	ldr.w	r3, [sl]
 8004f1c:	4499      	add	r9, r3
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2300      	movs	r3, #0
 8004f22:	4620      	mov	r0, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	f7fb fdef 	bl	8000b08 <__aeabi_dcmpeq>
 8004f2a:	b108      	cbz	r0, 8004f30 <__cvt+0xa4>
 8004f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f30:	2230      	movs	r2, #48	; 0x30
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	454b      	cmp	r3, r9
 8004f36:	d307      	bcc.n	8004f48 <__cvt+0xbc>
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f3c:	1bdb      	subs	r3, r3, r7
 8004f3e:	4638      	mov	r0, r7
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	b004      	add	sp, #16
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	9103      	str	r1, [sp, #12]
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	e7f0      	b.n	8004f32 <__cvt+0xa6>

08004f50 <__exponent>:
 8004f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f52:	4603      	mov	r3, r0
 8004f54:	2900      	cmp	r1, #0
 8004f56:	bfb8      	it	lt
 8004f58:	4249      	neglt	r1, r1
 8004f5a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f5e:	bfb4      	ite	lt
 8004f60:	222d      	movlt	r2, #45	; 0x2d
 8004f62:	222b      	movge	r2, #43	; 0x2b
 8004f64:	2909      	cmp	r1, #9
 8004f66:	7042      	strb	r2, [r0, #1]
 8004f68:	dd2a      	ble.n	8004fc0 <__exponent+0x70>
 8004f6a:	f10d 0407 	add.w	r4, sp, #7
 8004f6e:	46a4      	mov	ip, r4
 8004f70:	270a      	movs	r7, #10
 8004f72:	46a6      	mov	lr, r4
 8004f74:	460a      	mov	r2, r1
 8004f76:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f7a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f7e:	3530      	adds	r5, #48	; 0x30
 8004f80:	2a63      	cmp	r2, #99	; 0x63
 8004f82:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	dcf1      	bgt.n	8004f72 <__exponent+0x22>
 8004f8e:	3130      	adds	r1, #48	; 0x30
 8004f90:	f1ae 0502 	sub.w	r5, lr, #2
 8004f94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f98:	1c44      	adds	r4, r0, #1
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4561      	cmp	r1, ip
 8004f9e:	d30a      	bcc.n	8004fb6 <__exponent+0x66>
 8004fa0:	f10d 0209 	add.w	r2, sp, #9
 8004fa4:	eba2 020e 	sub.w	r2, r2, lr
 8004fa8:	4565      	cmp	r5, ip
 8004faa:	bf88      	it	hi
 8004fac:	2200      	movhi	r2, #0
 8004fae:	4413      	add	r3, r2
 8004fb0:	1a18      	subs	r0, r3, r0
 8004fb2:	b003      	add	sp, #12
 8004fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fbe:	e7ed      	b.n	8004f9c <__exponent+0x4c>
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	3130      	adds	r1, #48	; 0x30
 8004fc4:	7083      	strb	r3, [r0, #2]
 8004fc6:	70c1      	strb	r1, [r0, #3]
 8004fc8:	1d03      	adds	r3, r0, #4
 8004fca:	e7f1      	b.n	8004fb0 <__exponent+0x60>

08004fcc <_printf_float>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	ed2d 8b02 	vpush	{d8}
 8004fd4:	b08d      	sub	sp, #52	; 0x34
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fdc:	4616      	mov	r6, r2
 8004fde:	461f      	mov	r7, r3
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	f001 fa89 	bl	80064f8 <_localeconv_r>
 8004fe6:	f8d0 a000 	ldr.w	sl, [r0]
 8004fea:	4650      	mov	r0, sl
 8004fec:	f7fb f910 	bl	8000210 <strlen>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	9305      	str	r3, [sp, #20]
 8004ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8004ffc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005000:	3307      	adds	r3, #7
 8005002:	f023 0307 	bic.w	r3, r3, #7
 8005006:	f103 0208 	add.w	r2, r3, #8
 800500a:	f8c8 2000 	str.w	r2, [r8]
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005016:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800501a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800501e:	9307      	str	r3, [sp, #28]
 8005020:	f8cd 8018 	str.w	r8, [sp, #24]
 8005024:	ee08 0a10 	vmov	s16, r0
 8005028:	4b9f      	ldr	r3, [pc, #636]	; (80052a8 <_printf_float+0x2dc>)
 800502a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
 8005032:	f7fb fd9b 	bl	8000b6c <__aeabi_dcmpun>
 8005036:	bb88      	cbnz	r0, 800509c <_printf_float+0xd0>
 8005038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800503c:	4b9a      	ldr	r3, [pc, #616]	; (80052a8 <_printf_float+0x2dc>)
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	f7fb fd75 	bl	8000b30 <__aeabi_dcmple>
 8005046:	bb48      	cbnz	r0, 800509c <_printf_float+0xd0>
 8005048:	2200      	movs	r2, #0
 800504a:	2300      	movs	r3, #0
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	f7fb fd64 	bl	8000b1c <__aeabi_dcmplt>
 8005054:	b110      	cbz	r0, 800505c <_printf_float+0x90>
 8005056:	232d      	movs	r3, #45	; 0x2d
 8005058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505c:	4b93      	ldr	r3, [pc, #588]	; (80052ac <_printf_float+0x2e0>)
 800505e:	4894      	ldr	r0, [pc, #592]	; (80052b0 <_printf_float+0x2e4>)
 8005060:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005064:	bf94      	ite	ls
 8005066:	4698      	movls	r8, r3
 8005068:	4680      	movhi	r8, r0
 800506a:	2303      	movs	r3, #3
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	9b05      	ldr	r3, [sp, #20]
 8005070:	f023 0204 	bic.w	r2, r3, #4
 8005074:	6022      	str	r2, [r4, #0]
 8005076:	f04f 0900 	mov.w	r9, #0
 800507a:	9700      	str	r7, [sp, #0]
 800507c:	4633      	mov	r3, r6
 800507e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005080:	4621      	mov	r1, r4
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f9d8 	bl	8005438 <_printf_common>
 8005088:	3001      	adds	r0, #1
 800508a:	f040 8090 	bne.w	80051ae <_printf_float+0x1e2>
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	b00d      	add	sp, #52	; 0x34
 8005094:	ecbd 8b02 	vpop	{d8}
 8005098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	4640      	mov	r0, r8
 80050a2:	4649      	mov	r1, r9
 80050a4:	f7fb fd62 	bl	8000b6c <__aeabi_dcmpun>
 80050a8:	b140      	cbz	r0, 80050bc <_printf_float+0xf0>
 80050aa:	464b      	mov	r3, r9
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bfbc      	itt	lt
 80050b0:	232d      	movlt	r3, #45	; 0x2d
 80050b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050b6:	487f      	ldr	r0, [pc, #508]	; (80052b4 <_printf_float+0x2e8>)
 80050b8:	4b7f      	ldr	r3, [pc, #508]	; (80052b8 <_printf_float+0x2ec>)
 80050ba:	e7d1      	b.n	8005060 <_printf_float+0x94>
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050c2:	9206      	str	r2, [sp, #24]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	d13f      	bne.n	8005148 <_printf_float+0x17c>
 80050c8:	2306      	movs	r3, #6
 80050ca:	6063      	str	r3, [r4, #4]
 80050cc:	9b05      	ldr	r3, [sp, #20]
 80050ce:	6861      	ldr	r1, [r4, #4]
 80050d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050d4:	2300      	movs	r3, #0
 80050d6:	9303      	str	r3, [sp, #12]
 80050d8:	ab0a      	add	r3, sp, #40	; 0x28
 80050da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050de:	ab09      	add	r3, sp, #36	; 0x24
 80050e0:	ec49 8b10 	vmov	d0, r8, r9
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050ec:	4628      	mov	r0, r5
 80050ee:	f7ff fecd 	bl	8004e8c <__cvt>
 80050f2:	9b06      	ldr	r3, [sp, #24]
 80050f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f6:	2b47      	cmp	r3, #71	; 0x47
 80050f8:	4680      	mov	r8, r0
 80050fa:	d108      	bne.n	800510e <_printf_float+0x142>
 80050fc:	1cc8      	adds	r0, r1, #3
 80050fe:	db02      	blt.n	8005106 <_printf_float+0x13a>
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	4299      	cmp	r1, r3
 8005104:	dd41      	ble.n	800518a <_printf_float+0x1be>
 8005106:	f1ab 0b02 	sub.w	fp, fp, #2
 800510a:	fa5f fb8b 	uxtb.w	fp, fp
 800510e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005112:	d820      	bhi.n	8005156 <_printf_float+0x18a>
 8005114:	3901      	subs	r1, #1
 8005116:	465a      	mov	r2, fp
 8005118:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800511c:	9109      	str	r1, [sp, #36]	; 0x24
 800511e:	f7ff ff17 	bl	8004f50 <__exponent>
 8005122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005124:	1813      	adds	r3, r2, r0
 8005126:	2a01      	cmp	r2, #1
 8005128:	4681      	mov	r9, r0
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	dc02      	bgt.n	8005134 <_printf_float+0x168>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d2      	lsls	r2, r2, #31
 8005132:	d501      	bpl.n	8005138 <_printf_float+0x16c>
 8005134:	3301      	adds	r3, #1
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800513c:	2b00      	cmp	r3, #0
 800513e:	d09c      	beq.n	800507a <_printf_float+0xae>
 8005140:	232d      	movs	r3, #45	; 0x2d
 8005142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005146:	e798      	b.n	800507a <_printf_float+0xae>
 8005148:	9a06      	ldr	r2, [sp, #24]
 800514a:	2a47      	cmp	r2, #71	; 0x47
 800514c:	d1be      	bne.n	80050cc <_printf_float+0x100>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1bc      	bne.n	80050cc <_printf_float+0x100>
 8005152:	2301      	movs	r3, #1
 8005154:	e7b9      	b.n	80050ca <_printf_float+0xfe>
 8005156:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800515a:	d118      	bne.n	800518e <_printf_float+0x1c2>
 800515c:	2900      	cmp	r1, #0
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	dd0b      	ble.n	800517a <_printf_float+0x1ae>
 8005162:	6121      	str	r1, [r4, #16]
 8005164:	b913      	cbnz	r3, 800516c <_printf_float+0x1a0>
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	07d0      	lsls	r0, r2, #31
 800516a:	d502      	bpl.n	8005172 <_printf_float+0x1a6>
 800516c:	3301      	adds	r3, #1
 800516e:	440b      	add	r3, r1
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	65a1      	str	r1, [r4, #88]	; 0x58
 8005174:	f04f 0900 	mov.w	r9, #0
 8005178:	e7de      	b.n	8005138 <_printf_float+0x16c>
 800517a:	b913      	cbnz	r3, 8005182 <_printf_float+0x1b6>
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	07d2      	lsls	r2, r2, #31
 8005180:	d501      	bpl.n	8005186 <_printf_float+0x1ba>
 8005182:	3302      	adds	r3, #2
 8005184:	e7f4      	b.n	8005170 <_printf_float+0x1a4>
 8005186:	2301      	movs	r3, #1
 8005188:	e7f2      	b.n	8005170 <_printf_float+0x1a4>
 800518a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005190:	4299      	cmp	r1, r3
 8005192:	db05      	blt.n	80051a0 <_printf_float+0x1d4>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	6121      	str	r1, [r4, #16]
 8005198:	07d8      	lsls	r0, r3, #31
 800519a:	d5ea      	bpl.n	8005172 <_printf_float+0x1a6>
 800519c:	1c4b      	adds	r3, r1, #1
 800519e:	e7e7      	b.n	8005170 <_printf_float+0x1a4>
 80051a0:	2900      	cmp	r1, #0
 80051a2:	bfd4      	ite	le
 80051a4:	f1c1 0202 	rsble	r2, r1, #2
 80051a8:	2201      	movgt	r2, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	e7e0      	b.n	8005170 <_printf_float+0x1a4>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	055a      	lsls	r2, r3, #21
 80051b2:	d407      	bmi.n	80051c4 <_printf_float+0x1f8>
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	4642      	mov	r2, r8
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	d12c      	bne.n	800521c <_printf_float+0x250>
 80051c2:	e764      	b.n	800508e <_printf_float+0xc2>
 80051c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051c8:	f240 80e0 	bls.w	800538c <_printf_float+0x3c0>
 80051cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051d0:	2200      	movs	r2, #0
 80051d2:	2300      	movs	r3, #0
 80051d4:	f7fb fc98 	bl	8000b08 <__aeabi_dcmpeq>
 80051d8:	2800      	cmp	r0, #0
 80051da:	d034      	beq.n	8005246 <_printf_float+0x27a>
 80051dc:	4a37      	ldr	r2, [pc, #220]	; (80052bc <_printf_float+0x2f0>)
 80051de:	2301      	movs	r3, #1
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f af51 	beq.w	800508e <_printf_float+0xc2>
 80051ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051f0:	429a      	cmp	r2, r3
 80051f2:	db02      	blt.n	80051fa <_printf_float+0x22e>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	07d8      	lsls	r0, r3, #31
 80051f8:	d510      	bpl.n	800521c <_printf_float+0x250>
 80051fa:	ee18 3a10 	vmov	r3, s16
 80051fe:	4652      	mov	r2, sl
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af41 	beq.w	800508e <_printf_float+0xc2>
 800520c:	f04f 0800 	mov.w	r8, #0
 8005210:	f104 091a 	add.w	r9, r4, #26
 8005214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	4543      	cmp	r3, r8
 800521a:	dc09      	bgt.n	8005230 <_printf_float+0x264>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	079b      	lsls	r3, r3, #30
 8005220:	f100 8105 	bmi.w	800542e <_printf_float+0x462>
 8005224:	68e0      	ldr	r0, [r4, #12]
 8005226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005228:	4298      	cmp	r0, r3
 800522a:	bfb8      	it	lt
 800522c:	4618      	movlt	r0, r3
 800522e:	e730      	b.n	8005092 <_printf_float+0xc6>
 8005230:	2301      	movs	r3, #1
 8005232:	464a      	mov	r2, r9
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	47b8      	blx	r7
 800523a:	3001      	adds	r0, #1
 800523c:	f43f af27 	beq.w	800508e <_printf_float+0xc2>
 8005240:	f108 0801 	add.w	r8, r8, #1
 8005244:	e7e6      	b.n	8005214 <_printf_float+0x248>
 8005246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	dc39      	bgt.n	80052c0 <_printf_float+0x2f4>
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <_printf_float+0x2f0>)
 800524e:	2301      	movs	r3, #1
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f af19 	beq.w	800508e <_printf_float+0xc2>
 800525c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005260:	4313      	orrs	r3, r2
 8005262:	d102      	bne.n	800526a <_printf_float+0x29e>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07d9      	lsls	r1, r3, #31
 8005268:	d5d8      	bpl.n	800521c <_printf_float+0x250>
 800526a:	ee18 3a10 	vmov	r3, s16
 800526e:	4652      	mov	r2, sl
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af09 	beq.w	800508e <_printf_float+0xc2>
 800527c:	f04f 0900 	mov.w	r9, #0
 8005280:	f104 0a1a 	add.w	sl, r4, #26
 8005284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005286:	425b      	negs	r3, r3
 8005288:	454b      	cmp	r3, r9
 800528a:	dc01      	bgt.n	8005290 <_printf_float+0x2c4>
 800528c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528e:	e792      	b.n	80051b6 <_printf_float+0x1ea>
 8005290:	2301      	movs	r3, #1
 8005292:	4652      	mov	r2, sl
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	f43f aef7 	beq.w	800508e <_printf_float+0xc2>
 80052a0:	f109 0901 	add.w	r9, r9, #1
 80052a4:	e7ee      	b.n	8005284 <_printf_float+0x2b8>
 80052a6:	bf00      	nop
 80052a8:	7fefffff 	.word	0x7fefffff
 80052ac:	08007d20 	.word	0x08007d20
 80052b0:	08007d24 	.word	0x08007d24
 80052b4:	08007d2c 	.word	0x08007d2c
 80052b8:	08007d28 	.word	0x08007d28
 80052bc:	08007d30 	.word	0x08007d30
 80052c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bfa8      	it	ge
 80052c8:	461a      	movge	r2, r3
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	4691      	mov	r9, r2
 80052ce:	dc37      	bgt.n	8005340 <_printf_float+0x374>
 80052d0:	f04f 0b00 	mov.w	fp, #0
 80052d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052d8:	f104 021a 	add.w	r2, r4, #26
 80052dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	eba3 0309 	sub.w	r3, r3, r9
 80052e4:	455b      	cmp	r3, fp
 80052e6:	dc33      	bgt.n	8005350 <_printf_float+0x384>
 80052e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ec:	429a      	cmp	r2, r3
 80052ee:	db3b      	blt.n	8005368 <_printf_float+0x39c>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	07da      	lsls	r2, r3, #31
 80052f4:	d438      	bmi.n	8005368 <_printf_float+0x39c>
 80052f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	eba2 0901 	sub.w	r9, r2, r1
 8005302:	4599      	cmp	r9, r3
 8005304:	bfa8      	it	ge
 8005306:	4699      	movge	r9, r3
 8005308:	f1b9 0f00 	cmp.w	r9, #0
 800530c:	dc35      	bgt.n	800537a <_printf_float+0x3ae>
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005316:	f104 0a1a 	add.w	sl, r4, #26
 800531a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	eba3 0309 	sub.w	r3, r3, r9
 8005324:	4543      	cmp	r3, r8
 8005326:	f77f af79 	ble.w	800521c <_printf_float+0x250>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	f43f aeaa 	beq.w	800508e <_printf_float+0xc2>
 800533a:	f108 0801 	add.w	r8, r8, #1
 800533e:	e7ec      	b.n	800531a <_printf_float+0x34e>
 8005340:	4613      	mov	r3, r2
 8005342:	4631      	mov	r1, r6
 8005344:	4642      	mov	r2, r8
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	d1c0      	bne.n	80052d0 <_printf_float+0x304>
 800534e:	e69e      	b.n	800508e <_printf_float+0xc2>
 8005350:	2301      	movs	r3, #1
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	9205      	str	r2, [sp, #20]
 8005358:	47b8      	blx	r7
 800535a:	3001      	adds	r0, #1
 800535c:	f43f ae97 	beq.w	800508e <_printf_float+0xc2>
 8005360:	9a05      	ldr	r2, [sp, #20]
 8005362:	f10b 0b01 	add.w	fp, fp, #1
 8005366:	e7b9      	b.n	80052dc <_printf_float+0x310>
 8005368:	ee18 3a10 	vmov	r3, s16
 800536c:	4652      	mov	r2, sl
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	d1be      	bne.n	80052f6 <_printf_float+0x32a>
 8005378:	e689      	b.n	800508e <_printf_float+0xc2>
 800537a:	9a05      	ldr	r2, [sp, #20]
 800537c:	464b      	mov	r3, r9
 800537e:	4442      	add	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	d1c1      	bne.n	800530e <_printf_float+0x342>
 800538a:	e680      	b.n	800508e <_printf_float+0xc2>
 800538c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800538e:	2a01      	cmp	r2, #1
 8005390:	dc01      	bgt.n	8005396 <_printf_float+0x3ca>
 8005392:	07db      	lsls	r3, r3, #31
 8005394:	d538      	bpl.n	8005408 <_printf_float+0x43c>
 8005396:	2301      	movs	r3, #1
 8005398:	4642      	mov	r2, r8
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f ae74 	beq.w	800508e <_printf_float+0xc2>
 80053a6:	ee18 3a10 	vmov	r3, s16
 80053aa:	4652      	mov	r2, sl
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f ae6b 	beq.w	800508e <_printf_float+0xc2>
 80053b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	f7fb fba2 	bl	8000b08 <__aeabi_dcmpeq>
 80053c4:	b9d8      	cbnz	r0, 80053fe <_printf_float+0x432>
 80053c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c8:	f108 0201 	add.w	r2, r8, #1
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	d10e      	bne.n	80053f6 <_printf_float+0x42a>
 80053d8:	e659      	b.n	800508e <_printf_float+0xc2>
 80053da:	2301      	movs	r3, #1
 80053dc:	4652      	mov	r2, sl
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f ae52 	beq.w	800508e <_printf_float+0xc2>
 80053ea:	f108 0801 	add.w	r8, r8, #1
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	4543      	cmp	r3, r8
 80053f4:	dcf1      	bgt.n	80053da <_printf_float+0x40e>
 80053f6:	464b      	mov	r3, r9
 80053f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053fc:	e6dc      	b.n	80051b8 <_printf_float+0x1ec>
 80053fe:	f04f 0800 	mov.w	r8, #0
 8005402:	f104 0a1a 	add.w	sl, r4, #26
 8005406:	e7f2      	b.n	80053ee <_printf_float+0x422>
 8005408:	2301      	movs	r3, #1
 800540a:	4642      	mov	r2, r8
 800540c:	e7df      	b.n	80053ce <_printf_float+0x402>
 800540e:	2301      	movs	r3, #1
 8005410:	464a      	mov	r2, r9
 8005412:	4631      	mov	r1, r6
 8005414:	4628      	mov	r0, r5
 8005416:	47b8      	blx	r7
 8005418:	3001      	adds	r0, #1
 800541a:	f43f ae38 	beq.w	800508e <_printf_float+0xc2>
 800541e:	f108 0801 	add.w	r8, r8, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	4543      	cmp	r3, r8
 800542a:	dcf0      	bgt.n	800540e <_printf_float+0x442>
 800542c:	e6fa      	b.n	8005224 <_printf_float+0x258>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	f104 0919 	add.w	r9, r4, #25
 8005436:	e7f4      	b.n	8005422 <_printf_float+0x456>

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4699      	mov	r9, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	6033      	str	r3, [r6, #0]
 8005450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc26      	bgt.n	80054ce <_printf_common+0x96>
 8005480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005484:	1e13      	subs	r3, r2, #0
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d42b      	bmi.n	80054e8 <_printf_common+0xb0>
 8005490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005494:	4649      	mov	r1, r9
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	3001      	adds	r0, #1
 800549c:	d01e      	beq.n	80054dc <_printf_common+0xa4>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	68e5      	ldr	r5, [r4, #12]
 80054a2:	6832      	ldr	r2, [r6, #0]
 80054a4:	f003 0306 	and.w	r3, r3, #6
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	bf08      	it	eq
 80054ac:	1aad      	subeq	r5, r5, r2
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	2600      	movs	r6, #0
 80054c4:	341a      	adds	r4, #26
 80054c6:	42b5      	cmp	r5, r6
 80054c8:	d11a      	bne.n	8005500 <_printf_common+0xc8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e008      	b.n	80054e0 <_printf_common+0xa8>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4649      	mov	r1, r9
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c0      	blx	r8
 80054d8:	3001      	adds	r0, #1
 80054da:	d103      	bne.n	80054e4 <_printf_common+0xac>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7c6      	b.n	8005476 <_printf_common+0x3e>
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	2030      	movs	r0, #48	; 0x30
 80054ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f2:	4422      	add	r2, r4
 80054f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054fc:	3302      	adds	r3, #2
 80054fe:	e7c7      	b.n	8005490 <_printf_common+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	4622      	mov	r2, r4
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d0e6      	beq.n	80054dc <_printf_common+0xa4>
 800550e:	3601      	adds	r6, #1
 8005510:	e7d9      	b.n	80054c6 <_printf_common+0x8e>
	...

08005514 <_printf_i>:
 8005514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	460c      	mov	r4, r1
 800551a:	4691      	mov	r9, r2
 800551c:	7e27      	ldrb	r7, [r4, #24]
 800551e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005520:	2f78      	cmp	r7, #120	; 0x78
 8005522:	4680      	mov	r8, r0
 8005524:	469a      	mov	sl, r3
 8005526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800552a:	d807      	bhi.n	800553c <_printf_i+0x28>
 800552c:	2f62      	cmp	r7, #98	; 0x62
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x32>
 8005530:	2f00      	cmp	r7, #0
 8005532:	f000 80d8 	beq.w	80056e6 <_printf_i+0x1d2>
 8005536:	2f58      	cmp	r7, #88	; 0x58
 8005538:	f000 80a3 	beq.w	8005682 <_printf_i+0x16e>
 800553c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005544:	e03a      	b.n	80055bc <_printf_i+0xa8>
 8005546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554a:	2b15      	cmp	r3, #21
 800554c:	d8f6      	bhi.n	800553c <_printf_i+0x28>
 800554e:	a001      	add	r0, pc, #4	; (adr r0, 8005554 <_printf_i+0x40>)
 8005550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055c1 	.word	0x080055c1
 800555c:	0800553d 	.word	0x0800553d
 8005560:	0800553d 	.word	0x0800553d
 8005564:	0800553d 	.word	0x0800553d
 8005568:	0800553d 	.word	0x0800553d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800553d 	.word	0x0800553d
 8005574:	0800553d 	.word	0x0800553d
 8005578:	0800553d 	.word	0x0800553d
 800557c:	0800553d 	.word	0x0800553d
 8005580:	080056cd 	.word	0x080056cd
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080056af 	.word	0x080056af
 800558c:	0800553d 	.word	0x0800553d
 8005590:	0800553d 	.word	0x0800553d
 8005594:	080056ef 	.word	0x080056ef
 8005598:	0800553d 	.word	0x0800553d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800553d 	.word	0x0800553d
 80055a4:	0800553d 	.word	0x0800553d
 80055a8:	080056b7 	.word	0x080056b7
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	600a      	str	r2, [r1, #0]
 80055b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a3      	b.n	8005708 <_printf_i+0x1f4>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	6808      	ldr	r0, [r1, #0]
 80055c4:	062e      	lsls	r6, r5, #24
 80055c6:	f100 0304 	add.w	r3, r0, #4
 80055ca:	d50a      	bpl.n	80055e2 <_printf_i+0xce>
 80055cc:	6805      	ldr	r5, [r0, #0]
 80055ce:	600b      	str	r3, [r1, #0]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	da03      	bge.n	80055dc <_printf_i+0xc8>
 80055d4:	232d      	movs	r3, #45	; 0x2d
 80055d6:	426d      	negs	r5, r5
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	485e      	ldr	r0, [pc, #376]	; (8005758 <_printf_i+0x244>)
 80055de:	230a      	movs	r3, #10
 80055e0:	e019      	b.n	8005616 <_printf_i+0x102>
 80055e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055e6:	6805      	ldr	r5, [r0, #0]
 80055e8:	600b      	str	r3, [r1, #0]
 80055ea:	bf18      	it	ne
 80055ec:	b22d      	sxthne	r5, r5
 80055ee:	e7ef      	b.n	80055d0 <_printf_i+0xbc>
 80055f0:	680b      	ldr	r3, [r1, #0]
 80055f2:	6825      	ldr	r5, [r4, #0]
 80055f4:	1d18      	adds	r0, r3, #4
 80055f6:	6008      	str	r0, [r1, #0]
 80055f8:	0628      	lsls	r0, r5, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0xec>
 80055fc:	681d      	ldr	r5, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0xf2>
 8005600:	0669      	lsls	r1, r5, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0xe8>
 8005604:	881d      	ldrh	r5, [r3, #0]
 8005606:	4854      	ldr	r0, [pc, #336]	; (8005758 <_printf_i+0x244>)
 8005608:	2f6f      	cmp	r7, #111	; 0x6f
 800560a:	bf0c      	ite	eq
 800560c:	2308      	moveq	r3, #8
 800560e:	230a      	movne	r3, #10
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005616:	6866      	ldr	r6, [r4, #4]
 8005618:	60a6      	str	r6, [r4, #8]
 800561a:	2e00      	cmp	r6, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90d      	cbnz	r5, 800562c <_printf_i+0x118>
 8005628:	2e00      	cmp	r6, #0
 800562a:	d04d      	beq.n	80056c8 <_printf_i+0x1b4>
 800562c:	4616      	mov	r6, r2
 800562e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005632:	fb03 5711 	mls	r7, r3, r1, r5
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800563c:	462f      	mov	r7, r5
 800563e:	42bb      	cmp	r3, r7
 8005640:	460d      	mov	r5, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x11a>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x14c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07df      	lsls	r7, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x14c>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	; 0x30
 8005658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800565c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005660:	1b92      	subs	r2, r2, r6
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee2 	bl	8005438 <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14c      	bne.n	8005712 <_printf_i+0x1fe>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	4835      	ldr	r0, [pc, #212]	; (8005758 <_printf_i+0x244>)
 8005684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	680e      	ldr	r6, [r1, #0]
 800568c:	061f      	lsls	r7, r3, #24
 800568e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005692:	600e      	str	r6, [r1, #0]
 8005694:	d514      	bpl.n	80056c0 <_printf_i+0x1ac>
 8005696:	07d9      	lsls	r1, r3, #31
 8005698:	bf44      	itt	mi
 800569a:	f043 0320 	orrmi.w	r3, r3, #32
 800569e:	6023      	strmi	r3, [r4, #0]
 80056a0:	b91d      	cbnz	r5, 80056aa <_printf_i+0x196>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f023 0320 	bic.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2310      	movs	r3, #16
 80056ac:	e7b0      	b.n	8005610 <_printf_i+0xfc>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f043 0320 	orr.w	r3, r3, #32
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	2378      	movs	r3, #120	; 0x78
 80056b8:	4828      	ldr	r0, [pc, #160]	; (800575c <_printf_i+0x248>)
 80056ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056be:	e7e3      	b.n	8005688 <_printf_i+0x174>
 80056c0:	065e      	lsls	r6, r3, #25
 80056c2:	bf48      	it	mi
 80056c4:	b2ad      	uxthmi	r5, r5
 80056c6:	e7e6      	b.n	8005696 <_printf_i+0x182>
 80056c8:	4616      	mov	r6, r2
 80056ca:	e7bb      	b.n	8005644 <_printf_i+0x130>
 80056cc:	680b      	ldr	r3, [r1, #0]
 80056ce:	6826      	ldr	r6, [r4, #0]
 80056d0:	6960      	ldr	r0, [r4, #20]
 80056d2:	1d1d      	adds	r5, r3, #4
 80056d4:	600d      	str	r5, [r1, #0]
 80056d6:	0635      	lsls	r5, r6, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1cc>
 80056dc:	6018      	str	r0, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1d2>
 80056e0:	0671      	lsls	r1, r6, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1c8>
 80056e4:	8018      	strh	r0, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4616      	mov	r6, r2
 80056ec:	e7ba      	b.n	8005664 <_printf_i+0x150>
 80056ee:	680b      	ldr	r3, [r1, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	600a      	str	r2, [r1, #0]
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa fd90 	bl	8000220 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1f2>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005710:	e7a8      	b.n	8005664 <_printf_i+0x150>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ab      	beq.n	8005678 <_printf_i+0x164>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x23a>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a4      	b.n	800567c <_printf_i+0x168>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09b      	beq.n	8005678 <_printf_i+0x164>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x21e>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x212>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x22e>
 8005756:	bf00      	nop
 8005758:	08007d32 	.word	0x08007d32
 800575c:	08007d43 	.word	0x08007d43

08005760 <sniprintf>:
 8005760:	b40c      	push	{r2, r3}
 8005762:	b530      	push	{r4, r5, lr}
 8005764:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <sniprintf+0x64>)
 8005766:	1e0c      	subs	r4, r1, #0
 8005768:	681d      	ldr	r5, [r3, #0]
 800576a:	b09d      	sub	sp, #116	; 0x74
 800576c:	da08      	bge.n	8005780 <sniprintf+0x20>
 800576e:	238b      	movs	r3, #139	; 0x8b
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	b01d      	add	sp, #116	; 0x74
 8005778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800577c:	b002      	add	sp, #8
 800577e:	4770      	bx	lr
 8005780:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005784:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005788:	bf14      	ite	ne
 800578a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800578e:	4623      	moveq	r3, r4
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	9307      	str	r3, [sp, #28]
 8005794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9006      	str	r0, [sp, #24]
 800579c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057a2:	ab21      	add	r3, sp, #132	; 0x84
 80057a4:	a902      	add	r1, sp, #8
 80057a6:	4628      	mov	r0, r5
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	f001 fb53 	bl	8006e54 <_svfiprintf_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	bfbc      	itt	lt
 80057b2:	238b      	movlt	r3, #139	; 0x8b
 80057b4:	602b      	strlt	r3, [r5, #0]
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	d0dd      	beq.n	8005776 <sniprintf+0x16>
 80057ba:	9b02      	ldr	r3, [sp, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e7d9      	b.n	8005776 <sniprintf+0x16>
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c

080057c8 <siprintf>:
 80057c8:	b40e      	push	{r1, r2, r3}
 80057ca:	b500      	push	{lr}
 80057cc:	b09c      	sub	sp, #112	; 0x70
 80057ce:	ab1d      	add	r3, sp, #116	; 0x74
 80057d0:	9002      	str	r0, [sp, #8]
 80057d2:	9006      	str	r0, [sp, #24]
 80057d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057d8:	4809      	ldr	r0, [pc, #36]	; (8005800 <siprintf+0x38>)
 80057da:	9107      	str	r1, [sp, #28]
 80057dc:	9104      	str	r1, [sp, #16]
 80057de:	4909      	ldr	r1, [pc, #36]	; (8005804 <siprintf+0x3c>)
 80057e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e4:	9105      	str	r1, [sp, #20]
 80057e6:	6800      	ldr	r0, [r0, #0]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	a902      	add	r1, sp, #8
 80057ec:	f001 fb32 	bl	8006e54 <_svfiprintf_r>
 80057f0:	9b02      	ldr	r3, [sp, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	b01c      	add	sp, #112	; 0x70
 80057f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057fc:	b003      	add	sp, #12
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c
 8005804:	ffff0208 	.word	0xffff0208

08005808 <quorem>:
 8005808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580c:	6903      	ldr	r3, [r0, #16]
 800580e:	690c      	ldr	r4, [r1, #16]
 8005810:	42a3      	cmp	r3, r4
 8005812:	4607      	mov	r7, r0
 8005814:	f2c0 8081 	blt.w	800591a <quorem+0x112>
 8005818:	3c01      	subs	r4, #1
 800581a:	f101 0814 	add.w	r8, r1, #20
 800581e:	f100 0514 	add.w	r5, r0, #20
 8005822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800582c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005830:	3301      	adds	r3, #1
 8005832:	429a      	cmp	r2, r3
 8005834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800583c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005840:	d331      	bcc.n	80058a6 <quorem+0x9e>
 8005842:	f04f 0e00 	mov.w	lr, #0
 8005846:	4640      	mov	r0, r8
 8005848:	46ac      	mov	ip, r5
 800584a:	46f2      	mov	sl, lr
 800584c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005850:	b293      	uxth	r3, r2
 8005852:	fb06 e303 	mla	r3, r6, r3, lr
 8005856:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800585a:	b29b      	uxth	r3, r3
 800585c:	ebaa 0303 	sub.w	r3, sl, r3
 8005860:	0c12      	lsrs	r2, r2, #16
 8005862:	f8dc a000 	ldr.w	sl, [ip]
 8005866:	fb06 e202 	mla	r2, r6, r2, lr
 800586a:	fa13 f38a 	uxtah	r3, r3, sl
 800586e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005872:	fa1f fa82 	uxth.w	sl, r2
 8005876:	f8dc 2000 	ldr.w	r2, [ip]
 800587a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800587e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005888:	4581      	cmp	r9, r0
 800588a:	f84c 3b04 	str.w	r3, [ip], #4
 800588e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005892:	d2db      	bcs.n	800584c <quorem+0x44>
 8005894:	f855 300b 	ldr.w	r3, [r5, fp]
 8005898:	b92b      	cbnz	r3, 80058a6 <quorem+0x9e>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	3b04      	subs	r3, #4
 800589e:	429d      	cmp	r5, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	d32e      	bcc.n	8005902 <quorem+0xfa>
 80058a4:	613c      	str	r4, [r7, #16]
 80058a6:	4638      	mov	r0, r7
 80058a8:	f001 f8be 	bl	8006a28 <__mcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	db24      	blt.n	80058fa <quorem+0xf2>
 80058b0:	3601      	adds	r6, #1
 80058b2:	4628      	mov	r0, r5
 80058b4:	f04f 0c00 	mov.w	ip, #0
 80058b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80058bc:	f8d0 e000 	ldr.w	lr, [r0]
 80058c0:	b293      	uxth	r3, r2
 80058c2:	ebac 0303 	sub.w	r3, ip, r3
 80058c6:	0c12      	lsrs	r2, r2, #16
 80058c8:	fa13 f38e 	uxtah	r3, r3, lr
 80058cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058da:	45c1      	cmp	r9, r8
 80058dc:	f840 3b04 	str.w	r3, [r0], #4
 80058e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e4:	d2e8      	bcs.n	80058b8 <quorem+0xb0>
 80058e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ee:	b922      	cbnz	r2, 80058fa <quorem+0xf2>
 80058f0:	3b04      	subs	r3, #4
 80058f2:	429d      	cmp	r5, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	d30a      	bcc.n	800590e <quorem+0x106>
 80058f8:	613c      	str	r4, [r7, #16]
 80058fa:	4630      	mov	r0, r6
 80058fc:	b003      	add	sp, #12
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	3b04      	subs	r3, #4
 8005906:	2a00      	cmp	r2, #0
 8005908:	d1cc      	bne.n	80058a4 <quorem+0x9c>
 800590a:	3c01      	subs	r4, #1
 800590c:	e7c7      	b.n	800589e <quorem+0x96>
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1f0      	bne.n	80058f8 <quorem+0xf0>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7eb      	b.n	80058f2 <quorem+0xea>
 800591a:	2000      	movs	r0, #0
 800591c:	e7ee      	b.n	80058fc <quorem+0xf4>
	...

08005920 <_dtoa_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	ed2d 8b02 	vpush	{d8}
 8005928:	ec57 6b10 	vmov	r6, r7, d0
 800592c:	b095      	sub	sp, #84	; 0x54
 800592e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005934:	9105      	str	r1, [sp, #20]
 8005936:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800593a:	4604      	mov	r4, r0
 800593c:	9209      	str	r2, [sp, #36]	; 0x24
 800593e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005940:	b975      	cbnz	r5, 8005960 <_dtoa_r+0x40>
 8005942:	2010      	movs	r0, #16
 8005944:	f000 fddc 	bl	8006500 <malloc>
 8005948:	4602      	mov	r2, r0
 800594a:	6260      	str	r0, [r4, #36]	; 0x24
 800594c:	b920      	cbnz	r0, 8005958 <_dtoa_r+0x38>
 800594e:	4bb2      	ldr	r3, [pc, #712]	; (8005c18 <_dtoa_r+0x2f8>)
 8005950:	21ea      	movs	r1, #234	; 0xea
 8005952:	48b2      	ldr	r0, [pc, #712]	; (8005c1c <_dtoa_r+0x2fc>)
 8005954:	f001 fb8e 	bl	8007074 <__assert_func>
 8005958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800595c:	6005      	str	r5, [r0, #0]
 800595e:	60c5      	str	r5, [r0, #12]
 8005960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	b151      	cbz	r1, 800597c <_dtoa_r+0x5c>
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	604a      	str	r2, [r1, #4]
 800596a:	2301      	movs	r3, #1
 800596c:	4093      	lsls	r3, r2
 800596e:	608b      	str	r3, [r1, #8]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fe1b 	bl	80065ac <_Bfree>
 8005976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	1e3b      	subs	r3, r7, #0
 800597e:	bfb9      	ittee	lt
 8005980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005984:	9303      	strlt	r3, [sp, #12]
 8005986:	2300      	movge	r3, #0
 8005988:	f8c8 3000 	strge.w	r3, [r8]
 800598c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005990:	4ba3      	ldr	r3, [pc, #652]	; (8005c20 <_dtoa_r+0x300>)
 8005992:	bfbc      	itt	lt
 8005994:	2201      	movlt	r2, #1
 8005996:	f8c8 2000 	strlt.w	r2, [r8]
 800599a:	ea33 0309 	bics.w	r3, r3, r9
 800599e:	d11b      	bne.n	80059d8 <_dtoa_r+0xb8>
 80059a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059ac:	4333      	orrs	r3, r6
 80059ae:	f000 857a 	beq.w	80064a6 <_dtoa_r+0xb86>
 80059b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b4:	b963      	cbnz	r3, 80059d0 <_dtoa_r+0xb0>
 80059b6:	4b9b      	ldr	r3, [pc, #620]	; (8005c24 <_dtoa_r+0x304>)
 80059b8:	e024      	b.n	8005a04 <_dtoa_r+0xe4>
 80059ba:	4b9b      	ldr	r3, [pc, #620]	; (8005c28 <_dtoa_r+0x308>)
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	9800      	ldr	r0, [sp, #0]
 80059c6:	b015      	add	sp, #84	; 0x54
 80059c8:	ecbd 8b02 	vpop	{d8}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	4b94      	ldr	r3, [pc, #592]	; (8005c24 <_dtoa_r+0x304>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	3303      	adds	r3, #3
 80059d6:	e7f3      	b.n	80059c0 <_dtoa_r+0xa0>
 80059d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	ec51 0b17 	vmov	r0, r1, d7
 80059e2:	2300      	movs	r3, #0
 80059e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80059e8:	f7fb f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80059ec:	4680      	mov	r8, r0
 80059ee:	b158      	cbz	r0, 8005a08 <_dtoa_r+0xe8>
 80059f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059f2:	2301      	movs	r3, #1
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 8551 	beq.w	80064a0 <_dtoa_r+0xb80>
 80059fe:	488b      	ldr	r0, [pc, #556]	; (8005c2c <_dtoa_r+0x30c>)
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	1e43      	subs	r3, r0, #1
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	e7dd      	b.n	80059c4 <_dtoa_r+0xa4>
 8005a08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a0c:	aa12      	add	r2, sp, #72	; 0x48
 8005a0e:	a913      	add	r1, sp, #76	; 0x4c
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 f8ad 	bl	8006b70 <__d2b>
 8005a16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a1a:	4683      	mov	fp, r0
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	d07c      	beq.n	8005b1a <_dtoa_r+0x1fa>
 8005a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005a2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a3a:	4b7d      	ldr	r3, [pc, #500]	; (8005c30 <_dtoa_r+0x310>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fc41 	bl	80002c8 <__aeabi_dsub>
 8005a46:	a36e      	add	r3, pc, #440	; (adr r3, 8005c00 <_dtoa_r+0x2e0>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f7fa fdf4 	bl	8000638 <__aeabi_dmul>
 8005a50:	a36d      	add	r3, pc, #436	; (adr r3, 8005c08 <_dtoa_r+0x2e8>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f7fa fc39 	bl	80002cc <__adddf3>
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	460f      	mov	r7, r1
 8005a60:	f7fa fd80 	bl	8000564 <__aeabi_i2d>
 8005a64:	a36a      	add	r3, pc, #424	; (adr r3, 8005c10 <_dtoa_r+0x2f0>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fde5 	bl	8000638 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fa fc29 	bl	80002cc <__adddf3>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	f7fb f88b 	bl	8000b98 <__aeabi_d2iz>
 8005a82:	2200      	movs	r2, #0
 8005a84:	4682      	mov	sl, r0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	f7fb f846 	bl	8000b1c <__aeabi_dcmplt>
 8005a90:	b148      	cbz	r0, 8005aa6 <_dtoa_r+0x186>
 8005a92:	4650      	mov	r0, sl
 8005a94:	f7fa fd66 	bl	8000564 <__aeabi_i2d>
 8005a98:	4632      	mov	r2, r6
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	f7fb f834 	bl	8000b08 <__aeabi_dcmpeq>
 8005aa0:	b908      	cbnz	r0, 8005aa6 <_dtoa_r+0x186>
 8005aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005aa6:	f1ba 0f16 	cmp.w	sl, #22
 8005aaa:	d854      	bhi.n	8005b56 <_dtoa_r+0x236>
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <_dtoa_r+0x314>)
 8005aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aba:	f7fb f82f 	bl	8000b1c <__aeabi_dcmplt>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d04b      	beq.n	8005b5a <_dtoa_r+0x23a>
 8005ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8005aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005acc:	1b5d      	subs	r5, r3, r5
 8005ace:	1e6b      	subs	r3, r5, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	bf43      	ittte	mi
 8005ad4:	2300      	movmi	r3, #0
 8005ad6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005ada:	9304      	strmi	r3, [sp, #16]
 8005adc:	f04f 0800 	movpl.w	r8, #0
 8005ae0:	f1ba 0f00 	cmp.w	sl, #0
 8005ae4:	db3b      	blt.n	8005b5e <_dtoa_r+0x23e>
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005aec:	4453      	add	r3, sl
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	2300      	movs	r3, #0
 8005af2:	9306      	str	r3, [sp, #24]
 8005af4:	9b05      	ldr	r3, [sp, #20]
 8005af6:	2b09      	cmp	r3, #9
 8005af8:	d869      	bhi.n	8005bce <_dtoa_r+0x2ae>
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	bfc4      	itt	gt
 8005afe:	3b04      	subgt	r3, #4
 8005b00:	9305      	strgt	r3, [sp, #20]
 8005b02:	9b05      	ldr	r3, [sp, #20]
 8005b04:	f1a3 0302 	sub.w	r3, r3, #2
 8005b08:	bfcc      	ite	gt
 8005b0a:	2500      	movgt	r5, #0
 8005b0c:	2501      	movle	r5, #1
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d869      	bhi.n	8005be6 <_dtoa_r+0x2c6>
 8005b12:	e8df f003 	tbb	[pc, r3]
 8005b16:	4e2c      	.short	0x4e2c
 8005b18:	5a4c      	.short	0x5a4c
 8005b1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b1e:	441d      	add	r5, r3
 8005b20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	bfc1      	itttt	gt
 8005b28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b30:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b38:	bfda      	itte	le
 8005b3a:	f1c3 0320 	rsble	r3, r3, #32
 8005b3e:	fa06 f003 	lslle.w	r0, r6, r3
 8005b42:	4318      	orrgt	r0, r3
 8005b44:	f7fa fcfe 	bl	8000544 <__aeabi_ui2d>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b50:	3d01      	subs	r5, #1
 8005b52:	9310      	str	r3, [sp, #64]	; 0x40
 8005b54:	e771      	b.n	8005a3a <_dtoa_r+0x11a>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e7b6      	b.n	8005ac8 <_dtoa_r+0x1a8>
 8005b5a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b5c:	e7b5      	b.n	8005aca <_dtoa_r+0x1aa>
 8005b5e:	f1ca 0300 	rsb	r3, sl, #0
 8005b62:	9306      	str	r3, [sp, #24]
 8005b64:	2300      	movs	r3, #0
 8005b66:	eba8 080a 	sub.w	r8, r8, sl
 8005b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b6c:	e7c2      	b.n	8005af4 <_dtoa_r+0x1d4>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9308      	str	r3, [sp, #32]
 8005b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dc39      	bgt.n	8005bec <_dtoa_r+0x2cc>
 8005b78:	f04f 0901 	mov.w	r9, #1
 8005b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b80:	464b      	mov	r3, r9
 8005b82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b88:	2200      	movs	r2, #0
 8005b8a:	6042      	str	r2, [r0, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	f102 0614 	add.w	r6, r2, #20
 8005b92:	429e      	cmp	r6, r3
 8005b94:	6841      	ldr	r1, [r0, #4]
 8005b96:	d92f      	bls.n	8005bf8 <_dtoa_r+0x2d8>
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 fcc7 	bl	800652c <_Balloc>
 8005b9e:	9000      	str	r0, [sp, #0]
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d14b      	bne.n	8005c3c <_dtoa_r+0x31c>
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <_dtoa_r+0x318>)
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bac:	e6d1      	b.n	8005952 <_dtoa_r+0x32>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7de      	b.n	8005b70 <_dtoa_r+0x250>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	eb0a 0903 	add.w	r9, sl, r3
 8005bbc:	f109 0301 	add.w	r3, r9, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	bfb8      	it	lt
 8005bc6:	2301      	movlt	r3, #1
 8005bc8:	e7dd      	b.n	8005b86 <_dtoa_r+0x266>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e7f2      	b.n	8005bb4 <_dtoa_r+0x294>
 8005bce:	2501      	movs	r5, #1
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	9508      	str	r5, [sp, #32]
 8005bd6:	f04f 39ff 	mov.w	r9, #4294967295
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005be0:	2312      	movs	r3, #18
 8005be2:	9209      	str	r2, [sp, #36]	; 0x24
 8005be4:	e7cf      	b.n	8005b86 <_dtoa_r+0x266>
 8005be6:	2301      	movs	r3, #1
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	e7f4      	b.n	8005bd6 <_dtoa_r+0x2b6>
 8005bec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005bf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	e7c6      	b.n	8005b86 <_dtoa_r+0x266>
 8005bf8:	3101      	adds	r1, #1
 8005bfa:	6041      	str	r1, [r0, #4]
 8005bfc:	0052      	lsls	r2, r2, #1
 8005bfe:	e7c6      	b.n	8005b8e <_dtoa_r+0x26e>
 8005c00:	636f4361 	.word	0x636f4361
 8005c04:	3fd287a7 	.word	0x3fd287a7
 8005c08:	8b60c8b3 	.word	0x8b60c8b3
 8005c0c:	3fc68a28 	.word	0x3fc68a28
 8005c10:	509f79fb 	.word	0x509f79fb
 8005c14:	3fd34413 	.word	0x3fd34413
 8005c18:	08007d61 	.word	0x08007d61
 8005c1c:	08007d78 	.word	0x08007d78
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	08007d5d 	.word	0x08007d5d
 8005c28:	08007d54 	.word	0x08007d54
 8005c2c:	08007d31 	.word	0x08007d31
 8005c30:	3ff80000 	.word	0x3ff80000
 8005c34:	08007e70 	.word	0x08007e70
 8005c38:	08007dd7 	.word	0x08007dd7
 8005c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3e:	9a00      	ldr	r2, [sp, #0]
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	9b01      	ldr	r3, [sp, #4]
 8005c44:	2b0e      	cmp	r3, #14
 8005c46:	f200 80ad 	bhi.w	8005da4 <_dtoa_r+0x484>
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	f000 80aa 	beq.w	8005da4 <_dtoa_r+0x484>
 8005c50:	f1ba 0f00 	cmp.w	sl, #0
 8005c54:	dd36      	ble.n	8005cc4 <_dtoa_r+0x3a4>
 8005c56:	4ac3      	ldr	r2, [pc, #780]	; (8005f64 <_dtoa_r+0x644>)
 8005c58:	f00a 030f 	and.w	r3, sl, #15
 8005c5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c60:	ed93 7b00 	vldr	d7, [r3]
 8005c64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8005c70:	eef0 8a67 	vmov.f32	s17, s15
 8005c74:	d016      	beq.n	8005ca4 <_dtoa_r+0x384>
 8005c76:	4bbc      	ldr	r3, [pc, #752]	; (8005f68 <_dtoa_r+0x648>)
 8005c78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c80:	f7fa fe04 	bl	800088c <__aeabi_ddiv>
 8005c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c88:	f007 070f 	and.w	r7, r7, #15
 8005c8c:	2503      	movs	r5, #3
 8005c8e:	4eb6      	ldr	r6, [pc, #728]	; (8005f68 <_dtoa_r+0x648>)
 8005c90:	b957      	cbnz	r7, 8005ca8 <_dtoa_r+0x388>
 8005c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c96:	ec53 2b18 	vmov	r2, r3, d8
 8005c9a:	f7fa fdf7 	bl	800088c <__aeabi_ddiv>
 8005c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca2:	e029      	b.n	8005cf8 <_dtoa_r+0x3d8>
 8005ca4:	2502      	movs	r5, #2
 8005ca6:	e7f2      	b.n	8005c8e <_dtoa_r+0x36e>
 8005ca8:	07f9      	lsls	r1, r7, #31
 8005caa:	d508      	bpl.n	8005cbe <_dtoa_r+0x39e>
 8005cac:	ec51 0b18 	vmov	r0, r1, d8
 8005cb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cb4:	f7fa fcc0 	bl	8000638 <__aeabi_dmul>
 8005cb8:	ec41 0b18 	vmov	d8, r0, r1
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	107f      	asrs	r7, r7, #1
 8005cc0:	3608      	adds	r6, #8
 8005cc2:	e7e5      	b.n	8005c90 <_dtoa_r+0x370>
 8005cc4:	f000 80a6 	beq.w	8005e14 <_dtoa_r+0x4f4>
 8005cc8:	f1ca 0600 	rsb	r6, sl, #0
 8005ccc:	4ba5      	ldr	r3, [pc, #660]	; (8005f64 <_dtoa_r+0x644>)
 8005cce:	4fa6      	ldr	r7, [pc, #664]	; (8005f68 <_dtoa_r+0x648>)
 8005cd0:	f006 020f 	and.w	r2, r6, #15
 8005cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ce0:	f7fa fcaa 	bl	8000638 <__aeabi_dmul>
 8005ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce8:	1136      	asrs	r6, r6, #4
 8005cea:	2300      	movs	r3, #0
 8005cec:	2502      	movs	r5, #2
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	f040 8085 	bne.w	8005dfe <_dtoa_r+0x4de>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1d2      	bne.n	8005c9e <_dtoa_r+0x37e>
 8005cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 808c 	beq.w	8005e18 <_dtoa_r+0x4f8>
 8005d00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d04:	4b99      	ldr	r3, [pc, #612]	; (8005f6c <_dtoa_r+0x64c>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa ff06 	bl	8000b1c <__aeabi_dcmplt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f000 8081 	beq.w	8005e18 <_dtoa_r+0x4f8>
 8005d16:	9b01      	ldr	r3, [sp, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d07d      	beq.n	8005e18 <_dtoa_r+0x4f8>
 8005d1c:	f1b9 0f00 	cmp.w	r9, #0
 8005d20:	dd3c      	ble.n	8005d9c <_dtoa_r+0x47c>
 8005d22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b91      	ldr	r3, [pc, #580]	; (8005f70 <_dtoa_r+0x650>)
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fc82 	bl	8000638 <__aeabi_dmul>
 8005d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d38:	3501      	adds	r5, #1
 8005d3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7fa fc0e 	bl	8000564 <__aeabi_i2d>
 8005d48:	4632      	mov	r2, r6
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	f7fa fc74 	bl	8000638 <__aeabi_dmul>
 8005d50:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <_dtoa_r+0x654>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	f7fa faba 	bl	80002cc <__adddf3>
 8005d58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d15c      	bne.n	8005e22 <_dtoa_r+0x502>
 8005d68:	4b83      	ldr	r3, [pc, #524]	; (8005f78 <_dtoa_r+0x658>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4639      	mov	r1, r7
 8005d70:	f7fa faaa 	bl	80002c8 <__aeabi_dsub>
 8005d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	f7fa feec 	bl	8000b58 <__aeabi_dcmpgt>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f040 8296 	bne.w	80062b2 <_dtoa_r+0x992>
 8005d86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fec3 	bl	8000b1c <__aeabi_dcmplt>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f040 8288 	bne.w	80062ac <_dtoa_r+0x98c>
 8005d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f2c0 8158 	blt.w	800605c <_dtoa_r+0x73c>
 8005dac:	f1ba 0f0e 	cmp.w	sl, #14
 8005db0:	f300 8154 	bgt.w	800605c <_dtoa_r+0x73c>
 8005db4:	4b6b      	ldr	r3, [pc, #428]	; (8005f64 <_dtoa_r+0x644>)
 8005db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005dba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f280 80e3 	bge.w	8005f8c <_dtoa_r+0x66c>
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f300 80df 	bgt.w	8005f8c <_dtoa_r+0x66c>
 8005dce:	f040 826d 	bne.w	80062ac <_dtoa_r+0x98c>
 8005dd2:	4b69      	ldr	r3, [pc, #420]	; (8005f78 <_dtoa_r+0x658>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fc2d 	bl	8000638 <__aeabi_dmul>
 8005dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005de2:	f7fa feaf 	bl	8000b44 <__aeabi_dcmpge>
 8005de6:	9e01      	ldr	r6, [sp, #4]
 8005de8:	4637      	mov	r7, r6
 8005dea:	2800      	cmp	r0, #0
 8005dec:	f040 8243 	bne.w	8006276 <_dtoa_r+0x956>
 8005df0:	9d00      	ldr	r5, [sp, #0]
 8005df2:	2331      	movs	r3, #49	; 0x31
 8005df4:	f805 3b01 	strb.w	r3, [r5], #1
 8005df8:	f10a 0a01 	add.w	sl, sl, #1
 8005dfc:	e23f      	b.n	800627e <_dtoa_r+0x95e>
 8005dfe:	07f2      	lsls	r2, r6, #31
 8005e00:	d505      	bpl.n	8005e0e <_dtoa_r+0x4ee>
 8005e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e06:	f7fa fc17 	bl	8000638 <__aeabi_dmul>
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	1076      	asrs	r6, r6, #1
 8005e10:	3708      	adds	r7, #8
 8005e12:	e76c      	b.n	8005cee <_dtoa_r+0x3ce>
 8005e14:	2502      	movs	r5, #2
 8005e16:	e76f      	b.n	8005cf8 <_dtoa_r+0x3d8>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e20:	e78d      	b.n	8005d3e <_dtoa_r+0x41e>
 8005e22:	9900      	ldr	r1, [sp, #0]
 8005e24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e28:	4b4e      	ldr	r3, [pc, #312]	; (8005f64 <_dtoa_r+0x644>)
 8005e2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e2e:	4401      	add	r1, r0
 8005e30:	9102      	str	r1, [sp, #8]
 8005e32:	9908      	ldr	r1, [sp, #32]
 8005e34:	eeb0 8a47 	vmov.f32	s16, s14
 8005e38:	eef0 8a67 	vmov.f32	s17, s15
 8005e3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d045      	beq.n	8005ed4 <_dtoa_r+0x5b4>
 8005e48:	494c      	ldr	r1, [pc, #304]	; (8005f7c <_dtoa_r+0x65c>)
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f7fa fd1e 	bl	800088c <__aeabi_ddiv>
 8005e50:	ec53 2b18 	vmov	r2, r3, d8
 8005e54:	f7fa fa38 	bl	80002c8 <__aeabi_dsub>
 8005e58:	9d00      	ldr	r5, [sp, #0]
 8005e5a:	ec41 0b18 	vmov	d8, r0, r1
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	f7fa fe99 	bl	8000b98 <__aeabi_d2iz>
 8005e66:	900c      	str	r0, [sp, #48]	; 0x30
 8005e68:	f7fa fb7c 	bl	8000564 <__aeabi_i2d>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fa28 	bl	80002c8 <__aeabi_dsub>
 8005e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e7a:	3330      	adds	r3, #48	; 0x30
 8005e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8005e80:	ec53 2b18 	vmov	r2, r3, d8
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	f7fa fe48 	bl	8000b1c <__aeabi_dcmplt>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d165      	bne.n	8005f5c <_dtoa_r+0x63c>
 8005e90:	4632      	mov	r2, r6
 8005e92:	463b      	mov	r3, r7
 8005e94:	4935      	ldr	r1, [pc, #212]	; (8005f6c <_dtoa_r+0x64c>)
 8005e96:	2000      	movs	r0, #0
 8005e98:	f7fa fa16 	bl	80002c8 <__aeabi_dsub>
 8005e9c:	ec53 2b18 	vmov	r2, r3, d8
 8005ea0:	f7fa fe3c 	bl	8000b1c <__aeabi_dcmplt>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f040 80b9 	bne.w	800601c <_dtoa_r+0x6fc>
 8005eaa:	9b02      	ldr	r3, [sp, #8]
 8005eac:	429d      	cmp	r5, r3
 8005eae:	f43f af75 	beq.w	8005d9c <_dtoa_r+0x47c>
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <_dtoa_r+0x650>)
 8005eb4:	ec51 0b18 	vmov	r0, r1, d8
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f7fa fbbd 	bl	8000638 <__aeabi_dmul>
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <_dtoa_r+0x650>)
 8005ec0:	ec41 0b18 	vmov	d8, r0, r1
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa fbb5 	bl	8000638 <__aeabi_dmul>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	e7c4      	b.n	8005e5e <_dtoa_r+0x53e>
 8005ed4:	ec51 0b17 	vmov	r0, r1, d7
 8005ed8:	f7fa fbae 	bl	8000638 <__aeabi_dmul>
 8005edc:	9b02      	ldr	r3, [sp, #8]
 8005ede:	9d00      	ldr	r5, [sp, #0]
 8005ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee2:	ec41 0b18 	vmov	d8, r0, r1
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7fa fe55 	bl	8000b98 <__aeabi_d2iz>
 8005eee:	9011      	str	r0, [sp, #68]	; 0x44
 8005ef0:	f7fa fb38 	bl	8000564 <__aeabi_i2d>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4630      	mov	r0, r6
 8005efa:	4639      	mov	r1, r7
 8005efc:	f7fa f9e4 	bl	80002c8 <__aeabi_dsub>
 8005f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f02:	3330      	adds	r3, #48	; 0x30
 8005f04:	f805 3b01 	strb.w	r3, [r5], #1
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	429d      	cmp	r5, r3
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	460f      	mov	r7, r1
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	d134      	bne.n	8005f80 <_dtoa_r+0x660>
 8005f16:	4b19      	ldr	r3, [pc, #100]	; (8005f7c <_dtoa_r+0x65c>)
 8005f18:	ec51 0b18 	vmov	r0, r1, d8
 8005f1c:	f7fa f9d6 	bl	80002cc <__adddf3>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fe16 	bl	8000b58 <__aeabi_dcmpgt>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d175      	bne.n	800601c <_dtoa_r+0x6fc>
 8005f30:	ec53 2b18 	vmov	r2, r3, d8
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <_dtoa_r+0x65c>)
 8005f36:	2000      	movs	r0, #0
 8005f38:	f7fa f9c6 	bl	80002c8 <__aeabi_dsub>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa fdea 	bl	8000b1c <__aeabi_dcmplt>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f43f af27 	beq.w	8005d9c <_dtoa_r+0x47c>
 8005f4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f50:	1e6b      	subs	r3, r5, #1
 8005f52:	930c      	str	r3, [sp, #48]	; 0x30
 8005f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d0f8      	beq.n	8005f4e <_dtoa_r+0x62e>
 8005f5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f60:	e04a      	b.n	8005ff8 <_dtoa_r+0x6d8>
 8005f62:	bf00      	nop
 8005f64:	08007e70 	.word	0x08007e70
 8005f68:	08007e48 	.word	0x08007e48
 8005f6c:	3ff00000 	.word	0x3ff00000
 8005f70:	40240000 	.word	0x40240000
 8005f74:	401c0000 	.word	0x401c0000
 8005f78:	40140000 	.word	0x40140000
 8005f7c:	3fe00000 	.word	0x3fe00000
 8005f80:	4baf      	ldr	r3, [pc, #700]	; (8006240 <_dtoa_r+0x920>)
 8005f82:	f7fa fb59 	bl	8000638 <__aeabi_dmul>
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	e7ac      	b.n	8005ee6 <_dtoa_r+0x5c6>
 8005f8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f90:	9d00      	ldr	r5, [sp, #0]
 8005f92:	4642      	mov	r2, r8
 8005f94:	464b      	mov	r3, r9
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fc77 	bl	800088c <__aeabi_ddiv>
 8005f9e:	f7fa fdfb 	bl	8000b98 <__aeabi_d2iz>
 8005fa2:	9002      	str	r0, [sp, #8]
 8005fa4:	f7fa fade 	bl	8000564 <__aeabi_i2d>
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	f7fa fb44 	bl	8000638 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa f986 	bl	80002c8 <__aeabi_dsub>
 8005fbc:	9e02      	ldr	r6, [sp, #8]
 8005fbe:	9f01      	ldr	r7, [sp, #4]
 8005fc0:	3630      	adds	r6, #48	; 0x30
 8005fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8005fc6:	9e00      	ldr	r6, [sp, #0]
 8005fc8:	1bae      	subs	r6, r5, r6
 8005fca:	42b7      	cmp	r7, r6
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	d137      	bne.n	8006042 <_dtoa_r+0x722>
 8005fd2:	f7fa f97b 	bl	80002cc <__adddf3>
 8005fd6:	4642      	mov	r2, r8
 8005fd8:	464b      	mov	r3, r9
 8005fda:	4606      	mov	r6, r0
 8005fdc:	460f      	mov	r7, r1
 8005fde:	f7fa fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8005fe2:	b9c8      	cbnz	r0, 8006018 <_dtoa_r+0x6f8>
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4639      	mov	r1, r7
 8005fec:	f7fa fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8005ff0:	b110      	cbz	r0, 8005ff8 <_dtoa_r+0x6d8>
 8005ff2:	9b02      	ldr	r3, [sp, #8]
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d40f      	bmi.n	8006018 <_dtoa_r+0x6f8>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4659      	mov	r1, fp
 8005ffc:	f000 fad6 	bl	80065ac <_Bfree>
 8006000:	2300      	movs	r3, #0
 8006002:	702b      	strb	r3, [r5, #0]
 8006004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006006:	f10a 0001 	add.w	r0, sl, #1
 800600a:	6018      	str	r0, [r3, #0]
 800600c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800600e:	2b00      	cmp	r3, #0
 8006010:	f43f acd8 	beq.w	80059c4 <_dtoa_r+0xa4>
 8006014:	601d      	str	r5, [r3, #0]
 8006016:	e4d5      	b.n	80059c4 <_dtoa_r+0xa4>
 8006018:	f8cd a01c 	str.w	sl, [sp, #28]
 800601c:	462b      	mov	r3, r5
 800601e:	461d      	mov	r5, r3
 8006020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006024:	2a39      	cmp	r2, #57	; 0x39
 8006026:	d108      	bne.n	800603a <_dtoa_r+0x71a>
 8006028:	9a00      	ldr	r2, [sp, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d1f7      	bne.n	800601e <_dtoa_r+0x6fe>
 800602e:	9a07      	ldr	r2, [sp, #28]
 8006030:	9900      	ldr	r1, [sp, #0]
 8006032:	3201      	adds	r2, #1
 8006034:	9207      	str	r2, [sp, #28]
 8006036:	2230      	movs	r2, #48	; 0x30
 8006038:	700a      	strb	r2, [r1, #0]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	3201      	adds	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e78c      	b.n	8005f5c <_dtoa_r+0x63c>
 8006042:	4b7f      	ldr	r3, [pc, #508]	; (8006240 <_dtoa_r+0x920>)
 8006044:	2200      	movs	r2, #0
 8006046:	f7fa faf7 	bl	8000638 <__aeabi_dmul>
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	f7fa fd59 	bl	8000b08 <__aeabi_dcmpeq>
 8006056:	2800      	cmp	r0, #0
 8006058:	d09b      	beq.n	8005f92 <_dtoa_r+0x672>
 800605a:	e7cd      	b.n	8005ff8 <_dtoa_r+0x6d8>
 800605c:	9a08      	ldr	r2, [sp, #32]
 800605e:	2a00      	cmp	r2, #0
 8006060:	f000 80c4 	beq.w	80061ec <_dtoa_r+0x8cc>
 8006064:	9a05      	ldr	r2, [sp, #20]
 8006066:	2a01      	cmp	r2, #1
 8006068:	f300 80a8 	bgt.w	80061bc <_dtoa_r+0x89c>
 800606c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800606e:	2a00      	cmp	r2, #0
 8006070:	f000 80a0 	beq.w	80061b4 <_dtoa_r+0x894>
 8006074:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006078:	9e06      	ldr	r6, [sp, #24]
 800607a:	4645      	mov	r5, r8
 800607c:	9a04      	ldr	r2, [sp, #16]
 800607e:	2101      	movs	r1, #1
 8006080:	441a      	add	r2, r3
 8006082:	4620      	mov	r0, r4
 8006084:	4498      	add	r8, r3
 8006086:	9204      	str	r2, [sp, #16]
 8006088:	f000 fb4c 	bl	8006724 <__i2b>
 800608c:	4607      	mov	r7, r0
 800608e:	2d00      	cmp	r5, #0
 8006090:	dd0b      	ble.n	80060aa <_dtoa_r+0x78a>
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	dd08      	ble.n	80060aa <_dtoa_r+0x78a>
 8006098:	42ab      	cmp	r3, r5
 800609a:	9a04      	ldr	r2, [sp, #16]
 800609c:	bfa8      	it	ge
 800609e:	462b      	movge	r3, r5
 80060a0:	eba8 0803 	sub.w	r8, r8, r3
 80060a4:	1aed      	subs	r5, r5, r3
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	b1fb      	cbz	r3, 80060ee <_dtoa_r+0x7ce>
 80060ae:	9b08      	ldr	r3, [sp, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809f 	beq.w	80061f4 <_dtoa_r+0x8d4>
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	dd11      	ble.n	80060de <_dtoa_r+0x7be>
 80060ba:	4639      	mov	r1, r7
 80060bc:	4632      	mov	r2, r6
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fbec 	bl	800689c <__pow5mult>
 80060c4:	465a      	mov	r2, fp
 80060c6:	4601      	mov	r1, r0
 80060c8:	4607      	mov	r7, r0
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fb40 	bl	8006750 <__multiply>
 80060d0:	4659      	mov	r1, fp
 80060d2:	9007      	str	r0, [sp, #28]
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fa69 	bl	80065ac <_Bfree>
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	469b      	mov	fp, r3
 80060de:	9b06      	ldr	r3, [sp, #24]
 80060e0:	1b9a      	subs	r2, r3, r6
 80060e2:	d004      	beq.n	80060ee <_dtoa_r+0x7ce>
 80060e4:	4659      	mov	r1, fp
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fbd8 	bl	800689c <__pow5mult>
 80060ec:	4683      	mov	fp, r0
 80060ee:	2101      	movs	r1, #1
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 fb17 	bl	8006724 <__i2b>
 80060f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	4606      	mov	r6, r0
 80060fc:	dd7c      	ble.n	80061f8 <_dtoa_r+0x8d8>
 80060fe:	461a      	mov	r2, r3
 8006100:	4601      	mov	r1, r0
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fbca 	bl	800689c <__pow5mult>
 8006108:	9b05      	ldr	r3, [sp, #20]
 800610a:	2b01      	cmp	r3, #1
 800610c:	4606      	mov	r6, r0
 800610e:	dd76      	ble.n	80061fe <_dtoa_r+0x8de>
 8006110:	2300      	movs	r3, #0
 8006112:	9306      	str	r3, [sp, #24]
 8006114:	6933      	ldr	r3, [r6, #16]
 8006116:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800611a:	6918      	ldr	r0, [r3, #16]
 800611c:	f000 fab2 	bl	8006684 <__hi0bits>
 8006120:	f1c0 0020 	rsb	r0, r0, #32
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	4418      	add	r0, r3
 8006128:	f010 001f 	ands.w	r0, r0, #31
 800612c:	f000 8086 	beq.w	800623c <_dtoa_r+0x91c>
 8006130:	f1c0 0320 	rsb	r3, r0, #32
 8006134:	2b04      	cmp	r3, #4
 8006136:	dd7f      	ble.n	8006238 <_dtoa_r+0x918>
 8006138:	f1c0 001c 	rsb	r0, r0, #28
 800613c:	9b04      	ldr	r3, [sp, #16]
 800613e:	4403      	add	r3, r0
 8006140:	4480      	add	r8, r0
 8006142:	4405      	add	r5, r0
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	f1b8 0f00 	cmp.w	r8, #0
 800614a:	dd05      	ble.n	8006158 <_dtoa_r+0x838>
 800614c:	4659      	mov	r1, fp
 800614e:	4642      	mov	r2, r8
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fbfd 	bl	8006950 <__lshift>
 8006156:	4683      	mov	fp, r0
 8006158:	9b04      	ldr	r3, [sp, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	dd05      	ble.n	800616a <_dtoa_r+0x84a>
 800615e:	4631      	mov	r1, r6
 8006160:	461a      	mov	r2, r3
 8006162:	4620      	mov	r0, r4
 8006164:	f000 fbf4 	bl	8006950 <__lshift>
 8006168:	4606      	mov	r6, r0
 800616a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d069      	beq.n	8006244 <_dtoa_r+0x924>
 8006170:	4631      	mov	r1, r6
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fc58 	bl	8006a28 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	da63      	bge.n	8006244 <_dtoa_r+0x924>
 800617c:	2300      	movs	r3, #0
 800617e:	4659      	mov	r1, fp
 8006180:	220a      	movs	r2, #10
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fa34 	bl	80065f0 <__multadd>
 8006188:	9b08      	ldr	r3, [sp, #32]
 800618a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800618e:	4683      	mov	fp, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 818f 	beq.w	80064b4 <_dtoa_r+0xb94>
 8006196:	4639      	mov	r1, r7
 8006198:	2300      	movs	r3, #0
 800619a:	220a      	movs	r2, #10
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fa27 	bl	80065f0 <__multadd>
 80061a2:	f1b9 0f00 	cmp.w	r9, #0
 80061a6:	4607      	mov	r7, r0
 80061a8:	f300 808e 	bgt.w	80062c8 <_dtoa_r+0x9a8>
 80061ac:	9b05      	ldr	r3, [sp, #20]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	dc50      	bgt.n	8006254 <_dtoa_r+0x934>
 80061b2:	e089      	b.n	80062c8 <_dtoa_r+0x9a8>
 80061b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061ba:	e75d      	b.n	8006078 <_dtoa_r+0x758>
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	1e5e      	subs	r6, r3, #1
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	42b3      	cmp	r3, r6
 80061c4:	bfbf      	itttt	lt
 80061c6:	9b06      	ldrlt	r3, [sp, #24]
 80061c8:	9606      	strlt	r6, [sp, #24]
 80061ca:	1af2      	sublt	r2, r6, r3
 80061cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80061ce:	bfb6      	itet	lt
 80061d0:	189b      	addlt	r3, r3, r2
 80061d2:	1b9e      	subge	r6, r3, r6
 80061d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	bfb8      	it	lt
 80061da:	2600      	movlt	r6, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfb5      	itete	lt
 80061e0:	eba8 0503 	sublt.w	r5, r8, r3
 80061e4:	9b01      	ldrge	r3, [sp, #4]
 80061e6:	2300      	movlt	r3, #0
 80061e8:	4645      	movge	r5, r8
 80061ea:	e747      	b.n	800607c <_dtoa_r+0x75c>
 80061ec:	9e06      	ldr	r6, [sp, #24]
 80061ee:	9f08      	ldr	r7, [sp, #32]
 80061f0:	4645      	mov	r5, r8
 80061f2:	e74c      	b.n	800608e <_dtoa_r+0x76e>
 80061f4:	9a06      	ldr	r2, [sp, #24]
 80061f6:	e775      	b.n	80060e4 <_dtoa_r+0x7c4>
 80061f8:	9b05      	ldr	r3, [sp, #20]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	dc18      	bgt.n	8006230 <_dtoa_r+0x910>
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	b9b3      	cbnz	r3, 8006230 <_dtoa_r+0x910>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006208:	b9a3      	cbnz	r3, 8006234 <_dtoa_r+0x914>
 800620a:	9b03      	ldr	r3, [sp, #12]
 800620c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006210:	0d1b      	lsrs	r3, r3, #20
 8006212:	051b      	lsls	r3, r3, #20
 8006214:	b12b      	cbz	r3, 8006222 <_dtoa_r+0x902>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	3301      	adds	r3, #1
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	f108 0801 	add.w	r8, r8, #1
 8006220:	2301      	movs	r3, #1
 8006222:	9306      	str	r3, [sp, #24]
 8006224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006226:	2b00      	cmp	r3, #0
 8006228:	f47f af74 	bne.w	8006114 <_dtoa_r+0x7f4>
 800622c:	2001      	movs	r0, #1
 800622e:	e779      	b.n	8006124 <_dtoa_r+0x804>
 8006230:	2300      	movs	r3, #0
 8006232:	e7f6      	b.n	8006222 <_dtoa_r+0x902>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	e7f4      	b.n	8006222 <_dtoa_r+0x902>
 8006238:	d085      	beq.n	8006146 <_dtoa_r+0x826>
 800623a:	4618      	mov	r0, r3
 800623c:	301c      	adds	r0, #28
 800623e:	e77d      	b.n	800613c <_dtoa_r+0x81c>
 8006240:	40240000 	.word	0x40240000
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc38      	bgt.n	80062bc <_dtoa_r+0x99c>
 800624a:	9b05      	ldr	r3, [sp, #20]
 800624c:	2b02      	cmp	r3, #2
 800624e:	dd35      	ble.n	80062bc <_dtoa_r+0x99c>
 8006250:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006254:	f1b9 0f00 	cmp.w	r9, #0
 8006258:	d10d      	bne.n	8006276 <_dtoa_r+0x956>
 800625a:	4631      	mov	r1, r6
 800625c:	464b      	mov	r3, r9
 800625e:	2205      	movs	r2, #5
 8006260:	4620      	mov	r0, r4
 8006262:	f000 f9c5 	bl	80065f0 <__multadd>
 8006266:	4601      	mov	r1, r0
 8006268:	4606      	mov	r6, r0
 800626a:	4658      	mov	r0, fp
 800626c:	f000 fbdc 	bl	8006a28 <__mcmp>
 8006270:	2800      	cmp	r0, #0
 8006272:	f73f adbd 	bgt.w	8005df0 <_dtoa_r+0x4d0>
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	9d00      	ldr	r5, [sp, #0]
 800627a:	ea6f 0a03 	mvn.w	sl, r3
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	4631      	mov	r1, r6
 8006284:	4620      	mov	r0, r4
 8006286:	f000 f991 	bl	80065ac <_Bfree>
 800628a:	2f00      	cmp	r7, #0
 800628c:	f43f aeb4 	beq.w	8005ff8 <_dtoa_r+0x6d8>
 8006290:	f1b8 0f00 	cmp.w	r8, #0
 8006294:	d005      	beq.n	80062a2 <_dtoa_r+0x982>
 8006296:	45b8      	cmp	r8, r7
 8006298:	d003      	beq.n	80062a2 <_dtoa_r+0x982>
 800629a:	4641      	mov	r1, r8
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f985 	bl	80065ac <_Bfree>
 80062a2:	4639      	mov	r1, r7
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 f981 	bl	80065ac <_Bfree>
 80062aa:	e6a5      	b.n	8005ff8 <_dtoa_r+0x6d8>
 80062ac:	2600      	movs	r6, #0
 80062ae:	4637      	mov	r7, r6
 80062b0:	e7e1      	b.n	8006276 <_dtoa_r+0x956>
 80062b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80062b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80062b8:	4637      	mov	r7, r6
 80062ba:	e599      	b.n	8005df0 <_dtoa_r+0x4d0>
 80062bc:	9b08      	ldr	r3, [sp, #32]
 80062be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80fd 	beq.w	80064c2 <_dtoa_r+0xba2>
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	dd05      	ble.n	80062d8 <_dtoa_r+0x9b8>
 80062cc:	4639      	mov	r1, r7
 80062ce:	462a      	mov	r2, r5
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fb3d 	bl	8006950 <__lshift>
 80062d6:	4607      	mov	r7, r0
 80062d8:	9b06      	ldr	r3, [sp, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d05c      	beq.n	8006398 <_dtoa_r+0xa78>
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f923 	bl	800652c <_Balloc>
 80062e6:	4605      	mov	r5, r0
 80062e8:	b928      	cbnz	r0, 80062f6 <_dtoa_r+0x9d6>
 80062ea:	4b80      	ldr	r3, [pc, #512]	; (80064ec <_dtoa_r+0xbcc>)
 80062ec:	4602      	mov	r2, r0
 80062ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062f2:	f7ff bb2e 	b.w	8005952 <_dtoa_r+0x32>
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	3202      	adds	r2, #2
 80062fa:	0092      	lsls	r2, r2, #2
 80062fc:	f107 010c 	add.w	r1, r7, #12
 8006300:	300c      	adds	r0, #12
 8006302:	f000 f905 	bl	8006510 <memcpy>
 8006306:	2201      	movs	r2, #1
 8006308:	4629      	mov	r1, r5
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fb20 	bl	8006950 <__lshift>
 8006310:	9b00      	ldr	r3, [sp, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	9b00      	ldr	r3, [sp, #0]
 8006318:	444b      	add	r3, r9
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	46b8      	mov	r8, r7
 8006324:	9306      	str	r3, [sp, #24]
 8006326:	4607      	mov	r7, r0
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	4631      	mov	r1, r6
 800632c:	3b01      	subs	r3, #1
 800632e:	4658      	mov	r0, fp
 8006330:	9302      	str	r3, [sp, #8]
 8006332:	f7ff fa69 	bl	8005808 <quorem>
 8006336:	4603      	mov	r3, r0
 8006338:	3330      	adds	r3, #48	; 0x30
 800633a:	9004      	str	r0, [sp, #16]
 800633c:	4641      	mov	r1, r8
 800633e:	4658      	mov	r0, fp
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	f000 fb71 	bl	8006a28 <__mcmp>
 8006346:	463a      	mov	r2, r7
 8006348:	4681      	mov	r9, r0
 800634a:	4631      	mov	r1, r6
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fb87 	bl	8006a60 <__mdiff>
 8006352:	68c2      	ldr	r2, [r0, #12]
 8006354:	9b08      	ldr	r3, [sp, #32]
 8006356:	4605      	mov	r5, r0
 8006358:	bb02      	cbnz	r2, 800639c <_dtoa_r+0xa7c>
 800635a:	4601      	mov	r1, r0
 800635c:	4658      	mov	r0, fp
 800635e:	f000 fb63 	bl	8006a28 <__mcmp>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	4602      	mov	r2, r0
 8006366:	4629      	mov	r1, r5
 8006368:	4620      	mov	r0, r4
 800636a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800636e:	f000 f91d 	bl	80065ac <_Bfree>
 8006372:	9b05      	ldr	r3, [sp, #20]
 8006374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006376:	9d01      	ldr	r5, [sp, #4]
 8006378:	ea43 0102 	orr.w	r1, r3, r2
 800637c:	9b06      	ldr	r3, [sp, #24]
 800637e:	430b      	orrs	r3, r1
 8006380:	9b08      	ldr	r3, [sp, #32]
 8006382:	d10d      	bne.n	80063a0 <_dtoa_r+0xa80>
 8006384:	2b39      	cmp	r3, #57	; 0x39
 8006386:	d029      	beq.n	80063dc <_dtoa_r+0xabc>
 8006388:	f1b9 0f00 	cmp.w	r9, #0
 800638c:	dd01      	ble.n	8006392 <_dtoa_r+0xa72>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	3331      	adds	r3, #49	; 0x31
 8006392:	9a02      	ldr	r2, [sp, #8]
 8006394:	7013      	strb	r3, [r2, #0]
 8006396:	e774      	b.n	8006282 <_dtoa_r+0x962>
 8006398:	4638      	mov	r0, r7
 800639a:	e7b9      	b.n	8006310 <_dtoa_r+0x9f0>
 800639c:	2201      	movs	r2, #1
 800639e:	e7e2      	b.n	8006366 <_dtoa_r+0xa46>
 80063a0:	f1b9 0f00 	cmp.w	r9, #0
 80063a4:	db06      	blt.n	80063b4 <_dtoa_r+0xa94>
 80063a6:	9905      	ldr	r1, [sp, #20]
 80063a8:	ea41 0909 	orr.w	r9, r1, r9
 80063ac:	9906      	ldr	r1, [sp, #24]
 80063ae:	ea59 0101 	orrs.w	r1, r9, r1
 80063b2:	d120      	bne.n	80063f6 <_dtoa_r+0xad6>
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	ddec      	ble.n	8006392 <_dtoa_r+0xa72>
 80063b8:	4659      	mov	r1, fp
 80063ba:	2201      	movs	r2, #1
 80063bc:	4620      	mov	r0, r4
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	f000 fac6 	bl	8006950 <__lshift>
 80063c4:	4631      	mov	r1, r6
 80063c6:	4683      	mov	fp, r0
 80063c8:	f000 fb2e 	bl	8006a28 <__mcmp>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	dc02      	bgt.n	80063d8 <_dtoa_r+0xab8>
 80063d2:	d1de      	bne.n	8006392 <_dtoa_r+0xa72>
 80063d4:	07da      	lsls	r2, r3, #31
 80063d6:	d5dc      	bpl.n	8006392 <_dtoa_r+0xa72>
 80063d8:	2b39      	cmp	r3, #57	; 0x39
 80063da:	d1d8      	bne.n	800638e <_dtoa_r+0xa6e>
 80063dc:	9a02      	ldr	r2, [sp, #8]
 80063de:	2339      	movs	r3, #57	; 0x39
 80063e0:	7013      	strb	r3, [r2, #0]
 80063e2:	462b      	mov	r3, r5
 80063e4:	461d      	mov	r5, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063ec:	2a39      	cmp	r2, #57	; 0x39
 80063ee:	d050      	beq.n	8006492 <_dtoa_r+0xb72>
 80063f0:	3201      	adds	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e745      	b.n	8006282 <_dtoa_r+0x962>
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	dd03      	ble.n	8006402 <_dtoa_r+0xae2>
 80063fa:	2b39      	cmp	r3, #57	; 0x39
 80063fc:	d0ee      	beq.n	80063dc <_dtoa_r+0xabc>
 80063fe:	3301      	adds	r3, #1
 8006400:	e7c7      	b.n	8006392 <_dtoa_r+0xa72>
 8006402:	9a01      	ldr	r2, [sp, #4]
 8006404:	9907      	ldr	r1, [sp, #28]
 8006406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800640a:	428a      	cmp	r2, r1
 800640c:	d02a      	beq.n	8006464 <_dtoa_r+0xb44>
 800640e:	4659      	mov	r1, fp
 8006410:	2300      	movs	r3, #0
 8006412:	220a      	movs	r2, #10
 8006414:	4620      	mov	r0, r4
 8006416:	f000 f8eb 	bl	80065f0 <__multadd>
 800641a:	45b8      	cmp	r8, r7
 800641c:	4683      	mov	fp, r0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 020a 	mov.w	r2, #10
 8006426:	4641      	mov	r1, r8
 8006428:	4620      	mov	r0, r4
 800642a:	d107      	bne.n	800643c <_dtoa_r+0xb1c>
 800642c:	f000 f8e0 	bl	80065f0 <__multadd>
 8006430:	4680      	mov	r8, r0
 8006432:	4607      	mov	r7, r0
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	3301      	adds	r3, #1
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	e775      	b.n	8006328 <_dtoa_r+0xa08>
 800643c:	f000 f8d8 	bl	80065f0 <__multadd>
 8006440:	4639      	mov	r1, r7
 8006442:	4680      	mov	r8, r0
 8006444:	2300      	movs	r3, #0
 8006446:	220a      	movs	r2, #10
 8006448:	4620      	mov	r0, r4
 800644a:	f000 f8d1 	bl	80065f0 <__multadd>
 800644e:	4607      	mov	r7, r0
 8006450:	e7f0      	b.n	8006434 <_dtoa_r+0xb14>
 8006452:	f1b9 0f00 	cmp.w	r9, #0
 8006456:	9a00      	ldr	r2, [sp, #0]
 8006458:	bfcc      	ite	gt
 800645a:	464d      	movgt	r5, r9
 800645c:	2501      	movle	r5, #1
 800645e:	4415      	add	r5, r2
 8006460:	f04f 0800 	mov.w	r8, #0
 8006464:	4659      	mov	r1, fp
 8006466:	2201      	movs	r2, #1
 8006468:	4620      	mov	r0, r4
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	f000 fa70 	bl	8006950 <__lshift>
 8006470:	4631      	mov	r1, r6
 8006472:	4683      	mov	fp, r0
 8006474:	f000 fad8 	bl	8006a28 <__mcmp>
 8006478:	2800      	cmp	r0, #0
 800647a:	dcb2      	bgt.n	80063e2 <_dtoa_r+0xac2>
 800647c:	d102      	bne.n	8006484 <_dtoa_r+0xb64>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d4ae      	bmi.n	80063e2 <_dtoa_r+0xac2>
 8006484:	462b      	mov	r3, r5
 8006486:	461d      	mov	r5, r3
 8006488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800648c:	2a30      	cmp	r2, #48	; 0x30
 800648e:	d0fa      	beq.n	8006486 <_dtoa_r+0xb66>
 8006490:	e6f7      	b.n	8006282 <_dtoa_r+0x962>
 8006492:	9a00      	ldr	r2, [sp, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d1a5      	bne.n	80063e4 <_dtoa_r+0xac4>
 8006498:	f10a 0a01 	add.w	sl, sl, #1
 800649c:	2331      	movs	r3, #49	; 0x31
 800649e:	e779      	b.n	8006394 <_dtoa_r+0xa74>
 80064a0:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <_dtoa_r+0xbd0>)
 80064a2:	f7ff baaf 	b.w	8005a04 <_dtoa_r+0xe4>
 80064a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f47f aa86 	bne.w	80059ba <_dtoa_r+0x9a>
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <_dtoa_r+0xbd4>)
 80064b0:	f7ff baa8 	b.w	8005a04 <_dtoa_r+0xe4>
 80064b4:	f1b9 0f00 	cmp.w	r9, #0
 80064b8:	dc03      	bgt.n	80064c2 <_dtoa_r+0xba2>
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f73f aec9 	bgt.w	8006254 <_dtoa_r+0x934>
 80064c2:	9d00      	ldr	r5, [sp, #0]
 80064c4:	4631      	mov	r1, r6
 80064c6:	4658      	mov	r0, fp
 80064c8:	f7ff f99e 	bl	8005808 <quorem>
 80064cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064d0:	f805 3b01 	strb.w	r3, [r5], #1
 80064d4:	9a00      	ldr	r2, [sp, #0]
 80064d6:	1aaa      	subs	r2, r5, r2
 80064d8:	4591      	cmp	r9, r2
 80064da:	ddba      	ble.n	8006452 <_dtoa_r+0xb32>
 80064dc:	4659      	mov	r1, fp
 80064de:	2300      	movs	r3, #0
 80064e0:	220a      	movs	r2, #10
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 f884 	bl	80065f0 <__multadd>
 80064e8:	4683      	mov	fp, r0
 80064ea:	e7eb      	b.n	80064c4 <_dtoa_r+0xba4>
 80064ec:	08007dd7 	.word	0x08007dd7
 80064f0:	08007d30 	.word	0x08007d30
 80064f4:	08007d54 	.word	0x08007d54

080064f8 <_localeconv_r>:
 80064f8:	4800      	ldr	r0, [pc, #0]	; (80064fc <_localeconv_r+0x4>)
 80064fa:	4770      	bx	lr
 80064fc:	20000160 	.word	0x20000160

08006500 <malloc>:
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <malloc+0xc>)
 8006502:	4601      	mov	r1, r0
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f000 bbef 	b.w	8006ce8 <_malloc_r>
 800650a:	bf00      	nop
 800650c:	2000000c 	.word	0x2000000c

08006510 <memcpy>:
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	f100 33ff 	add.w	r3, r0, #4294967295
 8006518:	d100      	bne.n	800651c <memcpy+0xc>
 800651a:	4770      	bx	lr
 800651c:	b510      	push	{r4, lr}
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006526:	4291      	cmp	r1, r2
 8006528:	d1f9      	bne.n	800651e <memcpy+0xe>
 800652a:	bd10      	pop	{r4, pc}

0800652c <_Balloc>:
 800652c:	b570      	push	{r4, r5, r6, lr}
 800652e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006530:	4604      	mov	r4, r0
 8006532:	460d      	mov	r5, r1
 8006534:	b976      	cbnz	r6, 8006554 <_Balloc+0x28>
 8006536:	2010      	movs	r0, #16
 8006538:	f7ff ffe2 	bl	8006500 <malloc>
 800653c:	4602      	mov	r2, r0
 800653e:	6260      	str	r0, [r4, #36]	; 0x24
 8006540:	b920      	cbnz	r0, 800654c <_Balloc+0x20>
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <_Balloc+0x78>)
 8006544:	4818      	ldr	r0, [pc, #96]	; (80065a8 <_Balloc+0x7c>)
 8006546:	2166      	movs	r1, #102	; 0x66
 8006548:	f000 fd94 	bl	8007074 <__assert_func>
 800654c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006550:	6006      	str	r6, [r0, #0]
 8006552:	60c6      	str	r6, [r0, #12]
 8006554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006556:	68f3      	ldr	r3, [r6, #12]
 8006558:	b183      	cbz	r3, 800657c <_Balloc+0x50>
 800655a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006562:	b9b8      	cbnz	r0, 8006594 <_Balloc+0x68>
 8006564:	2101      	movs	r1, #1
 8006566:	fa01 f605 	lsl.w	r6, r1, r5
 800656a:	1d72      	adds	r2, r6, #5
 800656c:	0092      	lsls	r2, r2, #2
 800656e:	4620      	mov	r0, r4
 8006570:	f000 fb5a 	bl	8006c28 <_calloc_r>
 8006574:	b160      	cbz	r0, 8006590 <_Balloc+0x64>
 8006576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800657a:	e00e      	b.n	800659a <_Balloc+0x6e>
 800657c:	2221      	movs	r2, #33	; 0x21
 800657e:	2104      	movs	r1, #4
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fb51 	bl	8006c28 <_calloc_r>
 8006586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006588:	60f0      	str	r0, [r6, #12]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e4      	bne.n	800655a <_Balloc+0x2e>
 8006590:	2000      	movs	r0, #0
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	6802      	ldr	r2, [r0, #0]
 8006596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800659a:	2300      	movs	r3, #0
 800659c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065a0:	e7f7      	b.n	8006592 <_Balloc+0x66>
 80065a2:	bf00      	nop
 80065a4:	08007d61 	.word	0x08007d61
 80065a8:	08007de8 	.word	0x08007de8

080065ac <_Bfree>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065b0:	4605      	mov	r5, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b976      	cbnz	r6, 80065d4 <_Bfree+0x28>
 80065b6:	2010      	movs	r0, #16
 80065b8:	f7ff ffa2 	bl	8006500 <malloc>
 80065bc:	4602      	mov	r2, r0
 80065be:	6268      	str	r0, [r5, #36]	; 0x24
 80065c0:	b920      	cbnz	r0, 80065cc <_Bfree+0x20>
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <_Bfree+0x3c>)
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <_Bfree+0x40>)
 80065c6:	218a      	movs	r1, #138	; 0x8a
 80065c8:	f000 fd54 	bl	8007074 <__assert_func>
 80065cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065d0:	6006      	str	r6, [r0, #0]
 80065d2:	60c6      	str	r6, [r0, #12]
 80065d4:	b13c      	cbz	r4, 80065e6 <_Bfree+0x3a>
 80065d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065d8:	6862      	ldr	r2, [r4, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065e0:	6021      	str	r1, [r4, #0]
 80065e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	08007d61 	.word	0x08007d61
 80065ec:	08007de8 	.word	0x08007de8

080065f0 <__multadd>:
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	690e      	ldr	r6, [r1, #16]
 80065f6:	4607      	mov	r7, r0
 80065f8:	4698      	mov	r8, r3
 80065fa:	460c      	mov	r4, r1
 80065fc:	f101 0014 	add.w	r0, r1, #20
 8006600:	2300      	movs	r3, #0
 8006602:	6805      	ldr	r5, [r0, #0]
 8006604:	b2a9      	uxth	r1, r5
 8006606:	fb02 8101 	mla	r1, r2, r1, r8
 800660a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800660e:	0c2d      	lsrs	r5, r5, #16
 8006610:	fb02 c505 	mla	r5, r2, r5, ip
 8006614:	b289      	uxth	r1, r1
 8006616:	3301      	adds	r3, #1
 8006618:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800661c:	429e      	cmp	r6, r3
 800661e:	f840 1b04 	str.w	r1, [r0], #4
 8006622:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006626:	dcec      	bgt.n	8006602 <__multadd+0x12>
 8006628:	f1b8 0f00 	cmp.w	r8, #0
 800662c:	d022      	beq.n	8006674 <__multadd+0x84>
 800662e:	68a3      	ldr	r3, [r4, #8]
 8006630:	42b3      	cmp	r3, r6
 8006632:	dc19      	bgt.n	8006668 <__multadd+0x78>
 8006634:	6861      	ldr	r1, [r4, #4]
 8006636:	4638      	mov	r0, r7
 8006638:	3101      	adds	r1, #1
 800663a:	f7ff ff77 	bl	800652c <_Balloc>
 800663e:	4605      	mov	r5, r0
 8006640:	b928      	cbnz	r0, 800664e <__multadd+0x5e>
 8006642:	4602      	mov	r2, r0
 8006644:	4b0d      	ldr	r3, [pc, #52]	; (800667c <__multadd+0x8c>)
 8006646:	480e      	ldr	r0, [pc, #56]	; (8006680 <__multadd+0x90>)
 8006648:	21b5      	movs	r1, #181	; 0xb5
 800664a:	f000 fd13 	bl	8007074 <__assert_func>
 800664e:	6922      	ldr	r2, [r4, #16]
 8006650:	3202      	adds	r2, #2
 8006652:	f104 010c 	add.w	r1, r4, #12
 8006656:	0092      	lsls	r2, r2, #2
 8006658:	300c      	adds	r0, #12
 800665a:	f7ff ff59 	bl	8006510 <memcpy>
 800665e:	4621      	mov	r1, r4
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff ffa3 	bl	80065ac <_Bfree>
 8006666:	462c      	mov	r4, r5
 8006668:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800666c:	3601      	adds	r6, #1
 800666e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006672:	6126      	str	r6, [r4, #16]
 8006674:	4620      	mov	r0, r4
 8006676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667a:	bf00      	nop
 800667c:	08007dd7 	.word	0x08007dd7
 8006680:	08007de8 	.word	0x08007de8

08006684 <__hi0bits>:
 8006684:	0c03      	lsrs	r3, r0, #16
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	b9d3      	cbnz	r3, 80066c0 <__hi0bits+0x3c>
 800668a:	0400      	lsls	r0, r0, #16
 800668c:	2310      	movs	r3, #16
 800668e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006692:	bf04      	itt	eq
 8006694:	0200      	lsleq	r0, r0, #8
 8006696:	3308      	addeq	r3, #8
 8006698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800669c:	bf04      	itt	eq
 800669e:	0100      	lsleq	r0, r0, #4
 80066a0:	3304      	addeq	r3, #4
 80066a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80066a6:	bf04      	itt	eq
 80066a8:	0080      	lsleq	r0, r0, #2
 80066aa:	3302      	addeq	r3, #2
 80066ac:	2800      	cmp	r0, #0
 80066ae:	db05      	blt.n	80066bc <__hi0bits+0x38>
 80066b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066b4:	f103 0301 	add.w	r3, r3, #1
 80066b8:	bf08      	it	eq
 80066ba:	2320      	moveq	r3, #32
 80066bc:	4618      	mov	r0, r3
 80066be:	4770      	bx	lr
 80066c0:	2300      	movs	r3, #0
 80066c2:	e7e4      	b.n	800668e <__hi0bits+0xa>

080066c4 <__lo0bits>:
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	f013 0207 	ands.w	r2, r3, #7
 80066ca:	4601      	mov	r1, r0
 80066cc:	d00b      	beq.n	80066e6 <__lo0bits+0x22>
 80066ce:	07da      	lsls	r2, r3, #31
 80066d0:	d424      	bmi.n	800671c <__lo0bits+0x58>
 80066d2:	0798      	lsls	r0, r3, #30
 80066d4:	bf49      	itett	mi
 80066d6:	085b      	lsrmi	r3, r3, #1
 80066d8:	089b      	lsrpl	r3, r3, #2
 80066da:	2001      	movmi	r0, #1
 80066dc:	600b      	strmi	r3, [r1, #0]
 80066de:	bf5c      	itt	pl
 80066e0:	600b      	strpl	r3, [r1, #0]
 80066e2:	2002      	movpl	r0, #2
 80066e4:	4770      	bx	lr
 80066e6:	b298      	uxth	r0, r3
 80066e8:	b9b0      	cbnz	r0, 8006718 <__lo0bits+0x54>
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	2010      	movs	r0, #16
 80066ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066f2:	bf04      	itt	eq
 80066f4:	0a1b      	lsreq	r3, r3, #8
 80066f6:	3008      	addeq	r0, #8
 80066f8:	071a      	lsls	r2, r3, #28
 80066fa:	bf04      	itt	eq
 80066fc:	091b      	lsreq	r3, r3, #4
 80066fe:	3004      	addeq	r0, #4
 8006700:	079a      	lsls	r2, r3, #30
 8006702:	bf04      	itt	eq
 8006704:	089b      	lsreq	r3, r3, #2
 8006706:	3002      	addeq	r0, #2
 8006708:	07da      	lsls	r2, r3, #31
 800670a:	d403      	bmi.n	8006714 <__lo0bits+0x50>
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	f100 0001 	add.w	r0, r0, #1
 8006712:	d005      	beq.n	8006720 <__lo0bits+0x5c>
 8006714:	600b      	str	r3, [r1, #0]
 8006716:	4770      	bx	lr
 8006718:	4610      	mov	r0, r2
 800671a:	e7e8      	b.n	80066ee <__lo0bits+0x2a>
 800671c:	2000      	movs	r0, #0
 800671e:	4770      	bx	lr
 8006720:	2020      	movs	r0, #32
 8006722:	4770      	bx	lr

08006724 <__i2b>:
 8006724:	b510      	push	{r4, lr}
 8006726:	460c      	mov	r4, r1
 8006728:	2101      	movs	r1, #1
 800672a:	f7ff feff 	bl	800652c <_Balloc>
 800672e:	4602      	mov	r2, r0
 8006730:	b928      	cbnz	r0, 800673e <__i2b+0x1a>
 8006732:	4b05      	ldr	r3, [pc, #20]	; (8006748 <__i2b+0x24>)
 8006734:	4805      	ldr	r0, [pc, #20]	; (800674c <__i2b+0x28>)
 8006736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800673a:	f000 fc9b 	bl	8007074 <__assert_func>
 800673e:	2301      	movs	r3, #1
 8006740:	6144      	str	r4, [r0, #20]
 8006742:	6103      	str	r3, [r0, #16]
 8006744:	bd10      	pop	{r4, pc}
 8006746:	bf00      	nop
 8006748:	08007dd7 	.word	0x08007dd7
 800674c:	08007de8 	.word	0x08007de8

08006750 <__multiply>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	4614      	mov	r4, r2
 8006756:	690a      	ldr	r2, [r1, #16]
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	bfb8      	it	lt
 800675e:	460b      	movlt	r3, r1
 8006760:	460d      	mov	r5, r1
 8006762:	bfbc      	itt	lt
 8006764:	4625      	movlt	r5, r4
 8006766:	461c      	movlt	r4, r3
 8006768:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800676c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006770:	68ab      	ldr	r3, [r5, #8]
 8006772:	6869      	ldr	r1, [r5, #4]
 8006774:	eb0a 0709 	add.w	r7, sl, r9
 8006778:	42bb      	cmp	r3, r7
 800677a:	b085      	sub	sp, #20
 800677c:	bfb8      	it	lt
 800677e:	3101      	addlt	r1, #1
 8006780:	f7ff fed4 	bl	800652c <_Balloc>
 8006784:	b930      	cbnz	r0, 8006794 <__multiply+0x44>
 8006786:	4602      	mov	r2, r0
 8006788:	4b42      	ldr	r3, [pc, #264]	; (8006894 <__multiply+0x144>)
 800678a:	4843      	ldr	r0, [pc, #268]	; (8006898 <__multiply+0x148>)
 800678c:	f240 115d 	movw	r1, #349	; 0x15d
 8006790:	f000 fc70 	bl	8007074 <__assert_func>
 8006794:	f100 0614 	add.w	r6, r0, #20
 8006798:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800679c:	4633      	mov	r3, r6
 800679e:	2200      	movs	r2, #0
 80067a0:	4543      	cmp	r3, r8
 80067a2:	d31e      	bcc.n	80067e2 <__multiply+0x92>
 80067a4:	f105 0c14 	add.w	ip, r5, #20
 80067a8:	f104 0314 	add.w	r3, r4, #20
 80067ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80067b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80067b4:	9202      	str	r2, [sp, #8]
 80067b6:	ebac 0205 	sub.w	r2, ip, r5
 80067ba:	3a15      	subs	r2, #21
 80067bc:	f022 0203 	bic.w	r2, r2, #3
 80067c0:	3204      	adds	r2, #4
 80067c2:	f105 0115 	add.w	r1, r5, #21
 80067c6:	458c      	cmp	ip, r1
 80067c8:	bf38      	it	cc
 80067ca:	2204      	movcc	r2, #4
 80067cc:	9201      	str	r2, [sp, #4]
 80067ce:	9a02      	ldr	r2, [sp, #8]
 80067d0:	9303      	str	r3, [sp, #12]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d808      	bhi.n	80067e8 <__multiply+0x98>
 80067d6:	2f00      	cmp	r7, #0
 80067d8:	dc55      	bgt.n	8006886 <__multiply+0x136>
 80067da:	6107      	str	r7, [r0, #16]
 80067dc:	b005      	add	sp, #20
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	f843 2b04 	str.w	r2, [r3], #4
 80067e6:	e7db      	b.n	80067a0 <__multiply+0x50>
 80067e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80067ec:	f1ba 0f00 	cmp.w	sl, #0
 80067f0:	d020      	beq.n	8006834 <__multiply+0xe4>
 80067f2:	f105 0e14 	add.w	lr, r5, #20
 80067f6:	46b1      	mov	r9, r6
 80067f8:	2200      	movs	r2, #0
 80067fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067fe:	f8d9 b000 	ldr.w	fp, [r9]
 8006802:	b2a1      	uxth	r1, r4
 8006804:	fa1f fb8b 	uxth.w	fp, fp
 8006808:	fb0a b101 	mla	r1, sl, r1, fp
 800680c:	4411      	add	r1, r2
 800680e:	f8d9 2000 	ldr.w	r2, [r9]
 8006812:	0c24      	lsrs	r4, r4, #16
 8006814:	0c12      	lsrs	r2, r2, #16
 8006816:	fb0a 2404 	mla	r4, sl, r4, r2
 800681a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800681e:	b289      	uxth	r1, r1
 8006820:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006824:	45f4      	cmp	ip, lr
 8006826:	f849 1b04 	str.w	r1, [r9], #4
 800682a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800682e:	d8e4      	bhi.n	80067fa <__multiply+0xaa>
 8006830:	9901      	ldr	r1, [sp, #4]
 8006832:	5072      	str	r2, [r6, r1]
 8006834:	9a03      	ldr	r2, [sp, #12]
 8006836:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800683a:	3304      	adds	r3, #4
 800683c:	f1b9 0f00 	cmp.w	r9, #0
 8006840:	d01f      	beq.n	8006882 <__multiply+0x132>
 8006842:	6834      	ldr	r4, [r6, #0]
 8006844:	f105 0114 	add.w	r1, r5, #20
 8006848:	46b6      	mov	lr, r6
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	880a      	ldrh	r2, [r1, #0]
 8006850:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006854:	fb09 b202 	mla	r2, r9, r2, fp
 8006858:	4492      	add	sl, r2
 800685a:	b2a4      	uxth	r4, r4
 800685c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006860:	f84e 4b04 	str.w	r4, [lr], #4
 8006864:	f851 4b04 	ldr.w	r4, [r1], #4
 8006868:	f8be 2000 	ldrh.w	r2, [lr]
 800686c:	0c24      	lsrs	r4, r4, #16
 800686e:	fb09 2404 	mla	r4, r9, r4, r2
 8006872:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006876:	458c      	cmp	ip, r1
 8006878:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800687c:	d8e7      	bhi.n	800684e <__multiply+0xfe>
 800687e:	9a01      	ldr	r2, [sp, #4]
 8006880:	50b4      	str	r4, [r6, r2]
 8006882:	3604      	adds	r6, #4
 8006884:	e7a3      	b.n	80067ce <__multiply+0x7e>
 8006886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1a5      	bne.n	80067da <__multiply+0x8a>
 800688e:	3f01      	subs	r7, #1
 8006890:	e7a1      	b.n	80067d6 <__multiply+0x86>
 8006892:	bf00      	nop
 8006894:	08007dd7 	.word	0x08007dd7
 8006898:	08007de8 	.word	0x08007de8

0800689c <__pow5mult>:
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	4615      	mov	r5, r2
 80068a2:	f012 0203 	ands.w	r2, r2, #3
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	d007      	beq.n	80068bc <__pow5mult+0x20>
 80068ac:	4c25      	ldr	r4, [pc, #148]	; (8006944 <__pow5mult+0xa8>)
 80068ae:	3a01      	subs	r2, #1
 80068b0:	2300      	movs	r3, #0
 80068b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068b6:	f7ff fe9b 	bl	80065f0 <__multadd>
 80068ba:	4607      	mov	r7, r0
 80068bc:	10ad      	asrs	r5, r5, #2
 80068be:	d03d      	beq.n	800693c <__pow5mult+0xa0>
 80068c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068c2:	b97c      	cbnz	r4, 80068e4 <__pow5mult+0x48>
 80068c4:	2010      	movs	r0, #16
 80068c6:	f7ff fe1b 	bl	8006500 <malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6270      	str	r0, [r6, #36]	; 0x24
 80068ce:	b928      	cbnz	r0, 80068dc <__pow5mult+0x40>
 80068d0:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <__pow5mult+0xac>)
 80068d2:	481e      	ldr	r0, [pc, #120]	; (800694c <__pow5mult+0xb0>)
 80068d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068d8:	f000 fbcc 	bl	8007074 <__assert_func>
 80068dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068e0:	6004      	str	r4, [r0, #0]
 80068e2:	60c4      	str	r4, [r0, #12]
 80068e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068ec:	b94c      	cbnz	r4, 8006902 <__pow5mult+0x66>
 80068ee:	f240 2171 	movw	r1, #625	; 0x271
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff16 	bl	8006724 <__i2b>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80068fe:	4604      	mov	r4, r0
 8006900:	6003      	str	r3, [r0, #0]
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	07eb      	lsls	r3, r5, #31
 8006908:	d50a      	bpl.n	8006920 <__pow5mult+0x84>
 800690a:	4639      	mov	r1, r7
 800690c:	4622      	mov	r2, r4
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ff1e 	bl	8006750 <__multiply>
 8006914:	4639      	mov	r1, r7
 8006916:	4680      	mov	r8, r0
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff fe47 	bl	80065ac <_Bfree>
 800691e:	4647      	mov	r7, r8
 8006920:	106d      	asrs	r5, r5, #1
 8006922:	d00b      	beq.n	800693c <__pow5mult+0xa0>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	b938      	cbnz	r0, 8006938 <__pow5mult+0x9c>
 8006928:	4622      	mov	r2, r4
 800692a:	4621      	mov	r1, r4
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ff0f 	bl	8006750 <__multiply>
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	f8c0 9000 	str.w	r9, [r0]
 8006938:	4604      	mov	r4, r0
 800693a:	e7e4      	b.n	8006906 <__pow5mult+0x6a>
 800693c:	4638      	mov	r0, r7
 800693e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006942:	bf00      	nop
 8006944:	08007f38 	.word	0x08007f38
 8006948:	08007d61 	.word	0x08007d61
 800694c:	08007de8 	.word	0x08007de8

08006950 <__lshift>:
 8006950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	6849      	ldr	r1, [r1, #4]
 8006958:	6923      	ldr	r3, [r4, #16]
 800695a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	4607      	mov	r7, r0
 8006962:	4691      	mov	r9, r2
 8006964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006968:	f108 0601 	add.w	r6, r8, #1
 800696c:	42b3      	cmp	r3, r6
 800696e:	db0b      	blt.n	8006988 <__lshift+0x38>
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff fddb 	bl	800652c <_Balloc>
 8006976:	4605      	mov	r5, r0
 8006978:	b948      	cbnz	r0, 800698e <__lshift+0x3e>
 800697a:	4602      	mov	r2, r0
 800697c:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <__lshift+0xd0>)
 800697e:	4829      	ldr	r0, [pc, #164]	; (8006a24 <__lshift+0xd4>)
 8006980:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006984:	f000 fb76 	bl	8007074 <__assert_func>
 8006988:	3101      	adds	r1, #1
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	e7ee      	b.n	800696c <__lshift+0x1c>
 800698e:	2300      	movs	r3, #0
 8006990:	f100 0114 	add.w	r1, r0, #20
 8006994:	f100 0210 	add.w	r2, r0, #16
 8006998:	4618      	mov	r0, r3
 800699a:	4553      	cmp	r3, sl
 800699c:	db33      	blt.n	8006a06 <__lshift+0xb6>
 800699e:	6920      	ldr	r0, [r4, #16]
 80069a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069a4:	f104 0314 	add.w	r3, r4, #20
 80069a8:	f019 091f 	ands.w	r9, r9, #31
 80069ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069b4:	d02b      	beq.n	8006a0e <__lshift+0xbe>
 80069b6:	f1c9 0e20 	rsb	lr, r9, #32
 80069ba:	468a      	mov	sl, r1
 80069bc:	2200      	movs	r2, #0
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	fa00 f009 	lsl.w	r0, r0, r9
 80069c4:	4302      	orrs	r2, r0
 80069c6:	f84a 2b04 	str.w	r2, [sl], #4
 80069ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ce:	459c      	cmp	ip, r3
 80069d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069d4:	d8f3      	bhi.n	80069be <__lshift+0x6e>
 80069d6:	ebac 0304 	sub.w	r3, ip, r4
 80069da:	3b15      	subs	r3, #21
 80069dc:	f023 0303 	bic.w	r3, r3, #3
 80069e0:	3304      	adds	r3, #4
 80069e2:	f104 0015 	add.w	r0, r4, #21
 80069e6:	4584      	cmp	ip, r0
 80069e8:	bf38      	it	cc
 80069ea:	2304      	movcc	r3, #4
 80069ec:	50ca      	str	r2, [r1, r3]
 80069ee:	b10a      	cbz	r2, 80069f4 <__lshift+0xa4>
 80069f0:	f108 0602 	add.w	r6, r8, #2
 80069f4:	3e01      	subs	r6, #1
 80069f6:	4638      	mov	r0, r7
 80069f8:	612e      	str	r6, [r5, #16]
 80069fa:	4621      	mov	r1, r4
 80069fc:	f7ff fdd6 	bl	80065ac <_Bfree>
 8006a00:	4628      	mov	r0, r5
 8006a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	e7c5      	b.n	800699a <__lshift+0x4a>
 8006a0e:	3904      	subs	r1, #4
 8006a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a18:	459c      	cmp	ip, r3
 8006a1a:	d8f9      	bhi.n	8006a10 <__lshift+0xc0>
 8006a1c:	e7ea      	b.n	80069f4 <__lshift+0xa4>
 8006a1e:	bf00      	nop
 8006a20:	08007dd7 	.word	0x08007dd7
 8006a24:	08007de8 	.word	0x08007de8

08006a28 <__mcmp>:
 8006a28:	b530      	push	{r4, r5, lr}
 8006a2a:	6902      	ldr	r2, [r0, #16]
 8006a2c:	690c      	ldr	r4, [r1, #16]
 8006a2e:	1b12      	subs	r2, r2, r4
 8006a30:	d10e      	bne.n	8006a50 <__mcmp+0x28>
 8006a32:	f100 0314 	add.w	r3, r0, #20
 8006a36:	3114      	adds	r1, #20
 8006a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a48:	42a5      	cmp	r5, r4
 8006a4a:	d003      	beq.n	8006a54 <__mcmp+0x2c>
 8006a4c:	d305      	bcc.n	8006a5a <__mcmp+0x32>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4610      	mov	r0, r2
 8006a52:	bd30      	pop	{r4, r5, pc}
 8006a54:	4283      	cmp	r3, r0
 8006a56:	d3f3      	bcc.n	8006a40 <__mcmp+0x18>
 8006a58:	e7fa      	b.n	8006a50 <__mcmp+0x28>
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	e7f7      	b.n	8006a50 <__mcmp+0x28>

08006a60 <__mdiff>:
 8006a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	4606      	mov	r6, r0
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	4617      	mov	r7, r2
 8006a6e:	f7ff ffdb 	bl	8006a28 <__mcmp>
 8006a72:	1e05      	subs	r5, r0, #0
 8006a74:	d110      	bne.n	8006a98 <__mdiff+0x38>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff fd57 	bl	800652c <_Balloc>
 8006a7e:	b930      	cbnz	r0, 8006a8e <__mdiff+0x2e>
 8006a80:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <__mdiff+0x108>)
 8006a82:	4602      	mov	r2, r0
 8006a84:	f240 2132 	movw	r1, #562	; 0x232
 8006a88:	4838      	ldr	r0, [pc, #224]	; (8006b6c <__mdiff+0x10c>)
 8006a8a:	f000 faf3 	bl	8007074 <__assert_func>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a98:	bfa4      	itt	ge
 8006a9a:	463b      	movge	r3, r7
 8006a9c:	4627      	movge	r7, r4
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	bfa6      	itte	ge
 8006aa4:	461c      	movge	r4, r3
 8006aa6:	2500      	movge	r5, #0
 8006aa8:	2501      	movlt	r5, #1
 8006aaa:	f7ff fd3f 	bl	800652c <_Balloc>
 8006aae:	b920      	cbnz	r0, 8006aba <__mdiff+0x5a>
 8006ab0:	4b2d      	ldr	r3, [pc, #180]	; (8006b68 <__mdiff+0x108>)
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ab8:	e7e6      	b.n	8006a88 <__mdiff+0x28>
 8006aba:	693e      	ldr	r6, [r7, #16]
 8006abc:	60c5      	str	r5, [r0, #12]
 8006abe:	6925      	ldr	r5, [r4, #16]
 8006ac0:	f107 0114 	add.w	r1, r7, #20
 8006ac4:	f104 0914 	add.w	r9, r4, #20
 8006ac8:	f100 0e14 	add.w	lr, r0, #20
 8006acc:	f107 0210 	add.w	r2, r7, #16
 8006ad0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ad4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ad8:	46f2      	mov	sl, lr
 8006ada:	2700      	movs	r7, #0
 8006adc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ae4:	fa1f f883 	uxth.w	r8, r3
 8006ae8:	fa17 f78b 	uxtah	r7, r7, fp
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	eba7 0808 	sub.w	r8, r7, r8
 8006af2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006af6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006afa:	fa1f f888 	uxth.w	r8, r8
 8006afe:	141f      	asrs	r7, r3, #16
 8006b00:	454d      	cmp	r5, r9
 8006b02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b06:	f84a 3b04 	str.w	r3, [sl], #4
 8006b0a:	d8e7      	bhi.n	8006adc <__mdiff+0x7c>
 8006b0c:	1b2b      	subs	r3, r5, r4
 8006b0e:	3b15      	subs	r3, #21
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	3304      	adds	r3, #4
 8006b16:	3415      	adds	r4, #21
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	bf38      	it	cc
 8006b1c:	2304      	movcc	r3, #4
 8006b1e:	4419      	add	r1, r3
 8006b20:	4473      	add	r3, lr
 8006b22:	469e      	mov	lr, r3
 8006b24:	460d      	mov	r5, r1
 8006b26:	4565      	cmp	r5, ip
 8006b28:	d30e      	bcc.n	8006b48 <__mdiff+0xe8>
 8006b2a:	f10c 0203 	add.w	r2, ip, #3
 8006b2e:	1a52      	subs	r2, r2, r1
 8006b30:	f022 0203 	bic.w	r2, r2, #3
 8006b34:	3903      	subs	r1, #3
 8006b36:	458c      	cmp	ip, r1
 8006b38:	bf38      	it	cc
 8006b3a:	2200      	movcc	r2, #0
 8006b3c:	441a      	add	r2, r3
 8006b3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b42:	b17b      	cbz	r3, 8006b64 <__mdiff+0x104>
 8006b44:	6106      	str	r6, [r0, #16]
 8006b46:	e7a5      	b.n	8006a94 <__mdiff+0x34>
 8006b48:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b4c:	fa17 f488 	uxtah	r4, r7, r8
 8006b50:	1422      	asrs	r2, r4, #16
 8006b52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006b56:	b2a4      	uxth	r4, r4
 8006b58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b5c:	f84e 4b04 	str.w	r4, [lr], #4
 8006b60:	1417      	asrs	r7, r2, #16
 8006b62:	e7e0      	b.n	8006b26 <__mdiff+0xc6>
 8006b64:	3e01      	subs	r6, #1
 8006b66:	e7ea      	b.n	8006b3e <__mdiff+0xde>
 8006b68:	08007dd7 	.word	0x08007dd7
 8006b6c:	08007de8 	.word	0x08007de8

08006b70 <__d2b>:
 8006b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b74:	4689      	mov	r9, r1
 8006b76:	2101      	movs	r1, #1
 8006b78:	ec57 6b10 	vmov	r6, r7, d0
 8006b7c:	4690      	mov	r8, r2
 8006b7e:	f7ff fcd5 	bl	800652c <_Balloc>
 8006b82:	4604      	mov	r4, r0
 8006b84:	b930      	cbnz	r0, 8006b94 <__d2b+0x24>
 8006b86:	4602      	mov	r2, r0
 8006b88:	4b25      	ldr	r3, [pc, #148]	; (8006c20 <__d2b+0xb0>)
 8006b8a:	4826      	ldr	r0, [pc, #152]	; (8006c24 <__d2b+0xb4>)
 8006b8c:	f240 310a 	movw	r1, #778	; 0x30a
 8006b90:	f000 fa70 	bl	8007074 <__assert_func>
 8006b94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b9c:	bb35      	cbnz	r5, 8006bec <__d2b+0x7c>
 8006b9e:	2e00      	cmp	r6, #0
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	d028      	beq.n	8006bf6 <__d2b+0x86>
 8006ba4:	4668      	mov	r0, sp
 8006ba6:	9600      	str	r6, [sp, #0]
 8006ba8:	f7ff fd8c 	bl	80066c4 <__lo0bits>
 8006bac:	9900      	ldr	r1, [sp, #0]
 8006bae:	b300      	cbz	r0, 8006bf2 <__d2b+0x82>
 8006bb0:	9a01      	ldr	r2, [sp, #4]
 8006bb2:	f1c0 0320 	rsb	r3, r0, #32
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	40c2      	lsrs	r2, r0
 8006bbe:	6163      	str	r3, [r4, #20]
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	61a3      	str	r3, [r4, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf14      	ite	ne
 8006bca:	2202      	movne	r2, #2
 8006bcc:	2201      	moveq	r2, #1
 8006bce:	6122      	str	r2, [r4, #16]
 8006bd0:	b1d5      	cbz	r5, 8006c08 <__d2b+0x98>
 8006bd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bd6:	4405      	add	r5, r0
 8006bd8:	f8c9 5000 	str.w	r5, [r9]
 8006bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006be0:	f8c8 0000 	str.w	r0, [r8]
 8006be4:	4620      	mov	r0, r4
 8006be6:	b003      	add	sp, #12
 8006be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf0:	e7d5      	b.n	8006b9e <__d2b+0x2e>
 8006bf2:	6161      	str	r1, [r4, #20]
 8006bf4:	e7e5      	b.n	8006bc2 <__d2b+0x52>
 8006bf6:	a801      	add	r0, sp, #4
 8006bf8:	f7ff fd64 	bl	80066c4 <__lo0bits>
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	6163      	str	r3, [r4, #20]
 8006c00:	2201      	movs	r2, #1
 8006c02:	6122      	str	r2, [r4, #16]
 8006c04:	3020      	adds	r0, #32
 8006c06:	e7e3      	b.n	8006bd0 <__d2b+0x60>
 8006c08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c10:	f8c9 0000 	str.w	r0, [r9]
 8006c14:	6918      	ldr	r0, [r3, #16]
 8006c16:	f7ff fd35 	bl	8006684 <__hi0bits>
 8006c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c1e:	e7df      	b.n	8006be0 <__d2b+0x70>
 8006c20:	08007dd7 	.word	0x08007dd7
 8006c24:	08007de8 	.word	0x08007de8

08006c28 <_calloc_r>:
 8006c28:	b513      	push	{r0, r1, r4, lr}
 8006c2a:	434a      	muls	r2, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	f000 f85a 	bl	8006ce8 <_malloc_r>
 8006c34:	4604      	mov	r4, r0
 8006c36:	b118      	cbz	r0, 8006c40 <_calloc_r+0x18>
 8006c38:	9a01      	ldr	r2, [sp, #4]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f7fe f91e 	bl	8004e7c <memset>
 8006c40:	4620      	mov	r0, r4
 8006c42:	b002      	add	sp, #8
 8006c44:	bd10      	pop	{r4, pc}
	...

08006c48 <_free_r>:
 8006c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c4a:	2900      	cmp	r1, #0
 8006c4c:	d048      	beq.n	8006ce0 <_free_r+0x98>
 8006c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c52:	9001      	str	r0, [sp, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f1a1 0404 	sub.w	r4, r1, #4
 8006c5a:	bfb8      	it	lt
 8006c5c:	18e4      	addlt	r4, r4, r3
 8006c5e:	f000 fa65 	bl	800712c <__malloc_lock>
 8006c62:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <_free_r+0x9c>)
 8006c64:	9801      	ldr	r0, [sp, #4]
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	4615      	mov	r5, r2
 8006c6a:	b933      	cbnz	r3, 8006c7a <_free_r+0x32>
 8006c6c:	6063      	str	r3, [r4, #4]
 8006c6e:	6014      	str	r4, [r2, #0]
 8006c70:	b003      	add	sp, #12
 8006c72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c76:	f000 ba5f 	b.w	8007138 <__malloc_unlock>
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	d90b      	bls.n	8006c96 <_free_r+0x4e>
 8006c7e:	6821      	ldr	r1, [r4, #0]
 8006c80:	1862      	adds	r2, r4, r1
 8006c82:	4293      	cmp	r3, r2
 8006c84:	bf04      	itt	eq
 8006c86:	681a      	ldreq	r2, [r3, #0]
 8006c88:	685b      	ldreq	r3, [r3, #4]
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	bf04      	itt	eq
 8006c8e:	1852      	addeq	r2, r2, r1
 8006c90:	6022      	streq	r2, [r4, #0]
 8006c92:	602c      	str	r4, [r5, #0]
 8006c94:	e7ec      	b.n	8006c70 <_free_r+0x28>
 8006c96:	461a      	mov	r2, r3
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	b10b      	cbz	r3, 8006ca0 <_free_r+0x58>
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d9fa      	bls.n	8006c96 <_free_r+0x4e>
 8006ca0:	6811      	ldr	r1, [r2, #0]
 8006ca2:	1855      	adds	r5, r2, r1
 8006ca4:	42a5      	cmp	r5, r4
 8006ca6:	d10b      	bne.n	8006cc0 <_free_r+0x78>
 8006ca8:	6824      	ldr	r4, [r4, #0]
 8006caa:	4421      	add	r1, r4
 8006cac:	1854      	adds	r4, r2, r1
 8006cae:	42a3      	cmp	r3, r4
 8006cb0:	6011      	str	r1, [r2, #0]
 8006cb2:	d1dd      	bne.n	8006c70 <_free_r+0x28>
 8006cb4:	681c      	ldr	r4, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	6053      	str	r3, [r2, #4]
 8006cba:	4421      	add	r1, r4
 8006cbc:	6011      	str	r1, [r2, #0]
 8006cbe:	e7d7      	b.n	8006c70 <_free_r+0x28>
 8006cc0:	d902      	bls.n	8006cc8 <_free_r+0x80>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	6003      	str	r3, [r0, #0]
 8006cc6:	e7d3      	b.n	8006c70 <_free_r+0x28>
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf04      	itt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	bf04      	itt	eq
 8006cd8:	1949      	addeq	r1, r1, r5
 8006cda:	6021      	streq	r1, [r4, #0]
 8006cdc:	6054      	str	r4, [r2, #4]
 8006cde:	e7c7      	b.n	8006c70 <_free_r+0x28>
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bd30      	pop	{r4, r5, pc}
 8006ce4:	20000224 	.word	0x20000224

08006ce8 <_malloc_r>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	1ccd      	adds	r5, r1, #3
 8006cec:	f025 0503 	bic.w	r5, r5, #3
 8006cf0:	3508      	adds	r5, #8
 8006cf2:	2d0c      	cmp	r5, #12
 8006cf4:	bf38      	it	cc
 8006cf6:	250c      	movcc	r5, #12
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	db01      	blt.n	8006d02 <_malloc_r+0x1a>
 8006cfe:	42a9      	cmp	r1, r5
 8006d00:	d903      	bls.n	8006d0a <_malloc_r+0x22>
 8006d02:	230c      	movs	r3, #12
 8006d04:	6033      	str	r3, [r6, #0]
 8006d06:	2000      	movs	r0, #0
 8006d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d0a:	f000 fa0f 	bl	800712c <__malloc_lock>
 8006d0e:	4921      	ldr	r1, [pc, #132]	; (8006d94 <_malloc_r+0xac>)
 8006d10:	680a      	ldr	r2, [r1, #0]
 8006d12:	4614      	mov	r4, r2
 8006d14:	b99c      	cbnz	r4, 8006d3e <_malloc_r+0x56>
 8006d16:	4f20      	ldr	r7, [pc, #128]	; (8006d98 <_malloc_r+0xb0>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	b923      	cbnz	r3, 8006d26 <_malloc_r+0x3e>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f000 f998 	bl	8007054 <_sbrk_r>
 8006d24:	6038      	str	r0, [r7, #0]
 8006d26:	4629      	mov	r1, r5
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f000 f993 	bl	8007054 <_sbrk_r>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d123      	bne.n	8006d7a <_malloc_r+0x92>
 8006d32:	230c      	movs	r3, #12
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 f9fe 	bl	8007138 <__malloc_unlock>
 8006d3c:	e7e3      	b.n	8006d06 <_malloc_r+0x1e>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	1b5b      	subs	r3, r3, r5
 8006d42:	d417      	bmi.n	8006d74 <_malloc_r+0x8c>
 8006d44:	2b0b      	cmp	r3, #11
 8006d46:	d903      	bls.n	8006d50 <_malloc_r+0x68>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	441c      	add	r4, r3
 8006d4c:	6025      	str	r5, [r4, #0]
 8006d4e:	e004      	b.n	8006d5a <_malloc_r+0x72>
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	42a2      	cmp	r2, r4
 8006d54:	bf0c      	ite	eq
 8006d56:	600b      	streq	r3, [r1, #0]
 8006d58:	6053      	strne	r3, [r2, #4]
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f000 f9ec 	bl	8007138 <__malloc_unlock>
 8006d60:	f104 000b 	add.w	r0, r4, #11
 8006d64:	1d23      	adds	r3, r4, #4
 8006d66:	f020 0007 	bic.w	r0, r0, #7
 8006d6a:	1ac2      	subs	r2, r0, r3
 8006d6c:	d0cc      	beq.n	8006d08 <_malloc_r+0x20>
 8006d6e:	1a1b      	subs	r3, r3, r0
 8006d70:	50a3      	str	r3, [r4, r2]
 8006d72:	e7c9      	b.n	8006d08 <_malloc_r+0x20>
 8006d74:	4622      	mov	r2, r4
 8006d76:	6864      	ldr	r4, [r4, #4]
 8006d78:	e7cc      	b.n	8006d14 <_malloc_r+0x2c>
 8006d7a:	1cc4      	adds	r4, r0, #3
 8006d7c:	f024 0403 	bic.w	r4, r4, #3
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d0e3      	beq.n	8006d4c <_malloc_r+0x64>
 8006d84:	1a21      	subs	r1, r4, r0
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 f964 	bl	8007054 <_sbrk_r>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d1dd      	bne.n	8006d4c <_malloc_r+0x64>
 8006d90:	e7cf      	b.n	8006d32 <_malloc_r+0x4a>
 8006d92:	bf00      	nop
 8006d94:	20000224 	.word	0x20000224
 8006d98:	20000228 	.word	0x20000228

08006d9c <__ssputs_r>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	688e      	ldr	r6, [r1, #8]
 8006da2:	429e      	cmp	r6, r3
 8006da4:	4682      	mov	sl, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	4690      	mov	r8, r2
 8006daa:	461f      	mov	r7, r3
 8006dac:	d838      	bhi.n	8006e20 <__ssputs_r+0x84>
 8006dae:	898a      	ldrh	r2, [r1, #12]
 8006db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006db4:	d032      	beq.n	8006e1c <__ssputs_r+0x80>
 8006db6:	6825      	ldr	r5, [r4, #0]
 8006db8:	6909      	ldr	r1, [r1, #16]
 8006dba:	eba5 0901 	sub.w	r9, r5, r1
 8006dbe:	6965      	ldr	r5, [r4, #20]
 8006dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dc8:	3301      	adds	r3, #1
 8006dca:	444b      	add	r3, r9
 8006dcc:	106d      	asrs	r5, r5, #1
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	bf38      	it	cc
 8006dd2:	461d      	movcc	r5, r3
 8006dd4:	0553      	lsls	r3, r2, #21
 8006dd6:	d531      	bpl.n	8006e3c <__ssputs_r+0xa0>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7ff ff85 	bl	8006ce8 <_malloc_r>
 8006dde:	4606      	mov	r6, r0
 8006de0:	b950      	cbnz	r0, 8006df8 <__ssputs_r+0x5c>
 8006de2:	230c      	movs	r3, #12
 8006de4:	f8ca 3000 	str.w	r3, [sl]
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df8:	6921      	ldr	r1, [r4, #16]
 8006dfa:	464a      	mov	r2, r9
 8006dfc:	f7ff fb88 	bl	8006510 <memcpy>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	6126      	str	r6, [r4, #16]
 8006e0e:	6165      	str	r5, [r4, #20]
 8006e10:	444e      	add	r6, r9
 8006e12:	eba5 0509 	sub.w	r5, r5, r9
 8006e16:	6026      	str	r6, [r4, #0]
 8006e18:	60a5      	str	r5, [r4, #8]
 8006e1a:	463e      	mov	r6, r7
 8006e1c:	42be      	cmp	r6, r7
 8006e1e:	d900      	bls.n	8006e22 <__ssputs_r+0x86>
 8006e20:	463e      	mov	r6, r7
 8006e22:	4632      	mov	r2, r6
 8006e24:	6820      	ldr	r0, [r4, #0]
 8006e26:	4641      	mov	r1, r8
 8006e28:	f000 f966 	bl	80070f8 <memmove>
 8006e2c:	68a3      	ldr	r3, [r4, #8]
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	1b9b      	subs	r3, r3, r6
 8006e32:	4432      	add	r2, r6
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e7db      	b.n	8006df4 <__ssputs_r+0x58>
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	f000 f981 	bl	8007144 <_realloc_r>
 8006e42:	4606      	mov	r6, r0
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1e1      	bne.n	8006e0c <__ssputs_r+0x70>
 8006e48:	6921      	ldr	r1, [r4, #16]
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	f7ff fefc 	bl	8006c48 <_free_r>
 8006e50:	e7c7      	b.n	8006de2 <__ssputs_r+0x46>
	...

08006e54 <_svfiprintf_r>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4698      	mov	r8, r3
 8006e5a:	898b      	ldrh	r3, [r1, #12]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	b09d      	sub	sp, #116	; 0x74
 8006e60:	4607      	mov	r7, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	d50e      	bpl.n	8006e86 <_svfiprintf_r+0x32>
 8006e68:	690b      	ldr	r3, [r1, #16]
 8006e6a:	b963      	cbnz	r3, 8006e86 <_svfiprintf_r+0x32>
 8006e6c:	2140      	movs	r1, #64	; 0x40
 8006e6e:	f7ff ff3b 	bl	8006ce8 <_malloc_r>
 8006e72:	6028      	str	r0, [r5, #0]
 8006e74:	6128      	str	r0, [r5, #16]
 8006e76:	b920      	cbnz	r0, 8006e82 <_svfiprintf_r+0x2e>
 8006e78:	230c      	movs	r3, #12
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	e0d1      	b.n	8007026 <_svfiprintf_r+0x1d2>
 8006e82:	2340      	movs	r3, #64	; 0x40
 8006e84:	616b      	str	r3, [r5, #20]
 8006e86:	2300      	movs	r3, #0
 8006e88:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8a:	2320      	movs	r3, #32
 8006e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e94:	2330      	movs	r3, #48	; 0x30
 8006e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007040 <_svfiprintf_r+0x1ec>
 8006e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e9e:	f04f 0901 	mov.w	r9, #1
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eaa:	b10a      	cbz	r2, 8006eb0 <_svfiprintf_r+0x5c>
 8006eac:	2a25      	cmp	r2, #37	; 0x25
 8006eae:	d1f9      	bne.n	8006ea4 <_svfiprintf_r+0x50>
 8006eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb4:	d00b      	beq.n	8006ece <_svfiprintf_r+0x7a>
 8006eb6:	465b      	mov	r3, fp
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff ff6d 	bl	8006d9c <__ssputs_r>
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f000 80aa 	beq.w	800701c <_svfiprintf_r+0x1c8>
 8006ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eca:	445a      	add	r2, fp
 8006ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ece:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80a2 	beq.w	800701c <_svfiprintf_r+0x1c8>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ee2:	f10a 0a01 	add.w	sl, sl, #1
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	9307      	str	r3, [sp, #28]
 8006eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eee:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef0:	4654      	mov	r4, sl
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef8:	4851      	ldr	r0, [pc, #324]	; (8007040 <_svfiprintf_r+0x1ec>)
 8006efa:	f7f9 f991 	bl	8000220 <memchr>
 8006efe:	9a04      	ldr	r2, [sp, #16]
 8006f00:	b9d8      	cbnz	r0, 8006f3a <_svfiprintf_r+0xe6>
 8006f02:	06d0      	lsls	r0, r2, #27
 8006f04:	bf44      	itt	mi
 8006f06:	2320      	movmi	r3, #32
 8006f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0c:	0711      	lsls	r1, r2, #28
 8006f0e:	bf44      	itt	mi
 8006f10:	232b      	movmi	r3, #43	; 0x2b
 8006f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f16:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f1c:	d015      	beq.n	8006f4a <_svfiprintf_r+0xf6>
 8006f1e:	9a07      	ldr	r2, [sp, #28]
 8006f20:	4654      	mov	r4, sl
 8006f22:	2000      	movs	r0, #0
 8006f24:	f04f 0c0a 	mov.w	ip, #10
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f2e:	3b30      	subs	r3, #48	; 0x30
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d94e      	bls.n	8006fd2 <_svfiprintf_r+0x17e>
 8006f34:	b1b0      	cbz	r0, 8006f64 <_svfiprintf_r+0x110>
 8006f36:	9207      	str	r2, [sp, #28]
 8006f38:	e014      	b.n	8006f64 <_svfiprintf_r+0x110>
 8006f3a:	eba0 0308 	sub.w	r3, r0, r8
 8006f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f42:	4313      	orrs	r3, r2
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	46a2      	mov	sl, r4
 8006f48:	e7d2      	b.n	8006ef0 <_svfiprintf_r+0x9c>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	1d19      	adds	r1, r3, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	9103      	str	r1, [sp, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfbb      	ittet	lt
 8006f56:	425b      	neglt	r3, r3
 8006f58:	f042 0202 	orrlt.w	r2, r2, #2
 8006f5c:	9307      	strge	r3, [sp, #28]
 8006f5e:	9307      	strlt	r3, [sp, #28]
 8006f60:	bfb8      	it	lt
 8006f62:	9204      	strlt	r2, [sp, #16]
 8006f64:	7823      	ldrb	r3, [r4, #0]
 8006f66:	2b2e      	cmp	r3, #46	; 0x2e
 8006f68:	d10c      	bne.n	8006f84 <_svfiprintf_r+0x130>
 8006f6a:	7863      	ldrb	r3, [r4, #1]
 8006f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f6e:	d135      	bne.n	8006fdc <_svfiprintf_r+0x188>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9203      	str	r2, [sp, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfb8      	it	lt
 8006f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f80:	3402      	adds	r4, #2
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007050 <_svfiprintf_r+0x1fc>
 8006f88:	7821      	ldrb	r1, [r4, #0]
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	f7f9 f947 	bl	8000220 <memchr>
 8006f92:	b140      	cbz	r0, 8006fa6 <_svfiprintf_r+0x152>
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	eba0 000a 	sub.w	r0, r0, sl
 8006f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	4303      	orrs	r3, r0
 8006fa2:	3401      	adds	r4, #1
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006faa:	4826      	ldr	r0, [pc, #152]	; (8007044 <_svfiprintf_r+0x1f0>)
 8006fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb0:	2206      	movs	r2, #6
 8006fb2:	f7f9 f935 	bl	8000220 <memchr>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d038      	beq.n	800702c <_svfiprintf_r+0x1d8>
 8006fba:	4b23      	ldr	r3, [pc, #140]	; (8007048 <_svfiprintf_r+0x1f4>)
 8006fbc:	bb1b      	cbnz	r3, 8007006 <_svfiprintf_r+0x1b2>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	4433      	add	r3, r6
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	e767      	b.n	8006ea2 <_svfiprintf_r+0x4e>
 8006fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	2001      	movs	r0, #1
 8006fda:	e7a5      	b.n	8006f28 <_svfiprintf_r+0xd4>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	3401      	adds	r4, #1
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 0c0a 	mov.w	ip, #10
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fee:	3a30      	subs	r2, #48	; 0x30
 8006ff0:	2a09      	cmp	r2, #9
 8006ff2:	d903      	bls.n	8006ffc <_svfiprintf_r+0x1a8>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0c5      	beq.n	8006f84 <_svfiprintf_r+0x130>
 8006ff8:	9105      	str	r1, [sp, #20]
 8006ffa:	e7c3      	b.n	8006f84 <_svfiprintf_r+0x130>
 8006ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007000:	4604      	mov	r4, r0
 8007002:	2301      	movs	r3, #1
 8007004:	e7f0      	b.n	8006fe8 <_svfiprintf_r+0x194>
 8007006:	ab03      	add	r3, sp, #12
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	462a      	mov	r2, r5
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <_svfiprintf_r+0x1f8>)
 800700e:	a904      	add	r1, sp, #16
 8007010:	4638      	mov	r0, r7
 8007012:	f7fd ffdb 	bl	8004fcc <_printf_float>
 8007016:	1c42      	adds	r2, r0, #1
 8007018:	4606      	mov	r6, r0
 800701a:	d1d6      	bne.n	8006fca <_svfiprintf_r+0x176>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	f53f af2c 	bmi.w	8006e7c <_svfiprintf_r+0x28>
 8007024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007026:	b01d      	add	sp, #116	; 0x74
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	462a      	mov	r2, r5
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <_svfiprintf_r+0x1f8>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4638      	mov	r0, r7
 8007038:	f7fe fa6c 	bl	8005514 <_printf_i>
 800703c:	e7eb      	b.n	8007016 <_svfiprintf_r+0x1c2>
 800703e:	bf00      	nop
 8007040:	08007f44 	.word	0x08007f44
 8007044:	08007f4e 	.word	0x08007f4e
 8007048:	08004fcd 	.word	0x08004fcd
 800704c:	08006d9d 	.word	0x08006d9d
 8007050:	08007f4a 	.word	0x08007f4a

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_sbrk_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f000 fe14 	bl	8007c8c <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20000438 	.word	0x20000438

08007074 <__assert_func>:
 8007074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007076:	4614      	mov	r4, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <__assert_func+0x2c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	68d8      	ldr	r0, [r3, #12]
 8007082:	b14c      	cbz	r4, 8007098 <__assert_func+0x24>
 8007084:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <__assert_func+0x30>)
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800708c:	4906      	ldr	r1, [pc, #24]	; (80070a8 <__assert_func+0x34>)
 800708e:	462b      	mov	r3, r5
 8007090:	f000 f80e 	bl	80070b0 <fiprintf>
 8007094:	f000 faa4 	bl	80075e0 <abort>
 8007098:	4b04      	ldr	r3, [pc, #16]	; (80070ac <__assert_func+0x38>)
 800709a:	461c      	mov	r4, r3
 800709c:	e7f3      	b.n	8007086 <__assert_func+0x12>
 800709e:	bf00      	nop
 80070a0:	2000000c 	.word	0x2000000c
 80070a4:	08007f55 	.word	0x08007f55
 80070a8:	08007f62 	.word	0x08007f62
 80070ac:	08007f90 	.word	0x08007f90

080070b0 <fiprintf>:
 80070b0:	b40e      	push	{r1, r2, r3}
 80070b2:	b503      	push	{r0, r1, lr}
 80070b4:	4601      	mov	r1, r0
 80070b6:	ab03      	add	r3, sp, #12
 80070b8:	4805      	ldr	r0, [pc, #20]	; (80070d0 <fiprintf+0x20>)
 80070ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	f000 f88f 	bl	80071e4 <_vfiprintf_r>
 80070c6:	b002      	add	sp, #8
 80070c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070cc:	b003      	add	sp, #12
 80070ce:	4770      	bx	lr
 80070d0:	2000000c 	.word	0x2000000c

080070d4 <__ascii_mbtowc>:
 80070d4:	b082      	sub	sp, #8
 80070d6:	b901      	cbnz	r1, 80070da <__ascii_mbtowc+0x6>
 80070d8:	a901      	add	r1, sp, #4
 80070da:	b142      	cbz	r2, 80070ee <__ascii_mbtowc+0x1a>
 80070dc:	b14b      	cbz	r3, 80070f2 <__ascii_mbtowc+0x1e>
 80070de:	7813      	ldrb	r3, [r2, #0]
 80070e0:	600b      	str	r3, [r1, #0]
 80070e2:	7812      	ldrb	r2, [r2, #0]
 80070e4:	1e10      	subs	r0, r2, #0
 80070e6:	bf18      	it	ne
 80070e8:	2001      	movne	r0, #1
 80070ea:	b002      	add	sp, #8
 80070ec:	4770      	bx	lr
 80070ee:	4610      	mov	r0, r2
 80070f0:	e7fb      	b.n	80070ea <__ascii_mbtowc+0x16>
 80070f2:	f06f 0001 	mvn.w	r0, #1
 80070f6:	e7f8      	b.n	80070ea <__ascii_mbtowc+0x16>

080070f8 <memmove>:
 80070f8:	4288      	cmp	r0, r1
 80070fa:	b510      	push	{r4, lr}
 80070fc:	eb01 0402 	add.w	r4, r1, r2
 8007100:	d902      	bls.n	8007108 <memmove+0x10>
 8007102:	4284      	cmp	r4, r0
 8007104:	4623      	mov	r3, r4
 8007106:	d807      	bhi.n	8007118 <memmove+0x20>
 8007108:	1e43      	subs	r3, r0, #1
 800710a:	42a1      	cmp	r1, r4
 800710c:	d008      	beq.n	8007120 <memmove+0x28>
 800710e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007116:	e7f8      	b.n	800710a <memmove+0x12>
 8007118:	4402      	add	r2, r0
 800711a:	4601      	mov	r1, r0
 800711c:	428a      	cmp	r2, r1
 800711e:	d100      	bne.n	8007122 <memmove+0x2a>
 8007120:	bd10      	pop	{r4, pc}
 8007122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800712a:	e7f7      	b.n	800711c <memmove+0x24>

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_lock+0x8>)
 800712e:	f000 bc17 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	20000440 	.word	0x20000440

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <__malloc_unlock+0x8>)
 800713a:	f000 bc12 	b.w	8007962 <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	20000440 	.word	0x20000440

08007144 <_realloc_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4607      	mov	r7, r0
 8007148:	4614      	mov	r4, r2
 800714a:	460e      	mov	r6, r1
 800714c:	b921      	cbnz	r1, 8007158 <_realloc_r+0x14>
 800714e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007152:	4611      	mov	r1, r2
 8007154:	f7ff bdc8 	b.w	8006ce8 <_malloc_r>
 8007158:	b922      	cbnz	r2, 8007164 <_realloc_r+0x20>
 800715a:	f7ff fd75 	bl	8006c48 <_free_r>
 800715e:	4625      	mov	r5, r4
 8007160:	4628      	mov	r0, r5
 8007162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007164:	f000 fc62 	bl	8007a2c <_malloc_usable_size_r>
 8007168:	42a0      	cmp	r0, r4
 800716a:	d20f      	bcs.n	800718c <_realloc_r+0x48>
 800716c:	4621      	mov	r1, r4
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff fdba 	bl	8006ce8 <_malloc_r>
 8007174:	4605      	mov	r5, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d0f2      	beq.n	8007160 <_realloc_r+0x1c>
 800717a:	4631      	mov	r1, r6
 800717c:	4622      	mov	r2, r4
 800717e:	f7ff f9c7 	bl	8006510 <memcpy>
 8007182:	4631      	mov	r1, r6
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fd5f 	bl	8006c48 <_free_r>
 800718a:	e7e9      	b.n	8007160 <_realloc_r+0x1c>
 800718c:	4635      	mov	r5, r6
 800718e:	e7e7      	b.n	8007160 <_realloc_r+0x1c>

08007190 <__sfputc_r>:
 8007190:	6893      	ldr	r3, [r2, #8]
 8007192:	3b01      	subs	r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	b410      	push	{r4}
 8007198:	6093      	str	r3, [r2, #8]
 800719a:	da08      	bge.n	80071ae <__sfputc_r+0x1e>
 800719c:	6994      	ldr	r4, [r2, #24]
 800719e:	42a3      	cmp	r3, r4
 80071a0:	db01      	blt.n	80071a6 <__sfputc_r+0x16>
 80071a2:	290a      	cmp	r1, #10
 80071a4:	d103      	bne.n	80071ae <__sfputc_r+0x1e>
 80071a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071aa:	f000 b94b 	b.w	8007444 <__swbuf_r>
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	1c58      	adds	r0, r3, #1
 80071b2:	6010      	str	r0, [r2, #0]
 80071b4:	7019      	strb	r1, [r3, #0]
 80071b6:	4608      	mov	r0, r1
 80071b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071bc:	4770      	bx	lr

080071be <__sfputs_r>:
 80071be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c0:	4606      	mov	r6, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	18d5      	adds	r5, r2, r3
 80071c8:	42ac      	cmp	r4, r5
 80071ca:	d101      	bne.n	80071d0 <__sfputs_r+0x12>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e007      	b.n	80071e0 <__sfputs_r+0x22>
 80071d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d4:	463a      	mov	r2, r7
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff ffda 	bl	8007190 <__sfputc_r>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d1f3      	bne.n	80071c8 <__sfputs_r+0xa>
 80071e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071e4 <_vfiprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	460d      	mov	r5, r1
 80071ea:	b09d      	sub	sp, #116	; 0x74
 80071ec:	4614      	mov	r4, r2
 80071ee:	4698      	mov	r8, r3
 80071f0:	4606      	mov	r6, r0
 80071f2:	b118      	cbz	r0, 80071fc <_vfiprintf_r+0x18>
 80071f4:	6983      	ldr	r3, [r0, #24]
 80071f6:	b90b      	cbnz	r3, 80071fc <_vfiprintf_r+0x18>
 80071f8:	f000 fb14 	bl	8007824 <__sinit>
 80071fc:	4b89      	ldr	r3, [pc, #548]	; (8007424 <_vfiprintf_r+0x240>)
 80071fe:	429d      	cmp	r5, r3
 8007200:	d11b      	bne.n	800723a <_vfiprintf_r+0x56>
 8007202:	6875      	ldr	r5, [r6, #4]
 8007204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007206:	07d9      	lsls	r1, r3, #31
 8007208:	d405      	bmi.n	8007216 <_vfiprintf_r+0x32>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d402      	bmi.n	8007216 <_vfiprintf_r+0x32>
 8007210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007212:	f000 fba5 	bl	8007960 <__retarget_lock_acquire_recursive>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	071b      	lsls	r3, r3, #28
 800721a:	d501      	bpl.n	8007220 <_vfiprintf_r+0x3c>
 800721c:	692b      	ldr	r3, [r5, #16]
 800721e:	b9eb      	cbnz	r3, 800725c <_vfiprintf_r+0x78>
 8007220:	4629      	mov	r1, r5
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f96e 	bl	8007504 <__swsetup_r>
 8007228:	b1c0      	cbz	r0, 800725c <_vfiprintf_r+0x78>
 800722a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800722c:	07dc      	lsls	r4, r3, #31
 800722e:	d50e      	bpl.n	800724e <_vfiprintf_r+0x6a>
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	; 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <_vfiprintf_r+0x244>)
 800723c:	429d      	cmp	r5, r3
 800723e:	d101      	bne.n	8007244 <_vfiprintf_r+0x60>
 8007240:	68b5      	ldr	r5, [r6, #8]
 8007242:	e7df      	b.n	8007204 <_vfiprintf_r+0x20>
 8007244:	4b79      	ldr	r3, [pc, #484]	; (800742c <_vfiprintf_r+0x248>)
 8007246:	429d      	cmp	r5, r3
 8007248:	bf08      	it	eq
 800724a:	68f5      	ldreq	r5, [r6, #12]
 800724c:	e7da      	b.n	8007204 <_vfiprintf_r+0x20>
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	0598      	lsls	r0, r3, #22
 8007252:	d4ed      	bmi.n	8007230 <_vfiprintf_r+0x4c>
 8007254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007256:	f000 fb84 	bl	8007962 <__retarget_lock_release_recursive>
 800725a:	e7e9      	b.n	8007230 <_vfiprintf_r+0x4c>
 800725c:	2300      	movs	r3, #0
 800725e:	9309      	str	r3, [sp, #36]	; 0x24
 8007260:	2320      	movs	r3, #32
 8007262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007266:	f8cd 800c 	str.w	r8, [sp, #12]
 800726a:	2330      	movs	r3, #48	; 0x30
 800726c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007430 <_vfiprintf_r+0x24c>
 8007270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007274:	f04f 0901 	mov.w	r9, #1
 8007278:	4623      	mov	r3, r4
 800727a:	469a      	mov	sl, r3
 800727c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007280:	b10a      	cbz	r2, 8007286 <_vfiprintf_r+0xa2>
 8007282:	2a25      	cmp	r2, #37	; 0x25
 8007284:	d1f9      	bne.n	800727a <_vfiprintf_r+0x96>
 8007286:	ebba 0b04 	subs.w	fp, sl, r4
 800728a:	d00b      	beq.n	80072a4 <_vfiprintf_r+0xc0>
 800728c:	465b      	mov	r3, fp
 800728e:	4622      	mov	r2, r4
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ff93 	bl	80071be <__sfputs_r>
 8007298:	3001      	adds	r0, #1
 800729a:	f000 80aa 	beq.w	80073f2 <_vfiprintf_r+0x20e>
 800729e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a0:	445a      	add	r2, fp
 80072a2:	9209      	str	r2, [sp, #36]	; 0x24
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80a2 	beq.w	80073f2 <_vfiprintf_r+0x20e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f04f 32ff 	mov.w	r2, #4294967295
 80072b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072c4:	931a      	str	r3, [sp, #104]	; 0x68
 80072c6:	4654      	mov	r4, sl
 80072c8:	2205      	movs	r2, #5
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	4858      	ldr	r0, [pc, #352]	; (8007430 <_vfiprintf_r+0x24c>)
 80072d0:	f7f8 ffa6 	bl	8000220 <memchr>
 80072d4:	9a04      	ldr	r2, [sp, #16]
 80072d6:	b9d8      	cbnz	r0, 8007310 <_vfiprintf_r+0x12c>
 80072d8:	06d1      	lsls	r1, r2, #27
 80072da:	bf44      	itt	mi
 80072dc:	2320      	movmi	r3, #32
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e2:	0713      	lsls	r3, r2, #28
 80072e4:	bf44      	itt	mi
 80072e6:	232b      	movmi	r3, #43	; 0x2b
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ec:	f89a 3000 	ldrb.w	r3, [sl]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d015      	beq.n	8007320 <_vfiprintf_r+0x13c>
 80072f4:	9a07      	ldr	r2, [sp, #28]
 80072f6:	4654      	mov	r4, sl
 80072f8:	2000      	movs	r0, #0
 80072fa:	f04f 0c0a 	mov.w	ip, #10
 80072fe:	4621      	mov	r1, r4
 8007300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007304:	3b30      	subs	r3, #48	; 0x30
 8007306:	2b09      	cmp	r3, #9
 8007308:	d94e      	bls.n	80073a8 <_vfiprintf_r+0x1c4>
 800730a:	b1b0      	cbz	r0, 800733a <_vfiprintf_r+0x156>
 800730c:	9207      	str	r2, [sp, #28]
 800730e:	e014      	b.n	800733a <_vfiprintf_r+0x156>
 8007310:	eba0 0308 	sub.w	r3, r0, r8
 8007314:	fa09 f303 	lsl.w	r3, r9, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	46a2      	mov	sl, r4
 800731e:	e7d2      	b.n	80072c6 <_vfiprintf_r+0xe2>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	1d19      	adds	r1, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9103      	str	r1, [sp, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfbb      	ittet	lt
 800732c:	425b      	neglt	r3, r3
 800732e:	f042 0202 	orrlt.w	r2, r2, #2
 8007332:	9307      	strge	r3, [sp, #28]
 8007334:	9307      	strlt	r3, [sp, #28]
 8007336:	bfb8      	it	lt
 8007338:	9204      	strlt	r2, [sp, #16]
 800733a:	7823      	ldrb	r3, [r4, #0]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10c      	bne.n	800735a <_vfiprintf_r+0x176>
 8007340:	7863      	ldrb	r3, [r4, #1]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d135      	bne.n	80073b2 <_vfiprintf_r+0x1ce>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	9203      	str	r2, [sp, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	f04f 33ff 	movlt.w	r3, #4294967295
 8007356:	3402      	adds	r4, #2
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007440 <_vfiprintf_r+0x25c>
 800735e:	7821      	ldrb	r1, [r4, #0]
 8007360:	2203      	movs	r2, #3
 8007362:	4650      	mov	r0, sl
 8007364:	f7f8 ff5c 	bl	8000220 <memchr>
 8007368:	b140      	cbz	r0, 800737c <_vfiprintf_r+0x198>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	eba0 000a 	sub.w	r0, r0, sl
 8007370:	fa03 f000 	lsl.w	r0, r3, r0
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4303      	orrs	r3, r0
 8007378:	3401      	adds	r4, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007380:	482c      	ldr	r0, [pc, #176]	; (8007434 <_vfiprintf_r+0x250>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007386:	2206      	movs	r2, #6
 8007388:	f7f8 ff4a 	bl	8000220 <memchr>
 800738c:	2800      	cmp	r0, #0
 800738e:	d03f      	beq.n	8007410 <_vfiprintf_r+0x22c>
 8007390:	4b29      	ldr	r3, [pc, #164]	; (8007438 <_vfiprintf_r+0x254>)
 8007392:	bb1b      	cbnz	r3, 80073dc <_vfiprintf_r+0x1f8>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	3308      	adds	r3, #8
 800739e:	9303      	str	r3, [sp, #12]
 80073a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a2:	443b      	add	r3, r7
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	e767      	b.n	8007278 <_vfiprintf_r+0x94>
 80073a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ac:	460c      	mov	r4, r1
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7a5      	b.n	80072fe <_vfiprintf_r+0x11a>
 80073b2:	2300      	movs	r3, #0
 80073b4:	3401      	adds	r4, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0c0a 	mov.w	ip, #10
 80073be:	4620      	mov	r0, r4
 80073c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c4:	3a30      	subs	r2, #48	; 0x30
 80073c6:	2a09      	cmp	r2, #9
 80073c8:	d903      	bls.n	80073d2 <_vfiprintf_r+0x1ee>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0c5      	beq.n	800735a <_vfiprintf_r+0x176>
 80073ce:	9105      	str	r1, [sp, #20]
 80073d0:	e7c3      	b.n	800735a <_vfiprintf_r+0x176>
 80073d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d6:	4604      	mov	r4, r0
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f0      	b.n	80073be <_vfiprintf_r+0x1da>
 80073dc:	ab03      	add	r3, sp, #12
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	462a      	mov	r2, r5
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <_vfiprintf_r+0x258>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7fd fdf0 	bl	8004fcc <_printf_float>
 80073ec:	4607      	mov	r7, r0
 80073ee:	1c78      	adds	r0, r7, #1
 80073f0:	d1d6      	bne.n	80073a0 <_vfiprintf_r+0x1bc>
 80073f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f4:	07d9      	lsls	r1, r3, #31
 80073f6:	d405      	bmi.n	8007404 <_vfiprintf_r+0x220>
 80073f8:	89ab      	ldrh	r3, [r5, #12]
 80073fa:	059a      	lsls	r2, r3, #22
 80073fc:	d402      	bmi.n	8007404 <_vfiprintf_r+0x220>
 80073fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007400:	f000 faaf 	bl	8007962 <__retarget_lock_release_recursive>
 8007404:	89ab      	ldrh	r3, [r5, #12]
 8007406:	065b      	lsls	r3, r3, #25
 8007408:	f53f af12 	bmi.w	8007230 <_vfiprintf_r+0x4c>
 800740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740e:	e711      	b.n	8007234 <_vfiprintf_r+0x50>
 8007410:	ab03      	add	r3, sp, #12
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	462a      	mov	r2, r5
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <_vfiprintf_r+0x258>)
 8007418:	a904      	add	r1, sp, #16
 800741a:	4630      	mov	r0, r6
 800741c:	f7fe f87a 	bl	8005514 <_printf_i>
 8007420:	e7e4      	b.n	80073ec <_vfiprintf_r+0x208>
 8007422:	bf00      	nop
 8007424:	080080bc 	.word	0x080080bc
 8007428:	080080dc 	.word	0x080080dc
 800742c:	0800809c 	.word	0x0800809c
 8007430:	08007f44 	.word	0x08007f44
 8007434:	08007f4e 	.word	0x08007f4e
 8007438:	08004fcd 	.word	0x08004fcd
 800743c:	080071bf 	.word	0x080071bf
 8007440:	08007f4a 	.word	0x08007f4a

08007444 <__swbuf_r>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	460e      	mov	r6, r1
 8007448:	4614      	mov	r4, r2
 800744a:	4605      	mov	r5, r0
 800744c:	b118      	cbz	r0, 8007456 <__swbuf_r+0x12>
 800744e:	6983      	ldr	r3, [r0, #24]
 8007450:	b90b      	cbnz	r3, 8007456 <__swbuf_r+0x12>
 8007452:	f000 f9e7 	bl	8007824 <__sinit>
 8007456:	4b21      	ldr	r3, [pc, #132]	; (80074dc <__swbuf_r+0x98>)
 8007458:	429c      	cmp	r4, r3
 800745a:	d12b      	bne.n	80074b4 <__swbuf_r+0x70>
 800745c:	686c      	ldr	r4, [r5, #4]
 800745e:	69a3      	ldr	r3, [r4, #24]
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	071a      	lsls	r2, r3, #28
 8007466:	d52f      	bpl.n	80074c8 <__swbuf_r+0x84>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b36b      	cbz	r3, 80074c8 <__swbuf_r+0x84>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1ac0      	subs	r0, r0, r3
 8007472:	6963      	ldr	r3, [r4, #20]
 8007474:	b2f6      	uxtb	r6, r6
 8007476:	4283      	cmp	r3, r0
 8007478:	4637      	mov	r7, r6
 800747a:	dc04      	bgt.n	8007486 <__swbuf_r+0x42>
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f93c 	bl	80076fc <_fflush_r>
 8007484:	bb30      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	6022      	str	r2, [r4, #0]
 8007492:	701e      	strb	r6, [r3, #0]
 8007494:	6963      	ldr	r3, [r4, #20]
 8007496:	3001      	adds	r0, #1
 8007498:	4283      	cmp	r3, r0
 800749a:	d004      	beq.n	80074a6 <__swbuf_r+0x62>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	07db      	lsls	r3, r3, #31
 80074a0:	d506      	bpl.n	80074b0 <__swbuf_r+0x6c>
 80074a2:	2e0a      	cmp	r6, #10
 80074a4:	d104      	bne.n	80074b0 <__swbuf_r+0x6c>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f927 	bl	80076fc <_fflush_r>
 80074ae:	b988      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 80074b0:	4638      	mov	r0, r7
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <__swbuf_r+0x9c>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <__swbuf_r+0x7a>
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	e7cf      	b.n	800745e <__swbuf_r+0x1a>
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <__swbuf_r+0xa0>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68ec      	ldreq	r4, [r5, #12]
 80074c6:	e7ca      	b.n	800745e <__swbuf_r+0x1a>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f81a 	bl	8007504 <__swsetup_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d0cb      	beq.n	800746c <__swbuf_r+0x28>
 80074d4:	f04f 37ff 	mov.w	r7, #4294967295
 80074d8:	e7ea      	b.n	80074b0 <__swbuf_r+0x6c>
 80074da:	bf00      	nop
 80074dc:	080080bc 	.word	0x080080bc
 80074e0:	080080dc 	.word	0x080080dc
 80074e4:	0800809c 	.word	0x0800809c

080074e8 <__ascii_wctomb>:
 80074e8:	b149      	cbz	r1, 80074fe <__ascii_wctomb+0x16>
 80074ea:	2aff      	cmp	r2, #255	; 0xff
 80074ec:	bf85      	ittet	hi
 80074ee:	238a      	movhi	r3, #138	; 0x8a
 80074f0:	6003      	strhi	r3, [r0, #0]
 80074f2:	700a      	strbls	r2, [r1, #0]
 80074f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80074f8:	bf98      	it	ls
 80074fa:	2001      	movls	r0, #1
 80074fc:	4770      	bx	lr
 80074fe:	4608      	mov	r0, r1
 8007500:	4770      	bx	lr
	...

08007504 <__swsetup_r>:
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <__swsetup_r+0xcc>)
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b125      	cbz	r5, 800751a <__swsetup_r+0x16>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	b913      	cbnz	r3, 800751a <__swsetup_r+0x16>
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f985 	bl	8007824 <__sinit>
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <__swsetup_r+0xd0>)
 800751c:	429c      	cmp	r4, r3
 800751e:	d10f      	bne.n	8007540 <__swsetup_r+0x3c>
 8007520:	686c      	ldr	r4, [r5, #4]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007528:	0719      	lsls	r1, r3, #28
 800752a:	d42c      	bmi.n	8007586 <__swsetup_r+0x82>
 800752c:	06dd      	lsls	r5, r3, #27
 800752e:	d411      	bmi.n	8007554 <__swsetup_r+0x50>
 8007530:	2309      	movs	r3, #9
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e03e      	b.n	80075be <__swsetup_r+0xba>
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <__swsetup_r+0xd4>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swsetup_r+0x46>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7eb      	b.n	8007522 <__swsetup_r+0x1e>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__swsetup_r+0xd8>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7e6      	b.n	8007522 <__swsetup_r+0x1e>
 8007554:	0758      	lsls	r0, r3, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x7a>
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x6a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x66>
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fb6f 	bl	8006c48 <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	; 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x9a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x9a>
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f000 fa07 	bl	80079ac <__smakebuf_r>
 800759e:	89a0      	ldrh	r0, [r4, #12]
 80075a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a4:	f010 0301 	ands.w	r3, r0, #1
 80075a8:	d00a      	beq.n	80075c0 <__swsetup_r+0xbc>
 80075aa:	2300      	movs	r3, #0
 80075ac:	60a3      	str	r3, [r4, #8]
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	425b      	negs	r3, r3
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b943      	cbnz	r3, 80075ca <__swsetup_r+0xc6>
 80075b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075bc:	d1ba      	bne.n	8007534 <__swsetup_r+0x30>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	0781      	lsls	r1, r0, #30
 80075c2:	bf58      	it	pl
 80075c4:	6963      	ldrpl	r3, [r4, #20]
 80075c6:	60a3      	str	r3, [r4, #8]
 80075c8:	e7f4      	b.n	80075b4 <__swsetup_r+0xb0>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7f7      	b.n	80075be <__swsetup_r+0xba>
 80075ce:	bf00      	nop
 80075d0:	2000000c 	.word	0x2000000c
 80075d4:	080080bc 	.word	0x080080bc
 80075d8:	080080dc 	.word	0x080080dc
 80075dc:	0800809c 	.word	0x0800809c

080075e0 <abort>:
 80075e0:	b508      	push	{r3, lr}
 80075e2:	2006      	movs	r0, #6
 80075e4:	f000 fa52 	bl	8007a8c <raise>
 80075e8:	2001      	movs	r0, #1
 80075ea:	f000 fb65 	bl	8007cb8 <_exit>
	...

080075f0 <__sflush_r>:
 80075f0:	898a      	ldrh	r2, [r1, #12]
 80075f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	4605      	mov	r5, r0
 80075f8:	0710      	lsls	r0, r2, #28
 80075fa:	460c      	mov	r4, r1
 80075fc:	d458      	bmi.n	80076b0 <__sflush_r+0xc0>
 80075fe:	684b      	ldr	r3, [r1, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc05      	bgt.n	8007610 <__sflush_r+0x20>
 8007604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc02      	bgt.n	8007610 <__sflush_r+0x20>
 800760a:	2000      	movs	r0, #0
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007612:	2e00      	cmp	r6, #0
 8007614:	d0f9      	beq.n	800760a <__sflush_r+0x1a>
 8007616:	2300      	movs	r3, #0
 8007618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800761c:	682f      	ldr	r7, [r5, #0]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	d032      	beq.n	8007688 <__sflush_r+0x98>
 8007622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	075a      	lsls	r2, r3, #29
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x46>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	1ac0      	subs	r0, r0, r3
 800762e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007630:	b10b      	cbz	r3, 8007636 <__sflush_r+0x46>
 8007632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007634:	1ac0      	subs	r0, r0, r3
 8007636:	2300      	movs	r3, #0
 8007638:	4602      	mov	r2, r0
 800763a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	4628      	mov	r0, r5
 8007640:	47b0      	blx	r6
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	d106      	bne.n	8007656 <__sflush_r+0x66>
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	291d      	cmp	r1, #29
 800764c:	d82c      	bhi.n	80076a8 <__sflush_r+0xb8>
 800764e:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <__sflush_r+0x108>)
 8007650:	40ca      	lsrs	r2, r1
 8007652:	07d6      	lsls	r6, r2, #31
 8007654:	d528      	bpl.n	80076a8 <__sflush_r+0xb8>
 8007656:	2200      	movs	r2, #0
 8007658:	6062      	str	r2, [r4, #4]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	d504      	bpl.n	800766c <__sflush_r+0x7c>
 8007662:	1c42      	adds	r2, r0, #1
 8007664:	d101      	bne.n	800766a <__sflush_r+0x7a>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b903      	cbnz	r3, 800766c <__sflush_r+0x7c>
 800766a:	6560      	str	r0, [r4, #84]	; 0x54
 800766c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766e:	602f      	str	r7, [r5, #0]
 8007670:	2900      	cmp	r1, #0
 8007672:	d0ca      	beq.n	800760a <__sflush_r+0x1a>
 8007674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <__sflush_r+0x92>
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff fae3 	bl	8006c48 <_free_r>
 8007682:	2000      	movs	r0, #0
 8007684:	6360      	str	r0, [r4, #52]	; 0x34
 8007686:	e7c1      	b.n	800760c <__sflush_r+0x1c>
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	2301      	movs	r3, #1
 800768c:	4628      	mov	r0, r5
 800768e:	47b0      	blx	r6
 8007690:	1c41      	adds	r1, r0, #1
 8007692:	d1c7      	bne.n	8007624 <__sflush_r+0x34>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0c4      	beq.n	8007624 <__sflush_r+0x34>
 800769a:	2b1d      	cmp	r3, #29
 800769c:	d001      	beq.n	80076a2 <__sflush_r+0xb2>
 800769e:	2b16      	cmp	r3, #22
 80076a0:	d101      	bne.n	80076a6 <__sflush_r+0xb6>
 80076a2:	602f      	str	r7, [r5, #0]
 80076a4:	e7b1      	b.n	800760a <__sflush_r+0x1a>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	e7ad      	b.n	800760c <__sflush_r+0x1c>
 80076b0:	690f      	ldr	r7, [r1, #16]
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	d0a9      	beq.n	800760a <__sflush_r+0x1a>
 80076b6:	0793      	lsls	r3, r2, #30
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	600f      	str	r7, [r1, #0]
 80076c0:	bf18      	it	ne
 80076c2:	2300      	movne	r3, #0
 80076c4:	eba6 0807 	sub.w	r8, r6, r7
 80076c8:	608b      	str	r3, [r1, #8]
 80076ca:	f1b8 0f00 	cmp.w	r8, #0
 80076ce:	dd9c      	ble.n	800760a <__sflush_r+0x1a>
 80076d0:	6a21      	ldr	r1, [r4, #32]
 80076d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d4:	4643      	mov	r3, r8
 80076d6:	463a      	mov	r2, r7
 80076d8:	4628      	mov	r0, r5
 80076da:	47b0      	blx	r6
 80076dc:	2800      	cmp	r0, #0
 80076de:	dc06      	bgt.n	80076ee <__sflush_r+0xfe>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e78e      	b.n	800760c <__sflush_r+0x1c>
 80076ee:	4407      	add	r7, r0
 80076f0:	eba8 0800 	sub.w	r8, r8, r0
 80076f4:	e7e9      	b.n	80076ca <__sflush_r+0xda>
 80076f6:	bf00      	nop
 80076f8:	20400001 	.word	0x20400001

080076fc <_fflush_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	690b      	ldr	r3, [r1, #16]
 8007700:	4605      	mov	r5, r0
 8007702:	460c      	mov	r4, r1
 8007704:	b913      	cbnz	r3, 800770c <_fflush_r+0x10>
 8007706:	2500      	movs	r5, #0
 8007708:	4628      	mov	r0, r5
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	b118      	cbz	r0, 8007716 <_fflush_r+0x1a>
 800770e:	6983      	ldr	r3, [r0, #24]
 8007710:	b90b      	cbnz	r3, 8007716 <_fflush_r+0x1a>
 8007712:	f000 f887 	bl	8007824 <__sinit>
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <_fflush_r+0x6c>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d11b      	bne.n	8007754 <_fflush_r+0x58>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0ef      	beq.n	8007706 <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x3a>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x3a>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f000 f915 	bl	8007960 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff59 	bl	80075f0 <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e0      	bmi.n	8007708 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4dd      	bmi.n	8007708 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774e:	f000 f908 	bl	8007962 <__retarget_lock_release_recursive>
 8007752:	e7d9      	b.n	8007708 <_fflush_r+0xc>
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_fflush_r+0x70>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d101      	bne.n	800775e <_fflush_r+0x62>
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	e7df      	b.n	800771e <_fflush_r+0x22>
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <_fflush_r+0x74>)
 8007760:	429c      	cmp	r4, r3
 8007762:	bf08      	it	eq
 8007764:	68ec      	ldreq	r4, [r5, #12]
 8007766:	e7da      	b.n	800771e <_fflush_r+0x22>
 8007768:	080080bc 	.word	0x080080bc
 800776c:	080080dc 	.word	0x080080dc
 8007770:	0800809c 	.word	0x0800809c

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	; 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	; 0x5c
 8007792:	f7fd fb73 	bl	8004e7c <memset>
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <std+0x38>)
 8007798:	6263      	str	r3, [r4, #36]	; 0x24
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <std+0x3c>)
 800779c:	62a3      	str	r3, [r4, #40]	; 0x28
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <std+0x40>)
 80077a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <std+0x44>)
 80077a4:	6224      	str	r4, [r4, #32]
 80077a6:	6323      	str	r3, [r4, #48]	; 0x30
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	08007ac5 	.word	0x08007ac5
 80077b0:	08007ae7 	.word	0x08007ae7
 80077b4:	08007b1f 	.word	0x08007b1f
 80077b8:	08007b43 	.word	0x08007b43

080077bc <_cleanup_r>:
 80077bc:	4901      	ldr	r1, [pc, #4]	; (80077c4 <_cleanup_r+0x8>)
 80077be:	f000 b8af 	b.w	8007920 <_fwalk_reent>
 80077c2:	bf00      	nop
 80077c4:	080076fd 	.word	0x080076fd

080077c8 <__sfmoreglue>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	1e4a      	subs	r2, r1, #1
 80077cc:	2568      	movs	r5, #104	; 0x68
 80077ce:	4355      	muls	r5, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077d6:	f7ff fa87 	bl	8006ce8 <_malloc_r>
 80077da:	4604      	mov	r4, r0
 80077dc:	b140      	cbz	r0, 80077f0 <__sfmoreglue+0x28>
 80077de:	2100      	movs	r1, #0
 80077e0:	e9c0 1600 	strd	r1, r6, [r0]
 80077e4:	300c      	adds	r0, #12
 80077e6:	60a0      	str	r0, [r4, #8]
 80077e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077ec:	f7fd fb46 	bl	8004e7c <memset>
 80077f0:	4620      	mov	r0, r4
 80077f2:	bd70      	pop	{r4, r5, r6, pc}

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f000 b8b3 	b.w	8007960 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000444 	.word	0x20000444

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_release+0x8>)
 8007802:	f000 b8ae 	b.w	8007962 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000444 	.word	0x20000444

0800780c <__sinit_lock_acquire>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sinit_lock_acquire+0x8>)
 800780e:	f000 b8a7 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	2000043f 	.word	0x2000043f

08007818 <__sinit_lock_release>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__sinit_lock_release+0x8>)
 800781a:	f000 b8a2 	b.w	8007962 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	2000043f 	.word	0x2000043f

08007824 <__sinit>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	f7ff fff0 	bl	800780c <__sinit_lock_acquire>
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	b11b      	cbz	r3, 8007838 <__sinit+0x14>
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f7ff bff0 	b.w	8007818 <__sinit_lock_release>
 8007838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800783c:	6523      	str	r3, [r4, #80]	; 0x50
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <__sinit+0x68>)
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <__sinit+0x6c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	62a2      	str	r2, [r4, #40]	; 0x28
 8007846:	42a3      	cmp	r3, r4
 8007848:	bf04      	itt	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	61a3      	streq	r3, [r4, #24]
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f820 	bl	8007894 <__sfp>
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	4620      	mov	r0, r4
 8007858:	f000 f81c 	bl	8007894 <__sfp>
 800785c:	60a0      	str	r0, [r4, #8]
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f818 	bl	8007894 <__sfp>
 8007864:	2200      	movs	r2, #0
 8007866:	60e0      	str	r0, [r4, #12]
 8007868:	2104      	movs	r1, #4
 800786a:	6860      	ldr	r0, [r4, #4]
 800786c:	f7ff ff82 	bl	8007774 <std>
 8007870:	68a0      	ldr	r0, [r4, #8]
 8007872:	2201      	movs	r2, #1
 8007874:	2109      	movs	r1, #9
 8007876:	f7ff ff7d 	bl	8007774 <std>
 800787a:	68e0      	ldr	r0, [r4, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	2112      	movs	r1, #18
 8007880:	f7ff ff78 	bl	8007774 <std>
 8007884:	2301      	movs	r3, #1
 8007886:	61a3      	str	r3, [r4, #24]
 8007888:	e7d2      	b.n	8007830 <__sinit+0xc>
 800788a:	bf00      	nop
 800788c:	08007d1c 	.word	0x08007d1c
 8007890:	080077bd 	.word	0x080077bd

08007894 <__sfp>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4607      	mov	r7, r0
 8007898:	f7ff ffac 	bl	80077f4 <__sfp_lock_acquire>
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <__sfp+0x84>)
 800789e:	681e      	ldr	r6, [r3, #0]
 80078a0:	69b3      	ldr	r3, [r6, #24]
 80078a2:	b913      	cbnz	r3, 80078aa <__sfp+0x16>
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbd 	bl	8007824 <__sinit>
 80078aa:	3648      	adds	r6, #72	; 0x48
 80078ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	d503      	bpl.n	80078bc <__sfp+0x28>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	b30b      	cbz	r3, 80078fc <__sfp+0x68>
 80078b8:	6836      	ldr	r6, [r6, #0]
 80078ba:	e7f7      	b.n	80078ac <__sfp+0x18>
 80078bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c0:	b9d5      	cbnz	r5, 80078f8 <__sfp+0x64>
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <__sfp+0x88>)
 80078c4:	60e3      	str	r3, [r4, #12]
 80078c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ca:	6665      	str	r5, [r4, #100]	; 0x64
 80078cc:	f000 f847 	bl	800795e <__retarget_lock_init_recursive>
 80078d0:	f7ff ff96 	bl	8007800 <__sfp_lock_release>
 80078d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078dc:	6025      	str	r5, [r4, #0]
 80078de:	61a5      	str	r5, [r4, #24]
 80078e0:	2208      	movs	r2, #8
 80078e2:	4629      	mov	r1, r5
 80078e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078e8:	f7fd fac8 	bl	8004e7c <memset>
 80078ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f4:	4620      	mov	r0, r4
 80078f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f8:	3468      	adds	r4, #104	; 0x68
 80078fa:	e7d9      	b.n	80078b0 <__sfp+0x1c>
 80078fc:	2104      	movs	r1, #4
 80078fe:	4638      	mov	r0, r7
 8007900:	f7ff ff62 	bl	80077c8 <__sfmoreglue>
 8007904:	4604      	mov	r4, r0
 8007906:	6030      	str	r0, [r6, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d1d5      	bne.n	80078b8 <__sfp+0x24>
 800790c:	f7ff ff78 	bl	8007800 <__sfp_lock_release>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7ee      	b.n	80078f4 <__sfp+0x60>
 8007916:	bf00      	nop
 8007918:	08007d1c 	.word	0x08007d1c
 800791c:	ffff0001 	.word	0xffff0001

08007920 <_fwalk_reent>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4606      	mov	r6, r0
 8007926:	4688      	mov	r8, r1
 8007928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800792c:	2700      	movs	r7, #0
 800792e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007932:	f1b9 0901 	subs.w	r9, r9, #1
 8007936:	d505      	bpl.n	8007944 <_fwalk_reent+0x24>
 8007938:	6824      	ldr	r4, [r4, #0]
 800793a:	2c00      	cmp	r4, #0
 800793c:	d1f7      	bne.n	800792e <_fwalk_reent+0xe>
 800793e:	4638      	mov	r0, r7
 8007940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007944:	89ab      	ldrh	r3, [r5, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d907      	bls.n	800795a <_fwalk_reent+0x3a>
 800794a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800794e:	3301      	adds	r3, #1
 8007950:	d003      	beq.n	800795a <_fwalk_reent+0x3a>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	47c0      	blx	r8
 8007958:	4307      	orrs	r7, r0
 800795a:	3568      	adds	r5, #104	; 0x68
 800795c:	e7e9      	b.n	8007932 <_fwalk_reent+0x12>

0800795e <__retarget_lock_init_recursive>:
 800795e:	4770      	bx	lr

08007960 <__retarget_lock_acquire_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_release_recursive>:
 8007962:	4770      	bx	lr

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2900      	cmp	r1, #0
 800796e:	b096      	sub	sp, #88	; 0x58
 8007970:	4614      	mov	r4, r2
 8007972:	461d      	mov	r5, r3
 8007974:	da07      	bge.n	8007986 <__swhatbuf_r+0x22>
 8007976:	2300      	movs	r3, #0
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	89b3      	ldrh	r3, [r6, #12]
 800797c:	061a      	lsls	r2, r3, #24
 800797e:	d410      	bmi.n	80079a2 <__swhatbuf_r+0x3e>
 8007980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007984:	e00e      	b.n	80079a4 <__swhatbuf_r+0x40>
 8007986:	466a      	mov	r2, sp
 8007988:	f000 f902 	bl	8007b90 <_fstat_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	dbf2      	blt.n	8007976 <__swhatbuf_r+0x12>
 8007990:	9a01      	ldr	r2, [sp, #4]
 8007992:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007996:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800799a:	425a      	negs	r2, r3
 800799c:	415a      	adcs	r2, r3
 800799e:	602a      	str	r2, [r5, #0]
 80079a0:	e7ee      	b.n	8007980 <__swhatbuf_r+0x1c>
 80079a2:	2340      	movs	r3, #64	; 0x40
 80079a4:	2000      	movs	r0, #0
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	b016      	add	sp, #88	; 0x58
 80079aa:	bd70      	pop	{r4, r5, r6, pc}

080079ac <__smakebuf_r>:
 80079ac:	898b      	ldrh	r3, [r1, #12]
 80079ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b0:	079d      	lsls	r5, r3, #30
 80079b2:	4606      	mov	r6, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	d507      	bpl.n	80079c8 <__smakebuf_r+0x1c>
 80079b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	6123      	str	r3, [r4, #16]
 80079c0:	2301      	movs	r3, #1
 80079c2:	6163      	str	r3, [r4, #20]
 80079c4:	b002      	add	sp, #8
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	ab01      	add	r3, sp, #4
 80079ca:	466a      	mov	r2, sp
 80079cc:	f7ff ffca 	bl	8007964 <__swhatbuf_r>
 80079d0:	9900      	ldr	r1, [sp, #0]
 80079d2:	4605      	mov	r5, r0
 80079d4:	4630      	mov	r0, r6
 80079d6:	f7ff f987 	bl	8006ce8 <_malloc_r>
 80079da:	b948      	cbnz	r0, 80079f0 <__smakebuf_r+0x44>
 80079dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e0:	059a      	lsls	r2, r3, #22
 80079e2:	d4ef      	bmi.n	80079c4 <__smakebuf_r+0x18>
 80079e4:	f023 0303 	bic.w	r3, r3, #3
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	81a3      	strh	r3, [r4, #12]
 80079ee:	e7e3      	b.n	80079b8 <__smakebuf_r+0xc>
 80079f0:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <__smakebuf_r+0x7c>)
 80079f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	9b00      	ldr	r3, [sp, #0]
 8007a00:	6163      	str	r3, [r4, #20]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	6120      	str	r0, [r4, #16]
 8007a06:	b15b      	cbz	r3, 8007a20 <__smakebuf_r+0x74>
 8007a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 f8d1 	bl	8007bb4 <_isatty_r>
 8007a12:	b128      	cbz	r0, 8007a20 <__smakebuf_r+0x74>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	89a0      	ldrh	r0, [r4, #12]
 8007a22:	4305      	orrs	r5, r0
 8007a24:	81a5      	strh	r5, [r4, #12]
 8007a26:	e7cd      	b.n	80079c4 <__smakebuf_r+0x18>
 8007a28:	080077bd 	.word	0x080077bd

08007a2c <_malloc_usable_size_r>:
 8007a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a30:	1f18      	subs	r0, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bfbc      	itt	lt
 8007a36:	580b      	ldrlt	r3, [r1, r0]
 8007a38:	18c0      	addlt	r0, r0, r3
 8007a3a:	4770      	bx	lr

08007a3c <_raise_r>:
 8007a3c:	291f      	cmp	r1, #31
 8007a3e:	b538      	push	{r3, r4, r5, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	d904      	bls.n	8007a50 <_raise_r+0x14>
 8007a46:	2316      	movs	r3, #22
 8007a48:	6003      	str	r3, [r0, #0]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a52:	b112      	cbz	r2, 8007a5a <_raise_r+0x1e>
 8007a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a58:	b94b      	cbnz	r3, 8007a6e <_raise_r+0x32>
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f830 	bl	8007ac0 <_getpid_r>
 8007a60:	462a      	mov	r2, r5
 8007a62:	4601      	mov	r1, r0
 8007a64:	4620      	mov	r0, r4
 8007a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6a:	f000 b817 	b.w	8007a9c <_kill_r>
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d00a      	beq.n	8007a88 <_raise_r+0x4c>
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	d103      	bne.n	8007a7e <_raise_r+0x42>
 8007a76:	2316      	movs	r3, #22
 8007a78:	6003      	str	r3, [r0, #0]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e7e7      	b.n	8007a4e <_raise_r+0x12>
 8007a7e:	2400      	movs	r4, #0
 8007a80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a84:	4628      	mov	r0, r5
 8007a86:	4798      	blx	r3
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7e0      	b.n	8007a4e <_raise_r+0x12>

08007a8c <raise>:
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <raise+0xc>)
 8007a8e:	4601      	mov	r1, r0
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	f7ff bfd3 	b.w	8007a3c <_raise_r>
 8007a96:	bf00      	nop
 8007a98:	2000000c 	.word	0x2000000c

08007a9c <_kill_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	; (8007abc <_kill_r+0x20>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	602b      	str	r3, [r5, #0]
 8007aaa:	f000 f8d7 	bl	8007c5c <_kill>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	d102      	bne.n	8007ab8 <_kill_r+0x1c>
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	b103      	cbz	r3, 8007ab8 <_kill_r+0x1c>
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	20000438 	.word	0x20000438

08007ac0 <_getpid_r>:
 8007ac0:	f000 b8bc 	b.w	8007c3c <_getpid>

08007ac4 <__sread>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007acc:	f000 f894 	bl	8007bf8 <_read_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	bfab      	itete	ge
 8007ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad8:	181b      	addge	r3, r3, r0
 8007ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ade:	bfac      	ite	ge
 8007ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ae2:	81a3      	strhlt	r3, [r4, #12]
 8007ae4:	bd10      	pop	{r4, pc}

08007ae6 <__swrite>:
 8007ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	461f      	mov	r7, r3
 8007aec:	898b      	ldrh	r3, [r1, #12]
 8007aee:	05db      	lsls	r3, r3, #23
 8007af0:	4605      	mov	r5, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	4616      	mov	r6, r2
 8007af6:	d505      	bpl.n	8007b04 <__swrite+0x1e>
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	2302      	movs	r3, #2
 8007afe:	2200      	movs	r2, #0
 8007b00:	f000 f868 	bl	8007bd4 <_lseek_r>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	4632      	mov	r2, r6
 8007b12:	463b      	mov	r3, r7
 8007b14:	4628      	mov	r0, r5
 8007b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	f000 b817 	b.w	8007b4c <_write_r>

08007b1e <__sseek>:
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	460c      	mov	r4, r1
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 f855 	bl	8007bd4 <_lseek_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	bf15      	itete	ne
 8007b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b3a:	81a3      	strheq	r3, [r4, #12]
 8007b3c:	bf18      	it	ne
 8007b3e:	81a3      	strhne	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__sclose>:
 8007b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b46:	f000 b813 	b.w	8007b70 <_close_r>
	...

08007b4c <_write_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_write_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f000 f8a4 	bl	8007ca8 <_write>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_write_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_write_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000438 	.word	0x20000438

08007b70 <_close_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d06      	ldr	r5, [pc, #24]	; (8007b8c <_close_r+0x1c>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f000 f84e 	bl	8007c1c <_close>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_close_r+0x1a>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_close_r+0x1a>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20000438 	.word	0x20000438

08007b90 <_fstat_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_fstat_r+0x20>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	f000 f845 	bl	8007c2c <_fstat>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d102      	bne.n	8007bac <_fstat_r+0x1c>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	b103      	cbz	r3, 8007bac <_fstat_r+0x1c>
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000438 	.word	0x20000438

08007bb4 <_isatty_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_isatty_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f000 f844 	bl	8007c4c <_isatty>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_isatty_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_isatty_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20000438 	.word	0x20000438

08007bd4 <_lseek_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_lseek_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f000 f842 	bl	8007c6c <_lseek>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_lseek_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_lseek_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000438 	.word	0x20000438

08007bf8 <_read_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_read_r+0x20>)
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f000 f838 	bl	8007c7c <_read>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_read_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_read_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20000438 	.word	0x20000438

08007c1c <_close>:
 8007c1c:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <_close+0xc>)
 8007c1e:	2258      	movs	r2, #88	; 0x58
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295
 8007c26:	4770      	bx	lr
 8007c28:	20000438 	.word	0x20000438

08007c2c <_fstat>:
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <_fstat+0xc>)
 8007c2e:	2258      	movs	r2, #88	; 0x58
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295
 8007c36:	4770      	bx	lr
 8007c38:	20000438 	.word	0x20000438

08007c3c <_getpid>:
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <_getpid+0xc>)
 8007c3e:	2258      	movs	r2, #88	; 0x58
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	f04f 30ff 	mov.w	r0, #4294967295
 8007c46:	4770      	bx	lr
 8007c48:	20000438 	.word	0x20000438

08007c4c <_isatty>:
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <_isatty+0xc>)
 8007c4e:	2258      	movs	r2, #88	; 0x58
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	2000      	movs	r0, #0
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000438 	.word	0x20000438

08007c5c <_kill>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <_kill+0xc>)
 8007c5e:	2258      	movs	r2, #88	; 0x58
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	4770      	bx	lr
 8007c68:	20000438 	.word	0x20000438

08007c6c <_lseek>:
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <_lseek+0xc>)
 8007c6e:	2258      	movs	r2, #88	; 0x58
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295
 8007c76:	4770      	bx	lr
 8007c78:	20000438 	.word	0x20000438

08007c7c <_read>:
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <_read+0xc>)
 8007c7e:	2258      	movs	r2, #88	; 0x58
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	f04f 30ff 	mov.w	r0, #4294967295
 8007c86:	4770      	bx	lr
 8007c88:	20000438 	.word	0x20000438

08007c8c <_sbrk>:
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <_sbrk+0x14>)
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	4602      	mov	r2, r0
 8007c92:	b909      	cbnz	r1, 8007c98 <_sbrk+0xc>
 8007c94:	4903      	ldr	r1, [pc, #12]	; (8007ca4 <_sbrk+0x18>)
 8007c96:	6019      	str	r1, [r3, #0]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	4402      	add	r2, r0
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	4770      	bx	lr
 8007ca0:	2000022c 	.word	0x2000022c
 8007ca4:	20000448 	.word	0x20000448

08007ca8 <_write>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <_write+0xc>)
 8007caa:	2258      	movs	r2, #88	; 0x58
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	4770      	bx	lr
 8007cb4:	20000438 	.word	0x20000438

08007cb8 <_exit>:
 8007cb8:	e7fe      	b.n	8007cb8 <_exit>
	...

08007cbc <_init>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr

08007cc8 <_fini>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	bf00      	nop
 8007ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cce:	bc08      	pop	{r3}
 8007cd0:	469e      	mov	lr, r3
 8007cd2:	4770      	bx	lr
